+ ImagoSemi DMCU Relocating Linker v0.2
Pass2
+###########################################################
+#              IMLINKER Copyright 2011-2012               #
+#                   (c) Copyright 2011-2012               #
+#                Imago Semiconductor Corp.                #
+###########################################################
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$UART_Init   014B3A   0022 =     34. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014B3A   4B3A  _UART_Init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SendByte   0149DC   002C =     44. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0149DC   49DC  _SendByte 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SendString   013CF4   0066 =    102. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013CF4   3CF4  _SendString 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$send_hex_byte   0143A2   004E =     78. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0143A2   43A2  _send_hex_byte 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$send_hex_u8   014846   0038 =     56. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014846   4846  _send_hex_u8 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$send_hex_u16   01462C   0040 =     64. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01462C   462C  _send_hex_u16 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$send_hex_u32   013926   0084 =    132. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013926   3926  _send_hex_u32 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$conv   01487E   0038 =     56. bytes (UART_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01487E   487E  _conv 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_ADC_MAIN_DATA_   00075C   0004 =      4. bytes (ADC_MAIN_DATA,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_ADC_MAIN_CODE_   013DBE   0062 =     98. bytes (ADC_MAIN_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013DD2   3DD2  _Get_ADCValue 
+      013DBE   3DBE  _ADC_init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$remote_index_tab   006F70   0080 =    128. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F70   6F70  _remote_index_tab 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$g_paster_dir   006DA6   003C =     60. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006DA6   6DA6  _g_paster_dir 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$g_string2   006F34   003C =     60. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F34   6F34  _g_string2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$rev_int_2   006FFE   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FFE   6FFE  _rev_int_2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$rev_int_1   006FFC   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FFC   6FFC  _rev_int_1 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$t01_calib_data3   006F30   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F30   6F30  _t01_calib_data3 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$t01_calib_data2   006F14   0004 =      4. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F14   6F14  _t01_calib_data2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$t01_calib_data1   006F10   0004 =      4. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F10   6F10  _t01_calib_data1 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$adc7_value   006FFA   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FFA   6FFA  _adc7_value 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$adc3_value   006FF8   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FF8   6FF8  _adc3_value 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$adc2_value   006FF6   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FF6   6FF6  _adc2_value 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$adc0_value   006FF4   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FF4   6FF4  _adc0_value 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$prev_task   006F32   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F32   6F32  _prev_task 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$all_mp3_num   006F02   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F02   6F02  _all_mp3_num 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$current_area   006F08   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F08   6F08  _current_area 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$current_playmp3_number   006F0A   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F0A   6F0A  _current_playmp3_number 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$current_wav_num   006FF2   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FF2   6FF2  _current_wav_num 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$wav_action   006FF0   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006FF0   6FF0  _wav_action 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$bak_current_index   006F2A   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F2A   6F2A  _bak_current_index 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$volume_inc_flag   006F28   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F28   6F28  _volume_inc_flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$current_mp3_sd   006F06   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F06   6F06  _current_mp3_sd 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$sd2_ap3_number   006F0C   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F0C   6F0C  _sd2_ap3_number 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$current_sd   006F0E   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F0E   6F0E  _current_sd 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$ap4_mp3_flag   006F1E   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F1E   6F1E  _ap4_mp3_flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$ap3_file_number   006F1C   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F1C   6F1C  _ap3_file_number 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$vol_idx   006F1A   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F1A   6F1A  _vol_idx 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$rev1Flag   006F2E   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F2E   6F2E  _rev1Flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$sys_flag   006F04   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F04   6F04  _sys_flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$systerm_flag   006F2C   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F2C   6F2C  _systerm_flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$gflag   006F18   0002 =      2. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F18   6F18  _gflag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$cluster_buf   006DE2   0120 =    288. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006DE2   6DE2  _cluster_buf 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$AD$Current_Record   006F20   0008 =      8. bytes (SPACE_XRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      006F20   6F20  _Current_Record 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_CODE$RD$VolTbl   014D18   000A =     10. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D18   4D18  _VolTbl 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_CODE$RD$SpeakerTbl   014D22   000A =     10. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D22   4D22  _SpeakerTbl 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$system_reset   01491E   0032 =     50. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01491E   491E  _system_reset 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$Exception   013B9E   007A =    122. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013B9E   3B9E  _Exception 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$timer_get_time   014AF6   0022 =     34. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014AF6   4AF6  _timer_get_time 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$timer_check_timeout   014980   002E =     46. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014980   4980  _timer_check_timeout 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$TIMER0_ISR   01389C   008A =    138. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01389C   389C  _TIMER0_ISR 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$adc_get   01265C   0106 =    262. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01265C   265C  _adc_get 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$op_time_dowith   0143F0   004E =     78. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0143F0   43F0  _op_time_dowith 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$clk_time_dowith   014160   0058 =     88. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014160   4160  _clk_time_dowith 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$vol_dec   014D4C   0006 =      6. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D4C   4D4C  _vol_dec 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$vol_inc   014D46   0006 =      6. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D46   4D46  _vol_inc 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$judge_op   014950   0030 =     48. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014950   4950  _judge_op 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$inc_volume   0139AA   0084 =    132. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0139AA   39AA  _inc_volume 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SpeakDetect   0134FA   00B0 =    176. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0134FA   34FA  _SpeakDetect 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$CheckUSB   013E20   0062 =     98. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013E20   3E20  _CheckUSB 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$power_forbid_autopoweroff   014CB8   0010 =     16. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014CB8   4CB8  _power_forbid_autopoweroff 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$power_authorize_autopoweroff   013D5A   0064 =    100. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013D5A   3D5A  _power_authorize_autopoweroff 
+      013D9C   3D9C  _Delay_ms 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SysClkUpgrade   013FA2   005C =     92. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013FA2   3FA2  _SysClkUpgrade 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SysClkDowngrade   0142B6   0050 =     80. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0142B6   42B6  _SysClkDowngrade 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$clkup_time   01420E   0054 =     84. bytes (SYSTEM_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01420E   420E  _clkup_time 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$time3_init   01443E   004C =     76. bytes (SYSTEM_TIMER3_INIT_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01443E   443E  _time3_init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$System_Timer3_Init   012DF6   00D8 =    216. bytes (SYSTEM_TIMER3_INIT_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012DF6   2DF6  _System_Timer3_Init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$BatteryDetect   012C36   00E6 =    230. bytes (BATTERY_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012C36   2C36  _BatteryDetect 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$flag_tishi   000794   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000794   0794  _flag_tishi 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$sleep_mode_count   00078A   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00078A   078A  _sleep_mode_count 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$speaker_vol   000788   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000788   0788  _speaker_vol 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$adc_timer   00073C   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00073C   073C  _adc_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$adc_channel   00079A   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00079A   079A  _adc_channel 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$led_timer   000730   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000730   0730  _led_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$g_autopoweroff_timer   0006E4   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006E4   06E4  _g_autopoweroff_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$g_b_poweroff_activated   00076A   0002 =      2. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00076A   076A  _g_b_poweroff_activated 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$g_b_autopoweroff_forbidden   00076C   0002 =      2. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00076C   076C  _g_b_autopoweroff_forbidden 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$Buf   000400   0200 =    512. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000400   0400  _Buf 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$Length   0006F4   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006F4   06F4  _Length 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$Start_Sector   0006F0   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006F0   06F0  _Start_Sector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$gOidXOR_Key   000790   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000790   0790  _gOidXOR_Key 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$play_file_size   000728   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000728   0728  _play_file_size 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$mp3_begin_add   00072C   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00072C   072C  _mp3_begin_add 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$ADPCM_File   0007A0   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0007A0   07A0  _ADPCM_File 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$flag_creat   000796   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000796   0796  _flag_creat 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$OID_PLAY   00079C   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00079C   079C  _OID_PLAY 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$low_num   00078C   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00078C   078C  _low_num 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$heigh_num   00078E   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00078E   078E  _heigh_num 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$system_check_timer   00071C   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00071C   071C  _system_check_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$DAC_Out   00079E   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00079E   079E  _DAC_Out 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$flag_wav_play   000792   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000792   0792  _flag_wav_play 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$battery_count   000798   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000798   0798  _battery_count 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$vol_idx_bak   000786   0002 =      2. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000786   0786  _vol_idx_bak 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$g_timer_tick   000734   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000734   0734  _g_timer_tick 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$g_system_clk_timer   000738   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000738   0738  _g_system_clk_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$sleep_mode_timer   000720   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000720   0720  _sleep_mode_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_DATA$RD$qieqing_timer   000724   0004 =      4. bytes (SYSTEM_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000724   0724  _qieqing_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$op_close_timer   0006E0   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006E0   06E0  _op_close_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$sys_led_timer   0006D4   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006D4   06D4  _sys_led_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$rec_led_timer   0006DC   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006DC   06DC  _rec_led_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_BATTERY_CODE$RD$SYSTEM_C$   014C98   0010 =     16. bytes (BATTERY_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SYSTEM_CODE$RD$SYSTEM_C$   0148EC   0032 =     50. bytes (SYSTEM_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$lidian_flag   00077C   0002 =      2. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00077C   077C  _lidian_flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   013FFE   005A =     90. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013FFE   3FFE  _SYSTEM_TIMER3_INIT_CODE_CInitFun 
+      013FFE   3FFE  _ADC_MAIN_CODE_CInitFun 
+      013FFE   3FFE  _DAC_TEMP_CODE00_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _DAC_TEMP_CODE01_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _DAC_TEMP_CODE02_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _BATTERY_CODE_CInitFun 
+      013FFE   3FFE  _USB_STORAGE_CODE_CInitFun 
+      013FFE   3FFE  _LIBC_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE00_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE10_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE01_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _SYSTEM_CODE_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE11_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE02_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE12_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE03_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE13_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE04_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE14_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE05_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _USB_MS_CODE_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE15_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE06_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _KBDMCC_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE16_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE07_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _SYSDRV_CODE_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE17_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE08_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _USB_STORAGE_IRAM_CInitFun 
+      013FFE   3FFE  _FAT_TEMP_CODE09_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _USB_CORE_CODE_CInitFun 
+      013FFE   3FFE  _SPIF_CODE_CInitFun 
+      013FFE   3FFE  _SDTL_CODE_CInitFun 
+      013FFE   3FFE  _SPACE_IRAM_CInitFun 
+      013FFE   3FFE  _UART_CODE_CInitFun 
+      013FFE   3FFE  _DAC_COMMON_CODE_ADHERE_INFO_CInitFun 
+      013FFE   3FFE  _USBDET_CODE_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$lidian_flag   014D5E   0002 =      2. bytes (USB_MS_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$key_down   0132CE   00C4 =    196. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0132CE   32CE  _key_down 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_TEXT$main   01162C   0196 =    406. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01162C   162C  _main 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$usb_core_status   00077A   0002 =      2. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00077A   077A  _usb_core_status 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$b_usb_detection   000782   0002 =      2. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000782   0782  _b_usb_detection 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$usb_count   000760   0002 =      2. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000760   0760  _usb_count 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$usb_nosd_timer   0006D0   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006D0   06D0  _usb_nosd_timer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$adpate_flag   000784   0002 =      2. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000784   0784  _adpate_flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$vid_data   000778   0002 =      2. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000778   0778  _vid_data 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$flag_chongdian   000780   0002 =      2. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000780   0780  _flag_chongdian 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$usb_attach_time   000714   0004 =      4. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000714   0714  _usb_attach_time 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$time_count   000718   0004 =      4. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000718   0718  _time_count 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$g_exit_usb   00077E   0002 =      2. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00077E   077E  _g_exit_usb 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_CODE$RD$USB_MassStorage_c$   0147D6   0038 =     56. bytes (USB_MS_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usd1_protect   014D36   0008 =      8. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D36   4D36  _usd1_protect 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usd1_write   014AAA   0026 =     38. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014AAA   4AAA  _usd1_write 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usd1_status   014C2A   0018 =     24. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014C2A   4C2A  _usd1_status 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_SD1_Register   013784   008E =    142. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013784   3784  _MassStorage_SD1_Register 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_SD1_Loop   014D58   0006 =      6. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D58   4D58  _MassStorage_SD1_Loop 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_SD1_Init   014C5A   0018 =     24. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014C5A   4C5A  _MassStorage_SD1_Init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_CODE$RD$USB_MassStorage_SD1_c$   014C10   001A =     26. bytes (USB_MS_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$__usbtimer   013B24   007A =    122. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013B24   3B24  ___usbtimer 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBWriteCommit   013A2E   007C =    124. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013A2E   3A2E  _USBWriteCommit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_Write   014C42   0018 =     24. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014C42   4C42  _MassStorage_Write 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_Registers   01479C   003A =     58. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01479C   479C  _MassStorage_Registers 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_Loop   012ECE   00D6 =    214. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012ECE   2ECE  _MassStorage_Loop 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_Exit   014C86   0012 =     18. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014C86   4C86  _MassStorage_Exit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$MassStorage_Init   0146AC   0040 =     64. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0146AC   46AC  _MassStorage_Init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_XRAM$RD$usb_stor   000670   0026 =     38. bytes (USB_MS_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000670   0670  _usb_stor 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_MS_CODE$RD$USB_MassStorage_config_c$   014CD8   000E =     14. bytes (USB_MS_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+USB_STORAGE_IRAM   012B4E   00E8 =    232. bytes (USB_STORAGE_IRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012B4E   2B4E  _USB_Device_Desc 
+      012BB2   2BB2  _USB_Configuration_Desc_FS 
+      012B60   2B60  String00 
+      012BD2   2BD2  _USB_Device_Qualifier_Desc 
+      012B64   2B64  String01 
+      012B72   2B72  String02 
+      012B82   2B82  String03 
+      012B92   2B92  _USB_Configuration_Desc 
+      012B90   2B90  _Microsoft_OS_String 
+      012BEC   2BEC  _DEFAULT_INFORMATION 
+      012C12   2C12  _COMMAND1A 
+      012BE4   2BE4  _DEFAULT_VENDOR 
+      012C00   2C00  _SENCE_KEY 
+      012C26   2C26  _MODE_SENSE 
+      012C1A   2C1A  _CAPACITY_DATA 
+      012BFC   2BFC  _DEFAULT_REV 
+      012C00   2C00  _INQUIRY_Data_end 
+      012BDC   2BDC  _INQUIRY_Data 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+__multi_debugger   010004   0004 =      4. bytes (SPACE_IRAM,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+REG_DEF_AREA   00F120   01E0 =    480. bytes (SPACE_SFR,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00F1C6   00C6  _SDARG0 
+      00F144   0044  _DTUC1 
+      00F1B2   00B2  _PDID 
+      00F1C4   00C4  _SDARG1 
+      00F146   0046  _DTUC2 
+      00F234   0134  _TMR0 
+      00F148   0048  _DTUC3 
+      00F274   0174  _I2SCR 
+      00F2FE   01FE  _SP 
+      00F1FA   00FA  _I2CSAR 
+      00F23A   013A  _TMR1 
+      00F250   0150  _PWM0 
+      00F240   0140  _TMR2 
+      00F252   0152  _PWM1 
+      00F116   0016  _RS 
+      00F188   0088  _PBOD 
+      00F184   0084  _PBEN 
+      00F1FE   00FE  _I2CRDR 
+      00F246   0146  _TMR3 
+      00F254   0154  _PWM2 
+      00F198   0098  _PCEN 
+      00F19C   009C  _PCOD 
+      00F222   0122  _CSNB 
+      00F2B0   01B0  _ADCICR 
+      00F24C   014C  _TMR4 
+      00F256   0156  _PWM3 
+      00F1AA   00AA  _PDEN 
+      00F1AE   00AE  _PDOD 
+      00F292   0192  _P8SDX0 
+      00F114   0014  _SRC 
+      00F1FC   00FC  _I2CTDR 
+      00F258   0158  _PWM4 
+      00F270   0170  _ADCCON 
+      00F294   0194  _P8SDX1 
+      00F298   0198  _P8SDY0 
+      00F25A   015A  _PWM5 
+      00F1DE   00DE  _SDND 
+      00F214   0114  _SP1CR 
+      00F296   0196  _P8SDX2 
+      00F29A   019A  _P8SDY1 
+      00F25C   015C  _PWM6 
+      00F28A   018A  _IRAMA 
+      00F190   0090  _PBPH 
+      00F19E   009E  _PCDS 
+      00F218   0118  _SP1DR 
+      00F21A   011A  _SP2CR 
+      00F29C   019C  _P8SDY2 
+      00F25E   015E  _PWM7 
+      00F2EA   01EA  _ARX 
+      00F1A2   00A2  _PCPH 
+      00F1B0   00B0  _PDDS 
+      00F21E   011E  _SP2DR 
+      00F1B4   00B4  _PDPH 
+      00F1EE   00EE  _P80TMS 
+      00F200   0100  _SSW0 
+      00F202   0102  _SSW1 
+      00F140   0040  _EXR 
+      00F1C0   00C0  _SDCCR 
+      00F204   0104  _SSW2 
+      00F2A0   01A0  _TM0ICR 
+      00F106   0006  _STOVUN 
+      00F224   0124  _CSRDBA 
+      00F192   0092  _PBPIE 
+      00F206   0106  _SSW3 
+      00F2A2   01A2  _TM1ICR 
+      00F2B2   01B2  _PBICR 
+      00F186   0086  _PBDIR 
+      00F196   0096  _PBPIF 
+      00F1A4   00A4  _PCPIE 
+      00F208   0108  _SSW4 
+      00F2B4   01B4  _PCICR 
+      00F2A4   01A4  _TM2ICR 
+      00F19A   009A  _PCDIR 
+      00F1A8   00A8  _PCPIF 
+      00F2C6   01C6  _NFICR 
+      00F2D2   01D2  _DACLICR 
+      00F2A6   01A6  _TM3ICR 
+      00F18E   008E  _PBODN 
+      00F1AC   00AC  _PDDIR 
+      00F2A8   01A8  _TM4ICR 
+      00F2F4   01F4  _R10 
+      00F2B8   01B8  _CSICR 
+      00F2F6   01F6  _R11 
+      00F226   0126  _CSWDBA 
+      00F102   0002  _PSR 
+      00F1C2   00C2  _SDCIR 
+      00F2C4   01C4  _SDICR 
+      00F2F8   01F8  _R12 
+      00F28C   018C  _IRAMDH 
+      00F220   0120  _CSCON 
+      00F2FA   01FA  _R13 
+      00F236   0136  _TM0PRD 
+      00F2FC   01FC  _R14 
+      00F100   0000  _SOCR 
+      00F2C0   01C0  _MICICR 
+      00F232   0132  _TMR0CR 
+      00F23C   013C  _TM1PRD 
+      00F2C8   01C8  _DACRICR 
+      00F2FE   01FE  _R15 
+      00F2D4   01D4  _I2SLICR 
+      00F238   0138  _TMR1CR 
+      00F216   0116  _SP1SR 
+      00F28E   018E  _IRAMDL 
+      00F2BE   01BE  _USB1ICR 
+      00F242   0142  _TM2PRD 
+      00F21C   011C  _SP2SR 
+      00F278   0178  _I2SLTDH 
+      00F2AA   01AA  _USB2ICR 
+      00F23E   013E  _TMR2CR 
+      00F1DA   00DA  _SDCKCR 
+      00F248   0148  _TM3PRD 
+      00F194   0094  _PBPIP 
+      00F24E   014E  _TM4PRD 
+      00F290   0190  _P8SCON 
+      00F2AC   01AC  _USB3ICR 
+      00F2BC   01BC  _SPI1ICR 
+      00F244   0144  _TMR3CR 
+      00F1C8   00C8  _SDRSP0 
+      00F24A   014A  _TMR4CR 
+      00F2BA   01BA  _SPI2ICR 
+      00F2C2   01C2  _CODECICR 
+      00F212   0112  _UARBR 
+      00F1CA   00CA  _SDRSP1 
+      00F20A   010A  _UARCR 
+      00F1CC   00CC  _SDRSP2 
+      00F260   0160  _CODECCON 
+      00F276   0176  _I2SLTDL 
+      00F2D6   01D6  _I2SRICR 
+      00F1CE   00CE  _SDRSP3 
+      00F1F0   00F0  _P80DBA 
+      00F1D0   00D0  _SDRSP4 
+      00F180   0080  _MODCON 
+      00F27C   017C  _I2SRTDH 
+      00F1D2   00D2  _SDRSP5 
+      00F1D4   00D4  _SDRSP6 
+      00F2D0   01D0  _UART_RX_ICR 
+      00F2E0   01E0  _R0 
+      00F1D6   00D6  _SDRSP7 
+      00F2E2   01E2  _R1 
+      00F27A   017A  _I2SRTDL 
+      00F1D8   00D8  _SDRSP8 
+      00F1E6   00E6  _P80CI 
+      00F2CE   01CE  _UART_TX_ICR 
+      00F2E4   01E4  _R2 
+      00F1EA   00EA  _P80DI 
+      00F2E6   01E6  _R3 
+      00F2E8   01E8  _R4 
+      00F120   0020  _DS0 
+      00F1F6   00F6  _FUSDAT 
+      00F2B6   01B6  _RTCICR 
+      00F2EA   01EA  _R5 
+      00F122   0022  _DS1 
+      00F2DC   01DC  _ES0 
+      00F1EC   00EC  _P80NB 
+      00F2EC   01EC  _R6 
+      00F2F0   01F0  _X0 
+      00F230   0130  _RTCHDT 
+      00F2DE   01DE  _ES1 
+      00F2EE   01EE  _R7 
+      00F2F2   01F2  _X1 
+      00F2F8   01F8  _Y0 
+      00F182   0082  _USBCON 
+      00F1E4   00E4  _P80CO 
+      00F2F0   01F0  _R8 
+      00F2F4   01F4  _X2 
+      00F2FA   01FA  _Y1 
+      00F124   0024  _XC0 
+      00F1DC   00DC  _SDTMS 
+      00F1E8   00E8  _P80DO 
+      00F28A   018A  IRAMA 
+      00F2F2   01F2  _R9 
+      00F2FC   01FC  _Y2 
+      00F128   0028  _XC1 
+      00F130   0030  _YC0 
+      00F272   0172  _ADCD 
+      00F12C   002C  _XC2 
+      00F134   0034  _YC1 
+      00F20C   010C  _UARSR 
+      00F138   0038  _YC2 
+      00F1F2   00F2  _FUSCON 
+      00F210   0110  _UARRDR 
+      00F22C   012C  _RTCTBR 
+      00F1F4   00F4  _FUSFIFO 
+      00F20E   010E  _UARTDR 
+      00F11A   001A  _PC 
+      00F1F8   00F8  _I2CCR 
+      00F104   0004  _SB 
+      00F112   0012  _RC 
+      00F126   0026  _XM0 
+      00F110   0010  _CS 
+      00F12A   002A  _XM1 
+      00F132   0032  _YM0 
+      00F28C   018C  IRAMDH 
+      00F2CA   01CA  _P80ICR 
+      00F2F6   01F6  _FP 
+      00F118   0018  _RE 
+      00F12E   002E  _XM2 
+      00F136   0036  _YM1 
+      00F108   0008  _EMCR1 
+      00F13A   003A  _YM2 
+      00F1E2   00E2  _P80CON 
+      00F262   0162  _DACLD 
+      00F22A   012A  _RTCWDT 
+      00F10A   000A  _EMCR2 
+      00F10C   000C  _EMCR3 
+      00F28E   018E  IRAMDL 
+      00F2CC   01CC  _UARTICR 
+      00F2EC   01EC  _ARH 
+      00F2AE   01AE  _I2CICR 
+      00F22E   012E  _RTCMST 
+      00F266   0166  _MICD 
+      00F1E0   00E0  _SDDBA 
+      00F264   0164  _DACRD 
+      00F18C   008C  _PBID 
+      00F2EE   01EE  _ARL 
+      00F142   0042  _DTUC0 
+      00F1A0   00A0  _PCID 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SD_INIT   0105E2   032A =    810. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0105E2   05E2  _SD1_Init 
+      010608   0608  _SD2_Init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SDTL_ConverDWord   014CC8   0010 =     16. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014CC8   4CC8  _SDTL_ConvertDWORD 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sd1_mount   010E82   022C =    556. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      010E82   0E82  _sd1_mount 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sd1_cache8k_init   014762   003A =     58. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014762   4762  _sd1_cache8k_init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$sd1_8k_buf   00348E   2000 =   8192. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00348E   348E  _sd1_8k_buf 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBStorageRegister   011948   0172 =    370. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011948   1948  _USBStorageRegister 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBStorageInit   014BF4   001C =     28. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014BF4   4BF4  _USBStorageInit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sd1_fat_size   014CE6   000E =     14. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014CE6   4CE6  _sd1_fat_size 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_test_unit_ready   013208   00C6 =    198. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013208   3208  _do_test_unit_ready 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_request_sense   011460   01CC =    460. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011460   1460  _do_request_sense 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_inquiry   011C2A   0152 =    338. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011C2A   1C2A  _do_inquiry 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_CODE$RD$MODE_SENSE_PAGE2A   014BD8   001C =     28. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014BD8   4BD8  _MODE_SENSE_PAGE2A 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_mode_sense_cdrom   0136F6   008E =    142. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0136F6   36F6  _do_mode_sense_cdrom 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_mode_sense   01313E   00CA =    202. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01313E   313E  _do_mode_sense 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_start_stop_unit   014B18   0022 =     34. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014B18   4B18  _do_start_stop_unit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_read_format_capacity   01211C   0118 =    280. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01211C   211C  _do_read_format_capacity 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_read_capacity   01295E   00FC =    252. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01295E   295E  _do_read_capacity 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_mode_select   014D00   000C =     12. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D00   4D00  _do_mode_select 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_CODE$RD$kTOC_DATA0   014C72   0014 =     20. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014C72   4C72  _kTOC_DATA0 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_CODE$RD$kTOC_DATA1   014CF4   000C =     12. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014CF4   4CF4  _kTOC_DATA1 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_CODE$RD$kTOC_DATA2   01451C   0046 =     70. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01451C   451C  _kTOC_DATA2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$do_read_TOC   012D1C   00DA =    218. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012D1C   2D1C  _do_read_TOC 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$UFI_Set_Addr   013F42   0060 =     96. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013F60   3F60  _UFI_Get_TransLen 
+      013F94   3F94  _UFI_Get_SecLen2 
+      013F80   3F80  _UFI_Get_SecLen4 
+      013F42   3F42  _UFI_Set_Addr 
+      013F74   3F74  _UFI_Get_TransLen2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$UFI_Dispatch   010214   03CE =    974. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      010214   0214  _UFI_Dispatch 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_ep0_class_request   011D7C   0136 =    310. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011D7C   1D7C  _usb_stor_ep0_class_request 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sDMA_TX_Backend   014108   0058 =     88. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014108   4108  _sDMA_TX_Backend 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sDMA_RX_Backend   012FA4   00CE =    206. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012FA4   2FA4  _sDMA_RX_Backend 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_Vendor_Clear_Feature   01480E   0038 =     56. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01480E   480E  _usb_stor_Vendor_Clear_Feature 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_Vendor_Reset   014058   0058 =     88. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014058   4058  _usb_stor_Vendor_Reset 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$gusb_stor   00064A   0026 =     38. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00064A   064A  _gusb_stor 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$usb_irom_stor   0006F8   0004 =      4. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006F8   06F8  _usb_irom_stor 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$usb_devMode   000770   0002 =      2. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000770   0770  _usb_devMode 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$USBReadyCount   0006C8   0008 =      8. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006C8   06C8  _USBReadyCount 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$fp_USB_Stor_Other_SCSI   000704   0004 =      4. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000704   0704  _fp_USB_Stor_Other_SCSI 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$fp_USB_Stor_TX   0006FC   0004 =      4. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006FC   06FC  _fp_USB_Stor_TX 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$fp_USB_Stor_RX   000700   0004 =      4. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000700   0700  _fp_USB_Stor_RX 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$usb_max_lun   00076E   0002 =      2. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00076E   076E  _usb_max_lun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$USBStall   000772   0002 =      2. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000772   0772  _USBStall 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$USBLen   000710   0004 =      4. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000710   0710  _USBLen 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$USBTag   00070C   0004 =      4. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00070C   070C  _USBTag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$USB_Addr   000708   0004 =      4. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000708   0708  _USB_Addr 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$USBLun   000774   0002 =      2. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000774   0774  _USBLun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_STORAGE_XRAM$RD$UFI_Err   000776   0002 =      2. bytes (USB_STORAGE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000776   0776  _UFI_Err 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBStorageSetStatus   014D52   0006 =      6. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D52   4D52  _USBStorageSetStatus 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBFunctionRegister   013EE2   0060 =     96. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013EE2   3EE2  _USBFunctionRegister 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_CBW_RX   013812   008A =    138. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013812   3812  _usb_stor_CBW_RX 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_CSW_TX_end   014CA8   0010 =     16. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014CA8   4CA8  _usb_stor_CSW_TX_end 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_CSW_TX   012A5A   00F4 =    244. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012A5A   2A5A  _usb_stor_CSW_TX 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_Data_TX_PIO   012234   010A =    266. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012234   2234  _usb_stor_Data_TX_PIO 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_Data_RX_DMA   013392   00B8 =    184. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013392   3392  _usb_stor_Data_RX_DMA 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_Data_TX_DMA   0117C2   0186 =    390. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0117C2   17C2  _usb_stor_Data_TX_DMA 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_get_read   014A82   0028 =     40. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014A82   4A82  _usb_get_read 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_get_write   014A5A   0028 =     40. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014A5A   4A5A  _usb_get_write 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_get_size   014728   003A =     58. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014728   4728  _usb_stor_get_size 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_get_type   014A32   0028 =     40. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014A32   4A32  _usb_stor_get_type 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_stor_flush   0145EA   0042 =     66. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0145EA   45EA  _usb_stor_flush 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_empty_error_func   014D3E   0008 =      8. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D3E   4D3E  _usb_empty_error_func 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBStorageInit2   012448   010A =    266. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012448   2448  _USBStorageInit2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBStorageUninit   0146EC   003C =     60. bytes (USB_STORAGE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0146EC   46EC  _USBStorageUninit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+USB_API_XRAM   0031F4   0008 =      8. bytes (SPACE_XRAM,ABS,OVR)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+KBDM9_CLOCK_DRV_CODE   0145A6   0044 =     68. bytes (SYSDRV_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0145A6   45A6  _SystemClock 
+      0145DC   45DC  _QuerySysClock 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+PCMv2_InitCode   01B930   015A =    346. bytes (DAC_TEMP_CODE00,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01B930   0030  _DAC_SetupISR 
+      01B99C   009C  _DAC_CallBackFunction2Check 
+      01B9AC   00AC  _DAC_Reg_Init 
+      01BA1C   011C  _DAC_Power_On 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+COMMON_XRAM   001092   0212 =    530. bytes (SPACE_XRAM,ABS,OVR)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+NEWMACRO   014262   0054 =     84. bytes (LIBC,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014284   4284  M_PUSH$nearWordsR0 
+      014262   4262  M_PUSH$farWordsR3R4 
+      0142A6   42A6  M_MOV$nearWordsR0R1 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+CCAAC   014AD0   0026 =     38. bytes (LIBC,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014AD0   4AD0  _ClrCirqAndAdjustCpri 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$DAC_Init_   01BA8A   00AC =    172. bytes (DAC_TEMP_CODE00,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01BA8A   018A  _DAC_Init_ 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SDK_loadCode   010C28   025A =    602. bytes (SPACE_IRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      010C28   0C28  _LoadCode 
+      010E20   0E20  _LoadCodeInitFlag 
+      010E1A   0E1A  _SDKLoadCodInit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+PCM_TableROM   01C052   0010 =     16. bytes (DAC_COMMON_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+PCMv2ISR   01BC30   03A2 =    930. bytes (DAC_COMMON_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01BEDC   02DC  DAC_Delay_1ms 
+      01BD56   0156  _DAC_SET_DTU_PLAY 
+      01BED4   02D4  _DAC_FillBuffer1 
+      01BED8   02D8  _DAC_FillBuffer2 
+      01BC30   0030  _DAC_ISR_L 
+      01BEC4   02C4  _DAC_Buffer1Empty 
+      01BECC   02CC  _DAC_Buffer2Empty 
+      01BD54   0154  _DAC_ISR_R 
+      01BEF0   02F0  CODEC_ISR 
+      01BF16   0316  _DAC_Headphone_Reset 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+PCMv2FlagRAM   00F200   0002 =      2. bytes (DAC_DPRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00F200   0000  DAC_Flag 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+PCMv2RAM   000600   004A =     74. bytes (DAC_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000608   0608  _DAC_FrameSize 
+      00061E   061E  ES0_TEMP1 
+      000620   0620  ES1_TEMP1 
+      000634   0634  ES0_TEMP2 
+      000636   0636  ES1_TEMP2 
+      000600   0600  _DAC_LChannelBuffer1 
+      000604   0604  _DAC_LChannelBuffer2 
+      000602   0602  _DAC_RChannelBuffer1 
+      000606   0606  _DAC_RChannelBuffer2 
+      00062C   062C  Rg10_TEMP1 
+      000618   0618  _DAC_CurrentVolume 
+      00062E   062E  Rg11_TEMP1 
+      000642   0642  Rg10_TEMP2 
+      00060C   060C  _DAC_LChannelDTUNumber 
+      000644   0644  Rg11_TEMP2 
+      000630   0630  Rg13_TEMP1 
+      000632   0632  Rg14_TEMP1 
+      000646   0646  Rg13_TEMP2 
+      000610   0610  _DAC_FillBufferFunc1 
+      000648   0648  Rg14_TEMP2 
+      000614   0614  _DAC_FillBufferFunc2 
+      00060E   060E  _DAC_RChannelDTUNumber 
+      00061A   061A  _DAC_VolumeRange 
+      000622   0622  Rg3_TEMP1 
+      000624   0624  Rg4_TEMP1 
+      000638   0638  Rg3_TEMP2 
+      00060A   060A  _DAC_SampleRate 
+      000626   0626  Rg5_TEMP1 
+      00063A   063A  Rg4_TEMP2 
+      00063C   063C  Rg5_TEMP2 
+      000600   0600  DAC_LBuf1Ptr 
+      000628   0628  Rg8_TEMP1 
+      000604   0604  DAC_LBuf2Ptr 
+      00062A   062A  Rg9_TEMP1 
+      00063E   063E  Rg8_TEMP2 
+      000640   0640  Rg9_TEMP2 
+      000602   0602  DAC_RBuf1Ptr 
+      000606   0606  DAC_RBuf2Ptr 
+      00061C   061C  _DAC_CCMC_Status 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+LoadTemp0   01C03A   0018 =     24. bytes (DAC_COMMON_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C03A   043A  _LoadTemp0Code 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+LoadTemp1   01C022   0018 =     24. bytes (DAC_COMMON_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C022   0422  _LoadTemp1Code 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+LoadTemp2   01C00A   0018 =     24. bytes (DAC_COMMON_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C00A   040A  _LoadTemp2Code 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+DACInit   01C062   0008 =      8. bytes (DAC_COMMON_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C062   0462  _DAC_Init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+PCMv2GoCodeTable   01BBC6   0008 =      8. bytes (DAC_TEMP_CODE01,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+PCMv2GoCode   01B930   0296 =    662. bytes (DAC_TEMP_CODE01,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01BB84   0284  _DAC_Speaker_Volume_ 
+      01BB10   0210  _DAC_Disable_BTL_ 
+      01B930   0030  _DAC_Go_ 
+      01BAE2   01E2  _DAC_Disable_HeadPhone_ 
+      01BB36   0236  _DAC_HeadPhone_Volume_ 
+      01BA20   0120  _DAC_Sampling_Rate 
+      01BAC4   01C4  _DAC_Enable_BTL_ 
+      01BA80   0180  _DAC_Enable_HeadPhone_ 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+DAC_CODE   01BFD2   0038 =     56. bytes (DAC_COMMON_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01BFEA   03EA  _DAC_Disable_HeadPhone 
+      01BFFA   03FA  _DAC_HeadPhone_Volume 
+      01BFDA   03DA  _DAC_Enable_HeadPhone 
+      01BFF2   03F2  _DAC_Disable_Speaker 
+      01C002   0402  _DAC_Speaker_Volume 
+      01BFE2   03E2  _DAC_Enable_Speaker 
+      01BFD2   03D2  _DAC_Go 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_CORE_DATA$RD$fp_init_interface   0006A8   0010 =     16. bytes (USB_CORE_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006A8   06A8  _fp_init_interface 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_USB_CORE_DATA$RD$fp_class_func   0006B8   0010 =     16. bytes (USB_CORE_DATA,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006B8   06B8  _fp_class_func 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$fp_ep2_TX   0006E8   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006E8   06E8  _fp_ep2_TX 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$fp_ep2_RX   0006EC   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006EC   06EC  _fp_ep2_RX 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_epx_tx_isr   0141B8   0056 =     86. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0141B8   41B8  _usb_epx_tx_isr 
+      01420C   420C  _usb_empty_func1 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_ep1_rx_isr1   013C88   006C =    108. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013C88   3C88  _usb_epx_rx_isr 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+USB_driver_XRAM1   002944   08B0 =   2224. bytes (SPACE_XRAM,ABS,OVR)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+USB_driver_XRAM2   0031FC   0054 =     84. bytes (SPACE_XRAM,ABS,OVR)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_ep_init_interrupt_ep   014562   0044 =     68. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014562   4562  _usb_ep_init_interrupt_ep 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_isr_fix   013E82   0060 =     96. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013E82   3E82  _usb_isr_fix 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_class_request_fix   013AAA   007A =    122. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013AAA   3AAA  _usb_class_request_fix 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_class_request_tx_backend   0140B0   0058 =     88. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0140B0   40B0  _usb_class_request_tx_backend 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_class_request_rx_backend   01448A   004A =     74. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01448A   448A  _usb_class_request_rx_backend 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_register_class_func   014354   004E =     78. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014354   4354  _usb_register_class_func 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usb_register_interface_func   014306   004E =     78. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014306   4306  _usb_register_interface_func 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$_usb_init_interface_func   01466C   0040 =     64. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01466C   466C  __usb_init_interface_func 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBCoreInit   01090C   031C =    796. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01090C   090C  _USBCoreInit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$usbdc_loop_fix   01344A   00B0 =    176. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0134E8   34E8  _usbdc_if_disconn2 
+      01344A   344A  _usbdc_loop_fix 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBCoreStatus   014D2C   000A =     10. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D2C   4D2C  _USBCoreStatus 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBCoreUninit   0149AE   002E =     46. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0149AE   49AE  _USBCoreUninit 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$USBCoreLoop   014BBA   001E =     30. bytes (USB_CORE_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014BC8   4BC8  _USB_String_Descrption 
+      014BBA   4BBA  _USBCoreLoop 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SPI_Flash_Var   000696   0012 =     18. bytes (SPIF_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006A4   06A4  _SPIF_Size 
+      00069E   069E  SPCR_Ptr 
+      0006A2   06A2  SPDR_Ptr 
+      00069A   069A  SPIF_Status 
+      0006A0   06A0  SPSR_Ptr 
+      00069C   069C  _SPIF_OTP 
+      000698   0698  _SPIF_Device_ID 
+      000696   0696  _SPIF_MAN_ID 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SPI_Flash_Init   012762   00FE =    254. bytes (SPIF_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012762   2762  _SPIF_Init 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SPI_Flash_Code   0135AA   00AA =    170. bytes (SPIF_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0135AA   35AA  _SPIF_Read_Byte 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SPIF_Clear_Busy   013C18   0070 =    112. bytes (SPIF_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013C86   3C86  _SPIF_Null_Fun 
+      013C18   3C18  _SPIF_Clear_Busy 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SPI_Flash_TBL   014D0C   000C =     12. bytes (SPIF_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014D0C   4D0C  SP1CR_Addr 
+      014D12   4D12  SP2CR_Addr 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SPIF_Command   011290   01D0 =    464. bytes (SPIF_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0113C4   13C4  SPIF_Disable 
+      01132A   132A  SPIF_CEN_High 
+      0112A4   12A4  SPIF_WRDI 
+      0112B8   12B8  SPIF_RDSR 
+      011290   1290  SPIF_WREN 
+      011432   1432  _SPIF_ConvertDWORD 
+      011340   1340  SPIF_Enable 
+      0112E8   12E8  SPIF_WRSR 
+      01144C   144C  _SPIF_Set_Clock 
+      011316   1316  SPIF_CEN_Low 
+      011308   1308  SPIF_Write_Command 
+      0113DC   13DC  _spif_memcpy 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SPIF_XRAM$RD$SPIF_CLK   0007A2   0002 =      2. bytes (SPIF_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0007A2   07A2  _SPIF_CLK 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SPIF_CLK   014D60   0002 =      2. bytes (SPIF_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SPIF_XRAM$RD$SPIF_BUSY   0007A4   0002 =      2. bytes (SPIF_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0007A4   07A4  _SPIF_BUSY 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SPIF_BUSY   014D62   0002 =      2. bytes (SPIF_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SPIF_XRAM$RD$SPIF_FAT_TotalSector   000748   0004 =      4. bytes (SPIF_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000748   0748  _SPIF_FAT_TotalSector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SPIF_XRAM$RD$SPIF_resv_TotalSector   000744   0004 =      4. bytes (SPIF_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000744   0744  _SPIF_resv_TotalSector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SPIF_XRAM$RD$SPIF_FAT_StartSector   00074C   0004 =      4. bytes (SPIF_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      00074C   074C  _SPIF_FAT_StartSector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SPIF_XRAM$RD$pSPIFBusyCallBackFunc   000740   0004 =      4. bytes (SPIF_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000740   0740  _pSPIFBusyCallBackFunc 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$spif_mount   011FE8   0134 =    308. bytes (SPIF_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011FE8   1FE8  _spif_mount 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+CopyYRAMtoIRAM   012860   00FE =    254. bytes (LIBC,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012860   2860  _CopyRAMtoIRAM 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+LIBC_code   013072   00CC =    204. bytes (LIBC,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013072   3072  __memcpy 
+      013082   3082  __memset 
+      01307C   307C  memcpy2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SD_CMD   0110AE   01E2 =    482. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011248   1248  MMC_CMD1 
+      01117E   117E  _SD_CLR_WDT 
+      011278   1278  MMC_CMD_23 
+      011120   1120  CMD_12 
+      01113A   113A  CMD_24 
+      011160   1160  CMD_25 
+      0110FE   10FE  SD_Disable2 
+      011182   1182  CMD_9 
+      0110AE   10AE  SD_Enable2 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SD_XRAM   003250   023E =    574. bytes (SPACE_XRAM,ABS,OVR)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SDTL_XRAM$RD$SD1_Mounted   0007A6   0002 =      2. bytes (SDTL_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0007A6   07A6  _SD1_Mounted 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$SD1_Mounted   014D64   0002 =      2. bytes (SDTL_CODE,REL,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SDTL_XRAM$RD$SD1_FAT_TotalSector   000754   0004 =      4. bytes (SDTL_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000754   0754  _SD1_FAT_TotalSector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SDTL_XRAM$RD$SD1_RES_TotalSector   000750   0004 =      4. bytes (SDTL_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000750   0750  _SD1_RES_TotalSector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SDTL_XRAM$RD$SD1_FAT_StartSector   000758   0004 =      4. bytes (SDTL_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000758   0758  _SD1_FAT_StartSector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_fmemcpys64k_   014B9C   001E =     30. bytes (SPACE_IRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014B9C   4B9C  _fmemcpys64k 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+IP_ROM   030000   10000 =  65536. bytes (SPACE_ROM,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+IP_JUMP_TABLE   010100   0114 =    276. bytes (SPACE_IRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0101A0   01A0  _bm_block_commit 
+      010128   0128  _FSCallback 
+      010130   0130  _iChangeDrive 
+      0101B0   01B0  _NF_nCE_disbaleN 
+      010188   0188  _nftl_write_sector 
+      0101A4   01A4  _bm_page_commit 
+      010114   0114  _storage_clr_busy 
+      010104   0104  _ClearFlashBusy 
+      010100   0100  _IP_JUMP_TABLE 
+      01012C   012C  _GetDateNTime 
+      0101AC   01AC  _NF_nCE_enbaleN 
+      010100   0100  _SetFlashBusy 
+      010198   0198  __NFt09_erase 
+      0101B4   01B4  _NF_unlock 
+      010110   0110  _storage_set_busy 
+      01010C   010C  _SD_delay 
+      010108   0108  _NFC_delay 
+      010190   0190  _bm_copy_map 
+      010124   0124  _isCWriteProtect 
+      0101A8   01A8  _bm_write_err_handle 
+      010120   0120  _ClearFileSystemBusy 
+      01019C   019C  _bm_copy_block 
+      01011C   011C  _SetFileSystemBusy 
+      010194   0194  _bm_bad_flush 
+      01018C   018C  _bm_map_set 
+      010118   0118  _nftl_ecc_jump 
+      010184   0184  _nftl_read_sector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+IP_IRAM_code   0144D4   0048 =     72. bytes (SPACE_IRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0144D4   44D4  _IP_INIT 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+SD_Read_Write   013654   00A2 =    162. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      013654   3654  _SD1_read_block 
+      01365A   365A  _SD2_read_block 
+      013660   3660  _SD1_write_block 
+      013666   3666  _SD2_write_block 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sd1_write_cache   01233E   010A =    266. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01233E   233E  _sd1_write_cache 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sd1_cache_flush   014A08   002A =     42. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014A08   4A08  _sd1_cache_flush 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sd1_cache_read   011ABA   0170 =    368. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011ABA   1ABA  _sd1_cache_read 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$sd1_cache_write   011EB2   0136 =    310. bytes (SDTL_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      011EB2   1EB2  _sd1_cache_write 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$sd1_buf   000768   0002 =      2. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000768   0768  _sd1_buf 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$sd1_num   000764   0002 =      2. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000764   0764  _sd1_num 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$sd1_rw   000762   0002 =      2. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000762   0762  _sd1_rw 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$sd1_cache_use   000766   0002 =      2. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      000766   0766  _sd1_cache_use 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_XRAM$RD$sd1_sector   0006D8   0004 =      4. bytes (SPACE_XRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0006D8   06D8  _sd1_sector 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$CommonLoadCode   014B5C   0020 =     32. bytes (SPACE_IRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014B5C   4B5C  _CommonLoadCode 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$reserved_Stack0   000000   0400 =   1024. bytes (SPACE_XRAM,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhereto_host_info_table   012552   010A =    266. bytes (SPACE_IRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      012558   2558  _FAT_TEMP_CODE00_size 
+      01255C   255C  _FAT_TEMP_CODE00_anchor 
+      012564   2564  _FAT_TEMP_CODE01_size 
+      012568   2568  _FAT_TEMP_CODE01_anchor 
+      0125D0   25D0  _FAT_TEMP_CODE10_size 
+      0125D4   25D4  _FAT_TEMP_CODE10_anchor 
+      012570   2570  _FAT_TEMP_CODE02_size 
+      012574   2574  _FAT_TEMP_CODE02_anchor 
+      0125DC   25DC  _FAT_TEMP_CODE11_size 
+      0125E0   25E0  _FAT_TEMP_CODE11_anchor 
+      01257C   257C  _FAT_TEMP_CODE03_size 
+      012580   2580  _FAT_TEMP_CODE03_anchor 
+      0125E8   25E8  _FAT_TEMP_CODE12_size 
+      0125EC   25EC  _FAT_TEMP_CODE12_anchor 
+      012588   2588  _FAT_TEMP_CODE04_size 
+      01258C   258C  _FAT_TEMP_CODE04_anchor 
+      0125F4   25F4  _FAT_TEMP_CODE13_size 
+      0125F8   25F8  _FAT_TEMP_CODE13_anchor 
+      012594   2594  _FAT_TEMP_CODE05_size 
+      012598   2598  _FAT_TEMP_CODE05_anchor 
+      012600   2600  _FAT_TEMP_CODE14_size 
+      012604   2604  _FAT_TEMP_CODE14_anchor 
+      0125A0   25A0  _FAT_TEMP_CODE06_size 
+      0125A4   25A4  _FAT_TEMP_CODE06_anchor 
+      01260C   260C  _FAT_TEMP_CODE15_size 
+      012610   2610  _FAT_TEMP_CODE15_anchor 
+      0125AC   25AC  _FAT_TEMP_CODE07_size 
+      0125B0   25B0  _FAT_TEMP_CODE07_anchor 
+      012618   2618  _FAT_TEMP_CODE16_size 
+      01261C   261C  _FAT_TEMP_CODE16_anchor 
+      0125B8   25B8  _FAT_TEMP_CODE08_size 
+      0125BC   25BC  _FAT_TEMP_CODE08_anchor 
+      012624   2624  _FAT_TEMP_CODE17_size 
+      012628   2628  _FAT_TEMP_CODE17_anchor 
+      0125C4   25C4  _FAT_TEMP_CODE09_size 
+      0125C8   25C8  _FAT_TEMP_CODE09_anchor 
+      012554   2554  _FAT_TEMP_CODE00_begin 
+      012560   2560  _FAT_TEMP_CODE01_begin 
+      0125CC   25CC  _FAT_TEMP_CODE10_begin 
+      01256C   256C  _FAT_TEMP_CODE02_begin 
+      0125D8   25D8  _FAT_TEMP_CODE11_begin 
+      012578   2578  _FAT_TEMP_CODE03_begin 
+      0125E4   25E4  _FAT_TEMP_CODE12_begin 
+      012584   2584  _FAT_TEMP_CODE04_begin 
+      0125F0   25F0  _FAT_TEMP_CODE13_begin 
+      012590   2590  _FAT_TEMP_CODE05_begin 
+      0125FC   25FC  _FAT_TEMP_CODE14_begin 
+      01259C   259C  _FAT_TEMP_CODE06_begin 
+      012608   2608  _FAT_TEMP_CODE15_begin 
+      0125A8   25A8  _FAT_TEMP_CODE07_begin 
+      012614   2614  _FAT_TEMP_CODE16_begin 
+      0125B4   25B4  _FAT_TEMP_CODE08_begin 
+      012620   2620  _FAT_TEMP_CODE17_begin 
+      0125C0   25C0  _FAT_TEMP_CODE09_begin 
+      012630   2630  _DAC_COMMON_CODE_size 
+      012634   2634  _DAC_COMMON_CODE_anchor 
+      01262C   262C  _DAC_COMMON_CODE_begin 
+      01263C   263C  _DAC_TEMP_CODE00_size 
+      012640   2640  _DAC_TEMP_CODE00_anchor 
+      012648   2648  _DAC_TEMP_CODE01_size 
+      01264C   264C  _DAC_TEMP_CODE01_anchor 
+      012654   2654  _DAC_TEMP_CODE02_size 
+      012658   2658  _DAC_TEMP_CODE02_anchor 
+      012638   2638  _DAC_TEMP_CODE00_begin 
+      012552   2552  _adhere_info_table 
+      012644   2644  _DAC_TEMP_CODE01_begin 
+      012650   2650  _DAC_TEMP_CODE02_begin 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE00   01C100   0030 =     48. bytes (FAT_TEMP_CODE00,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE01   01C100   0030 =     48. bytes (FAT_TEMP_CODE01,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE02   01C100   0030 =     48. bytes (FAT_TEMP_CODE02,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE03   01C100   0030 =     48. bytes (FAT_TEMP_CODE03,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE04   01C100   0030 =     48. bytes (FAT_TEMP_CODE04,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE05   01C100   0030 =     48. bytes (FAT_TEMP_CODE05,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE06   01C100   0030 =     48. bytes (FAT_TEMP_CODE06,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE07   01C100   0030 =     48. bytes (FAT_TEMP_CODE07,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE08   01C100   0030 =     48. bytes (FAT_TEMP_CODE08,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE09   01C100   0030 =     48. bytes (FAT_TEMP_CODE09,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE10   01C100   0030 =     48. bytes (FAT_TEMP_CODE10,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE11   01C100   0030 =     48. bytes (FAT_TEMP_CODE11,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE12   01C100   0030 =     48. bytes (FAT_TEMP_CODE12,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE13   01C100   0030 =     48. bytes (FAT_TEMP_CODE13,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE14   01C100   0030 =     48. bytes (FAT_TEMP_CODE14,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE15   01C100   0030 =     48. bytes (FAT_TEMP_CODE15,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE16   01C100   0030 =     48. bytes (FAT_TEMP_CODE16,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_FAT_TEMP_CODE17   01C100   0030 =     48. bytes (FAT_TEMP_CODE17,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_DAC_COMMON_CODE   01BC00   0030 =     48. bytes (DAC_COMMON_CODE,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_DAC_TEMP_CODE00   01B900   0030 =     48. bytes (DAC_TEMP_CODE00,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_DAC_TEMP_CODE01   01B900   0030 =     48. bytes (DAC_TEMP_CODE01,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$adhere_header_DAC_TEMP_CODE02   01B900   0030 =     48. bytes (DAC_TEMP_CODE02,ABS,CON)
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+USB_MS_CODE$__INIT$copy   0148B6   0036 =     54. bytes (USB_MS_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      0148B6   48B6  SDTL_CODE__INIT$copy 
+      0148B6   48B6  SPACE_IRAM__INIT$copy 
+      0148B6   48B6  UART_CODE__INIT$copy 
+      0148B6   48B6  DAC_COMMON_CODE_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  USBDET_CODE__INIT$copy 
+      0148B6   48B6  SYSTEM_TIMER3_INIT_CODE__INIT$copy 
+      0148B6   48B6  ADC_MAIN_CODE__INIT$copy 
+      0148B6   48B6  DAC_TEMP_CODE00_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  DAC_TEMP_CODE01_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  DAC_TEMP_CODE02_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  BATTERY_CODE__INIT$copy 
+      0148B6   48B6  USB_STORAGE_CODE__INIT$copy 
+      0148B6   48B6  LIBC__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE00_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE10_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE01_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  SYSTEM_CODE__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE11_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE02_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE12_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE03_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE13_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE04_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE14_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE05_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE15_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE06_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  USB_MS_CODE__INIT$copy 
+      0148B6   48B6  KBDMCC__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE16_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE07_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  SYSDRV_CODE__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE17_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE08_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  USB_STORAGE_IRAM__INIT$copy 
+      0148B6   48B6  FAT_TEMP_CODE09_ADHERE_INFO__INIT$copy 
+      0148B6   48B6  USB_CORE_CODE__INIT$copy 
+      0148B6   48B6  SPIF_CODE__INIT$copy 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C06A   0002 =      2. bytes (DAC_COMMON_CODE,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C06A   046A  _DAC_COMMON_CODE_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01BB36   0002 =      2. bytes (DAC_TEMP_CODE00,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01BB36   0236  _DAC_TEMP_CODE00_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01BBCE   0002 =      2. bytes (DAC_TEMP_CODE01,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01BBCE   02CE  _DAC_TEMP_CODE01_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01B930   0002 =      2. bytes (DAC_TEMP_CODE02,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01B930   0030  _DAC_TEMP_CODE02_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE00,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE00_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE01,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE01_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE02,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE02_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE03,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE03_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE04,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE04_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE05,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE05_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE06,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE06_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE07,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE07_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE08,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE08_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE09,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE09_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE10,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE10_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE11,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE11_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE12,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE12_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE13,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE13_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE14,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE14_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE15,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE15_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE16,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE16_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_SGV_INIT_CODE   01C130   0002 =      2. bytes (FAT_TEMP_CODE17,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      01C130   0030  _FAT_TEMP_CODE17_CInitFun 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$_boost   014B7C   0020 =     32. bytes (SPACE_IRAM,REL,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      014B7C   4B7C  __$$boost 
+
+Area                                Addr   Size   Decimal Bytes (Attributes)
+-------------------------------   ------   ----   ------- ----- ------------
+_$$linker_generated$$_entry   010000   0004 =      4. bytes (SPACE_IRAM,ABS,CON)
+
+      Phy.    Value  Global
+      ------  -----  --------------------------------
+      010000   0000  _main_entry 
+
+Files Linked      [    module(s)    ]
+
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\com.obj  [          com.asm ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\ADC.obj  [          ADC.asm ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\GlobalVariable.obj  [ GlobalVariable.a ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\SYSTEM.obj  [       SYSTEM.asm ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage.obj  [ USB_MassStorage. ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_SD1.obj  [ USB_MassStorage_ ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_SD2.obj  [ USB_MassStorage_ ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_SPIF.obj  [ USB_MassStorage_ ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_UGP.obj  [ USB_MassStorage_ ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_config.obj  [ USB_MassStorage_ ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\usb_desc_template.obj  [ usb_desc_templat ]
+C:\Program Files\ImagoSemi\ImagoBuilder\bin\multi_debug.obj  [  multi_debug.asm ]
+C:\Program Files\ImagoSemi\ImagoBuilder\lib\SPIBOOT_KBDM9 v1.06\crt0.obj  [         crt0.asm ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\linker_generated_routines.obj  [ linker_generated ]
+E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\linker_generated_symbol.obj  [ linker_generated ]
+
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\com.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$com_c$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                      57  
+                      58  .area _$UART_Init(UART_CODE,REL) 
+B 00 02
014B3A                 60  _UART_Init:: 
014B3A  2E 00          62  	LINK #0 
014B3C  58 F1          63  	PUSH R1 
014B3E                 65  L30: 
014B3E                 67  L31: 
014B3E                 69  L32: 
014B3E  48 12          70  	MOV R1,#2 
014B40  AA F1 F2 12    71  	MOVX _UARBR,R1 
014B44                 73  L33: 
014B44  68 F1 80 01    74  	MOV R1,#0x8001 
014B48  AA F1 F2 0A    75  	MOVX _UARCR,R1 
014B4C                 77  L34: 
014B4C  68 F1 00 10    78  	MOV R1,#16 
014B50  3F 10          79  	IGNDS #1 
014B52  B5 F1 F1 84    80  	OR _PBEN,R1 
014B56                 82  L35: 
014B56                 84  L36: 
014B56                 85  L29: 
014B56  38 1F          86  	POP R1 
014B58                 87  	UNLINK_MACRO
014B58  2F 00          87  UNLINK 
+                      87  
014B5A                 88  .if KERNEL1_5 = 1
+                      89  	CRIT #1
+                      90  .endif
014B5A  C6 20          91  	RETS 
+                      93  
+                      94  .area _$SendByte(UART_CODE,REL) 
+B 00 03
0149DC                 95  _SendByte:: 
0149DC  2E 00          98  	LINK #0 
0149DE  58 F1          99  	PUSH R1 
0149E0                101  L41: 
0149E0                103  L42: 
0149E0  78 1B 00 06   104  	MOV R1,[FP+#(6)] 
0149E4  6B 3B 00 06   105  	MOVB [FP+#(6)],Rb3 
0149E8                107  L43: 
0149E8  79 3B 00 06   108  	MOVB Rb3,[FP+#(6)] 
0149EC  19 13         109  	MOVZE R1,Rb3 
0149EE  AA F1 F2 0E   110  	MOVX _UARTDR,R1 
0149F2                112  L44: 
+                     113  
0149F2  C7 00         114  			NOP 
0149F4  C7 00         115  			NOP 
+                     116  		
0149F6                118  L45: 
0149F6                119  L38: 
0149F6                121  L46: 
0149F6                122  L39: 
0149F6                124  L47: 
0149F6  BA F1 F2 0C   125  	MOVX R1,_UARSR 
0149FA  54 11         126  	AND R1,#1 
0149FC  56 10         127  	CMP R1,#0 
0149FE  AC 01 49 F6   128  	AJMP IF_EQ,L38 
014A02                130  L48: 
014A02                132  L49: 
014A02                133  L37: 
014A02  38 1F         134  	POP R1 
014A04                135  	UNLINK_MACRO
014A04  2F 00         135  UNLINK 
+                     135  
014A06                136  .if KERNEL1_5 = 1
+                     137  	CRIT #1
+                     138  .endif
014A06  C6 20         139  	RETS 
+                     141  
+                     142  .area _$SendString(UART_CODE,REL) 
+B 00 04
013CF4                143  _SendString:: 
013CF4  2E 00         147  	LINK #0 
013CF6  58 F0         148  	PUSH R0 
013CF8  58 F1         149  	PUSH R1 
013CFA  58 F2         150  	PUSH R2 
013CFC  58 F3         151  	PUSH R3 
013CFE                153  L54: 
013CFE                155  L55: 
013CFE                157  L56: 
013CFE  AC 00 3D 32   158  	AJMP #0,L52 
013D02                159  L51: 
013D02                161  L57: 
013D02                163  L58: 
013D02                165  L59: 
013D02                166  	LOAD4$stack R0
013D02  78 0B 00 06   166  MOV R0,[FP+#(6)] 
013D06  78 1B 00 08   166  MOV R1,[FP+#(6+2)] 
+                     166  
013D0A                167  	MOVDR R2
013D0A                167  .if R2=R0
+                     167  .else
013D0A  08 20         167  MOV R2,R0 
+                     167  .endif
013D0C                167  .if R3=R1
+                     167  .else
013D0C  08 31         167  MOV R3,R1 
+                     167  .endif
+                     167  
013D0E  50 31         168  	ADD R3,#1 
013D10  51 20         169  	ADDC R2,#0 
013D12                170  	SAVE4$stack 6
013D12  6A 2B 00 06   170  MOV [FP+#(6)],R2 
013D16  6A 3B 00 08   170  MOV [FP+#(6+2)],R3 
+                     170  
013D1A                171  	LOAD1$indirect Rb1
013D1A  4C 11         171  SL R1,#1 
013D1C  5C 01         171  SLOSB R0,#1 
013D1E  BA 10 F2 E0   171  MOVX DS0, R0 
013D22  4D 11         171  SR R1,#1 
013D24  29 11         171  MOVB Rb1,[R1] 
+                     171  
013D26  18 01         172  	MOVSE R0,Rb1 
013D28  19 01         173  	MOVZE R0,Rb1 
013D2A  58 F0         174  	PUSH R0 
013D2C                175  .if KERNEL1_5 = 1
+                     176  	CRIT #1
+                     177  .endif
013D2C  BD 01 49 DC   178  	SCALL _SendByte 
013D30  50 F2         179  	ADD SP,#2 
013D32                181  L60: 
013D32                183  L61: 
013D32                184  L52: 
013D32                186  L62: 
013D32                187  	LOAD4$stack R0
013D32  78 0B 00 06   187  MOV R0,[FP+#(6)] 
013D36  78 1B 00 08   187  MOV R1,[FP+#(6+2)] 
+                     187  
013D3A                188  	LOAD1$indirect Rb1
013D3A  4C 11         188  SL R1,#1 
013D3C  5C 01         188  SLOSB R0,#1 
013D3E  BA 10 F2 E0   188  MOVX DS0, R0 
013D42  4D 11         188  SR R1,#1 
013D44  29 11         188  MOVB Rb1,[R1] 
+                     188  
013D46  18 01         189  	MOVSE R0,Rb1 
013D48  56 00         190  	CMP R0,#0 
013D4A  AC 02 3D 02   191  	AJMP IF_NE,L51 
013D4E                193  L63: 
013D4E                195  L64: 
013D4E                196  L50: 
013D4E  38 3F         197  	POP R3 
013D50  38 2F         198  	POP R2 
013D52  38 1F         199  	POP R1 
013D54  38 0F         200  	POP R0 
013D56                201  	UNLINK_MACRO
013D56  2F 00         201  UNLINK 
+                     201  
013D58                202  .if KERNEL1_5 = 1
+                     203  	CRIT #1
+                     204  .endif
013D58  C6 20         205  	RETS 
+                     207  
+                     208  .area _$send_hex_byte(UART_CODE,REL) 
+B 00 05
0143A2                209  _send_hex_byte:: 
0143A2  2E 00         212  	LINK #0 
0143A4  58 F0         213  	PUSH R0 
0143A6                215  L66: 
0143A6                217  L67: 
0143A6  78 0B 00 06   218  	MOV R0,[FP+#(6)] 
0143AA  6B 1B 00 06   219  	MOVB [FP+#(6)],Rb1 
0143AE                221  L68: 
0143AE  79 1B 00 06   222  	MOVB Rb1,[FP+#(6)] 
0143B2  19 01         223  	MOVZE R0,Rb1 
0143B4  74 F0 00 F0   224  	AND R0,#240 
0143B8  4B 04         225  	ASR R0,#4 
0143BA  19 01         226  	MOVZE R0,Rb1 
0143BC  58 F0         227  	PUSH R0 
0143BE                228  .if KERNEL1_5 = 1
+                     229  	CRIT #1
+                     230  .endif
0143BE  BD 01 48 7E   231  	SCALL _conv 
0143C2  50 F2         232  	ADD SP,#2 
0143C4  19 01         233  	MOVZE R0,Rb1 
0143C6  58 F0         234  	PUSH R0 
0143C8                235  .if KERNEL1_5 = 1
+                     236  	CRIT #1
+                     237  .endif
0143C8  BD 01 49 DC   238  	SCALL _SendByte 
0143CC  50 F2         239  	ADD SP,#2 
0143CE                241  L69: 
0143CE  79 1B 00 06   242  	MOVB Rb1,[FP+#(6)] 
0143D2  19 01         243  	MOVZE R0,Rb1 
0143D4  54 0F         244  	AND R0,#15 
0143D6  19 01         245  	MOVZE R0,Rb1 
0143D8  58 F0         246  	PUSH R0 
0143DA                247  .if KERNEL1_5 = 1
+                     248  	CRIT #1
+                     249  .endif
0143DA  BD 01 48 7E   250  	SCALL _conv 
0143DE  50 F2         251  	ADD SP,#2 
0143E0  19 01         252  	MOVZE R0,Rb1 
0143E2  58 F0         253  	PUSH R0 
0143E4                254  .if KERNEL1_5 = 1
+                     255  	CRIT #1
+                     256  .endif
0143E4  BD 01 49 DC   257  	SCALL _SendByte 
0143E8  50 F2         258  	ADD SP,#2 
0143EA                260  L70: 
0143EA                262  L71: 
0143EA                263  L65: 
0143EA  38 0F         264  	POP R0 
0143EC                265  	UNLINK_MACRO
0143EC  2F 00         265  UNLINK 
+                     265  
0143EE                266  .if KERNEL1_5 = 1
+                     267  	CRIT #1
+                     268  .endif
0143EE  C6 20         269  	RETS 
+                     271  
+                     272  .area _$send_hex_u8(UART_CODE,REL) 
+B 00 06
014846                273  _send_hex_u8:: 
014846  2E 00         276  	LINK #0 
014848  58 F0         277  	PUSH R0 
01484A                279  L73: 
01484A                281  L74: 
01484A  78 0B 00 06   282  	MOV R0,[FP+#(6)] 
01484E  6B 1B 00 06   283  	MOVB [FP+#(6)],Rb1 
014852                285  L75: 
014852  68 F0 00 30   286  	MOV R0,#48 
014856  58 F0         287  	PUSH R0 
014858                288  .if KERNEL1_5 = 1
+                     289  	CRIT #1
+                     290  .endif
014858  BD 01 49 DC   291  	SCALL _SendByte 
01485C  50 F2         292  	ADD SP,#2 
01485E                294  L76: 
01485E  68 F0 00 78   295  	MOV R0,#120 
014862  58 F0         296  	PUSH R0 
014864                297  .if KERNEL1_5 = 1
+                     298  	CRIT #1
+                     299  .endif
014864  BD 01 49 DC   300  	SCALL _SendByte 
014868  50 F2         301  	ADD SP,#2 
01486A                303  L77: 
01486A  79 1B 00 06   304  	MOVB Rb1,[FP+#(6)] 
01486E  19 01         305  	MOVZE R0,Rb1 
014870  58 F0         306  	PUSH R0 
014872                307  .if KERNEL1_5 = 1
+                     308  	CRIT #1
+                     309  .endif
014872  BD 01 43 A2   310  	SCALL _send_hex_byte 
014876  50 F2         311  	ADD SP,#2 
014878                313  L78: 
014878                315  L79: 
014878                316  L72: 
014878  38 0F         317  	POP R0 
01487A                318  	UNLINK_MACRO
01487A  2F 00         318  UNLINK 
+                     318  
01487C                319  .if KERNEL1_5 = 1
+                     320  	CRIT #1
+                     321  .endif
01487C  C6 20         322  	RETS 
+                     324  
+                     325  .area _$send_hex_u16(UART_CODE,REL) 
+B 00 07
01462C                326  _send_hex_u16:: 
01462C  2E 00         329  	LINK #0 
01462E  58 F0         330  	PUSH R0 
014630                332  L81: 
014630                334  L82: 
014630                336  L83: 
014630  68 F0 00 30   337  	MOV R0,#48 
014634  58 F0         338  	PUSH R0 
014636                339  .if KERNEL1_5 = 1
+                     340  	CRIT #1
+                     341  .endif
014636  BD 01 49 DC   342  	SCALL _SendByte 
01463A  50 F2         343  	ADD SP,#2 
01463C                345  L84: 
01463C  68 F0 00 78   346  	MOV R0,#120 
014640  58 F0         347  	PUSH R0 
014642                348  .if KERNEL1_5 = 1
+                     349  	CRIT #1
+                     350  .endif
014642  BD 01 49 DC   351  	SCALL _SendByte 
014646  50 F2         352  	ADD SP,#2 
014648                354  L85: 
014648  78 0B 00 06   355  	MOV R0,[FP+#(6)] 
01464C  4D 08         356  	SR R0,#8 
01464E  19 01         357  	MOVZE R0,Rb1 
014650  58 F0         358  	PUSH R0 
014652                359  .if KERNEL1_5 = 1
+                     360  	CRIT #1
+                     361  .endif
014652  BD 01 43 A2   362  	SCALL _send_hex_byte 
014656  50 F2         363  	ADD SP,#2 
014658                365  L86: 
014658  78 0B 00 06   366  	MOV R0,[FP+#(6)] 
01465C  19 01         367  	MOVZE R0,Rb1 
01465E  58 F0         368  	PUSH R0 
014660                369  .if KERNEL1_5 = 1
+                     370  	CRIT #1
+                     371  .endif
014660  BD 01 43 A2   372  	SCALL _send_hex_byte 
014664  50 F2         373  	ADD SP,#2 
014666                375  L87: 
014666                377  L88: 
014666                378  L80: 
014666  38 0F         379  	POP R0 
014668                380  	UNLINK_MACRO
014668  2F 00         380  UNLINK 
+                     380  
01466A                381  .if KERNEL1_5 = 1
+                     382  	CRIT #1
+                     383  .endif
01466A  C6 20         384  	RETS 
+                     386  
+                     387  .area _$send_hex_u32(UART_CODE,REL) 
+B 00 08
013926                388  _send_hex_u32:: 
013926  2E 00         391  	LINK #0 
013928  58 F0         392  	PUSH R0 
01392A  58 F1         393  	PUSH R1 
01392C                395  L90: 
01392C                397  L91: 
01392C                399  L92: 
01392C  68 F0 00 30   400  	MOV R0,#48 
013930  58 F0         401  	PUSH R0 
013932                402  .if KERNEL1_5 = 1
+                     403  	CRIT #1
+                     404  .endif
013932  BD 01 49 DC   405  	SCALL _SendByte 
013936  50 F2         406  	ADD SP,#2 
013938                408  L93: 
013938  68 F0 00 78   409  	MOV R0,#120 
01393C  58 F0         410  	PUSH R0 
01393E                411  .if KERNEL1_5 = 1
+                     412  	CRIT #1
+                     413  .endif
01393E  BD 01 49 DC   414  	SCALL _SendByte 
013942  50 F2         415  	ADD SP,#2 
013944                417  L94: 
013944                418  	LOAD4$stack R0
013944  78 0B 00 06   418  MOV R0,[FP+#(6)] 
013948  78 1B 00 08   418  MOV R1,[FP+#(6+2)] 
+                     418  
01394C  08 10         419  	MOV R1,R0 
01394E  48 00         420  	MOV R0,#0 
013950  4D 18         421  	SR R1,#(24-16) 
013952  09 13         422  	MOVB Rb1,Rb3 
013954  19 01         423  	MOVZE R0,Rb1 
013956  58 F0         424  	PUSH R0 
013958                425  .if KERNEL1_5 = 1
+                     426  	CRIT #1
+                     427  .endif
013958  BD 01 43 A2   428  	SCALL _send_hex_byte 
01395C  50 F2         429  	ADD SP,#2 
01395E                431  L95: 
01395E                432  	LOAD4$stack R0
01395E  78 0B 00 06   432  MOV R0,[FP+#(6)] 
013962  78 1B 00 08   432  MOV R1,[FP+#(6+2)] 
+                     432  
013966  08 10         433  	MOV R1,R0 
013968  48 00         434  	MOV R0,#0 
01396A  09 13         435  	MOVB Rb1,Rb3 
01396C  19 01         436  	MOVZE R0,Rb1 
01396E  58 F0         437  	PUSH R0 
013970                438  .if KERNEL1_5 = 1
+                     439  	CRIT #1
+                     440  .endif
013970  BD 01 43 A2   441  	SCALL _send_hex_byte 
013974  50 F2         442  	ADD SP,#2 
013976                444  L96: 
013976                445  	LOAD4$stack R0
013976  78 0B 00 06   445  MOV R0,[FP+#(6)] 
01397A  78 1B 00 08   445  MOV R1,[FP+#(6+2)] 
+                     445  
01397E  4D 08         446  	SR R0,#8 
013980  5D 18         447  	SROSB R1,#8 
013982  09 13         448  	MOVB Rb1,Rb3 
013984  19 01         449  	MOVZE R0,Rb1 
013986  58 F0         450  	PUSH R0 
013988                451  .if KERNEL1_5 = 1
+                     452  	CRIT #1
+                     453  .endif
013988  BD 01 43 A2   454  	SCALL _send_hex_byte 
01398C  50 F2         455  	ADD SP,#2 
01398E                457  L97: 
01398E                458  	LOAD4$stack R0
01398E  78 0B 00 06   458  MOV R0,[FP+#(6)] 
013992  78 1B 00 08   458  MOV R1,[FP+#(6+2)] 
+                     458  
013996  09 13         459  	MOVB Rb1,Rb3 
013998  19 01         460  	MOVZE R0,Rb1 
01399A  58 F0         461  	PUSH R0 
01399C                462  .if KERNEL1_5 = 1
+                     463  	CRIT #1
+                     464  .endif
01399C  BD 01 43 A2   465  	SCALL _send_hex_byte 
0139A0  50 F2         466  	ADD SP,#2 
0139A2                468  L98: 
0139A2                470  L99: 
0139A2                471  L89: 
0139A2  38 1F         472  	POP R1 
0139A4  38 0F         473  	POP R0 
0139A6                474  	UNLINK_MACRO
0139A6  2F 00         474  UNLINK 
+                     474  
0139A8                475  .if KERNEL1_5 = 1
+                     476  	CRIT #1
+                     477  .endif
0139A8  C6 20         478  	RETS 
+                     480  
+                     481  .area _$conv(UART_CODE,REL) 
+B 00 09
01487E                482  _conv:: 
01487E  2E 00         485  	LINK #0 
014880                487  L103: 
014880                489  L104: 
014880  78 0B 00 06   490  	MOV R0,[FP+#(6)] 
014884  6B 1B 00 06   491  	MOVB [FP+#(6)],Rb1 
014888                493  L105: 
014888  79 1B 00 06   494  	MOVB Rb1,[FP+#(6)] 
01488C  19 01         495  	MOVZE R0,Rb1 
01488E  56 0A         496  	CMP R0,#10 
014890  AC 0E 48 A4   497  	AJMP IF_SGE,L101 
014894                499  L106: 
014894                501  L107: 
014894                503  L108: 
014894  79 1B 00 06   504  	MOVB Rb1,[FP+#(6)] 
014898  19 01         505  	MOVZE R0,Rb1 
01489A  70 F0 00 30   506  	ADD R0,#48 
01489E  19 01         507  	MOVZE R0,Rb1 
0148A0  AC 00 48 B2   508  	AJMP #0,L100 
0148A4                510  L109: 
0148A4                512  L110: 
0148A4                513  L101: 
0148A4                515  L111: 
0148A4                517  L112: 
0148A4                519  L113: 
0148A4  79 1B 00 06   520  	MOVB Rb1,[FP+#(6)] 
0148A8  19 01         521  	MOVZE R0,Rb1 
0148AA  52 0A         522  	SUB R0,#10 
0148AC  70 F0 00 61   523  	ADD R0,#97 
0148B0  19 01         524  	MOVZE R0,Rb1 
0148B2                526  L114: 
0148B2                528  L115: 
0148B2                530  L116: 
0148B2                532  L117: 
0148B2                533  L100: 
0148B2                534  	UNLINK_MACRO
0148B2  2F 00         534  UNLINK 
+                     534  
0148B4                535  .if KERNEL1_5 = 1
+                     536  	CRIT #1
+                     537  .endif
0148B4  C6 20         538  	RETS 
+                     711  
+                     712  .area _$com_c$(ROM,REL) 
+B 00 01
030000                714  Letext: 
+                     715  
+                     716  
+                     717  
+                     718  
+                     719  
+                     720  
+                     721  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+  9 L100  000034 R
+  9 L101  000026 R
+  9 L103  000002 R
+  9 L104  000002 R
+  9 L105  00000A R
+  9 L106  000016 R
+  9 L107  000016 R
+  9 L108  000016 R
+  9 L109  000026 R
+  9 L110  000026 R
+  9 L111  000026 R
+  9 L112  000026 R
+  9 L113  000026 R
+  9 L114  000034 R
+  9 L115  000034 R
+  9 L116  000034 R
+  9 L117  000034 R
+  2 L29  00001C R
+  2 L30  000004 R
+  2 L31  000004 R
+  2 L32  000004 R
+  2 L33  00000A R
+  2 L34  000012 R
+  2 L35  00001C R
+  2 L36  00001C R
+  3 L37  000026 R
+  3 L38  00001A R
+  3 L39  00001A R
+  3 L41  000004 R
+  3 L42  000004 R
+  3 L43  00000C R
+  3 L44  000016 R
+  3 L45  00001A R
+  3 L46  00001A R
+  3 L47  00001A R
+  3 L48  000026 R
+  3 L49  000026 R
+  4 L50  00005A R
+  4 L51  00000E R
+  4 L52  00003E R
+  4 L54  00000A R
+  4 L55  00000A R
+  4 L56  00000A R
+  4 L57  00000E R
+  4 L58  00000E R
+  4 L59  00000E R
+  4 L60  00003E R
+  4 L61  00003E R
+  4 L62  00003E R
+  4 L63  00005A R
+  4 L64  00005A R
+  5 L65  000048 R
+  5 L66  000004 R
+  5 L67  000004 R
+  5 L68  00000C R
+  5 L69  00002C R
+  5 L70  000048 R
+  5 L71  000048 R
+  6 L72  000032 R
+  6 L73  000004 R
+  6 L74  000004 R
+  6 L75  00000C R
+  6 L76  000018 R
+  6 L77  000024 R
+  6 L78  000032 R
+  6 L79  000032 R
+  7 L80  00003A R
+  7 L81  000004 R
+  7 L82  000004 R
+  7 L83  000004 R
+  7 L84  000010 R
+  7 L85  00001C R
+  7 L86  00002C R
+  7 L87  00003A R
+  7 L88  00003A R
+  8 L89  00007C R
+  8 L90  000006 R
+  8 L91  000006 R
+  8 L92  000006 R
+  8 L93  000012 R
+  8 L94  00001E R
+  8 L95  000038 R
+  8 L96  000050 R
+  8 L97  000068 R
+  8 L98  00007C R
+  8 L99  00007C R
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+    _PBEN  ****** GX
+  3 _SendByte  000000 GR
+  4 _SendString  000000 GR
+    _UARBR  ****** GX
+    _UARCR  ****** GX
+    _UARSR  ****** GX
+    _UARTDR  ****** GX
+  2 _UART_Init  000000 GR
+  9 _conv  000000 GR
+  5 _send_hex_byte  000000 GR
+  7 _send_hex_u16  000000 GR
+  8 _send_hex_u32  000000 GR
+  6 _send_hex_u8  000000 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$com_c$ size    0   flags 0
+   2 _$UART_Init size   22   flags 0
+   3 _$SendByte size   2C   flags 0
+   4 _$SendString size   66   flags 0
+   5 _$send_hex_byte size   4E   flags 0
+   6 _$send_hex_u8 size   38   flags 0
+   7 _$send_hex_u16 size   40   flags 0
+   8 _$send_hex_u32 size   84   flags 0
+   9 _$conv size   38   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\ADC.asl          ###                          
+###########################################################
+                       1 .area _ADC_MAIN_DATA_(ADC_MAIN_DATA)
+                       2 .even
+B 00 01
00075C                  3 ADC_BusyFlag:
00075C                  4 	.ds 2
00075E                  5 ADC_last_channel:
00075E                  6 	.ds 2
+                       7 	
+                       8 .area _ADC_MAIN_CODE_(ADC_MAIN_CODE)
+B 00 02
013DBE                  9 _ADC_init::
013DBE  58 F0          10 	PUSH R0
013DC0  48 00          11 	MOV	R0,#0
013DC2  AA F0 07 5C    12 	MOVX ADC_BusyFlag,R0
013DC6  68 F0 FF FF    13 	MOV	R0,#0xFFFF
013DCA  AA F0 07 5E    14 	MOVX ADC_last_channel,R0
013DCE  38 0F          15 	POP R0
013DD0  C6 20          16 	RETS
+                      17 	
013DD2                 18 _Get_ADCValue::
013DD2  2E 01          19 	LINK #1
013DD4  58 F1          20 	PUSH R1
+                      21 		
013DD6  BA F0 07 5C    22     MOVX R0,ADC_BusyFlag
013DDA  56 00          23     CMP R0,#0
013DDC  AC 02 3E 1A    24     AJMP IF_NE,$IsBusy
013DE0  68 F0 FF FF    25     MOV	R0,#(-1)
013DE4  AA F0 07 5C    26     MOVX ADC_BusyFlag,R0
+                      27 
013DE8  78 0B 00 06    28 	MOV R0,[FP+#(6)]		;Cnt = Chx
013DEC  54 07          29 	AND R0,#7
013DEE  4C 03          30 	SL R0,#3
013DF0  75 F0 80 00    31 	OR R0,#0x8000
013DF4  BA B8 F2 E0    32 	MOVX ADCCON,R0
+                      33 
013DF8  48 00          34 	MOV R0,#0
+                      35 $LOOP:
013DFA  E0 B8          36 	BSET ADCCON.0
+                      37 $WAIT_KICKOFF:
013DFC  9A B8 00 FE    38 	JB	ADCCON.0, $WAIT_KICKOFF			
013E00  4F 0A          39 	CMPI1 R0,#10
013E02  AC 05 3D FA    40 	AJMP IF_UL,$LOOP
+                      41 
013E06  48 00          42 	MOV R0,#0
+                      43 $LOOP2:
013E08  4F 0A          44 	CMPI1 R0,#10
013E0A  AC 05 3E 08    45 	AJMP IF_UL,$LOOP2
+                      46 
013E0E  BA F0 F2 72    47 	MOVX R0,ADCD
013E12  4D 06          48 	SR R0,#6
013E14  48 10          49     MOV	R1,#0
013E16  AA F1 07 5C    50     MOVX ADC_BusyFlag,R1
+                      51 $IsBusy:
013E1A  38 1F          52 	POP R1
013E1C  2F 00          53 	UNLINK	
013E1E  C6 20          54 	RETS	
+
+Symbol Table
+
+  1 ADC_BusyFlag  000000 R
+  1 ADC_last_channel  000002 R
+    SPIBOOT_KBDM9 v1.06  000001 
+  2 _ADC_init  000000 GR
+  2 _Get_ADCValue  000014 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _ADC_MAIN_DATA_ size    4   flags 0
+   2 _ADC_MAIN_CODE_ size   62   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\GlobalVariable.asl          ###                          
+###########################################################
+                       1 ; Generated by KBCC
+                       5 
+                       6 .area _$GlobalVariable_c$(ROM,REL)
+B 00 01
030000                  7 Ltext0:
+                      41 .include "kbccmacro.asm"
030000                 97 Letext:
+                      98 
+                      99 .area _XRAM$AD$remote_index_tab(XRAM,ABS,dat)
+                     100 .org 0x6f70
+                     101 .even
+B 00 02
006F70                102 _remote_index_tab::
006F70                103 	.ds 128
+                     106 
+                     107 .area _XRAM$AD$g_paster_dir(XRAM,ABS,dat)
+                     108 .org 0x6da6
+                     109 .even
+B 00 03
006DA6                110 _g_paster_dir::
006DA6                111 	.ds 60
+                     114 
+                     115 .area _XRAM$AD$g_string2(XRAM,ABS,dat)
+                     116 .org 0x6f34
+                     117 .even
+B 00 04
006F34                118 _g_string2::
006F34                119 	.ds 60
+                     121 
+                     122 .area _XRAM$AD$rev_int_2(XRAM,ABS,dat)
+                     123 .org 0x6ffe
+                     124 .even
+B 00 05
006FFE                125 _rev_int_2::
006FFE                126 	.ds 2
+                     128 
+                     129 .area _XRAM$AD$rev_int_1(XRAM,ABS,dat)
+                     130 .org 0x6ffc
+                     131 .even
+B 00 06
006FFC                132 _rev_int_1::
006FFC                133 	.ds 2
+                     135 
+                     136 .area _XRAM$AD$t01_calib_data3(XRAM,ABS,dat)
+                     137 .org 0x6f30
+                     138 .even
+B 00 07
006F30                139 _t01_calib_data3::
006F30                140 	.ds 2
+                     142 
+                     143 .area _XRAM$AD$t01_calib_data2(XRAM,ABS,dat)
+                     144 .org 0x6f14
+                     145 .even
+B 00 08
006F14                146 _t01_calib_data2::
006F14                147 	.ds 4
+                     149 
+                     150 .area _XRAM$AD$t01_calib_data1(XRAM,ABS,dat)
+                     151 .org 0x6f10
+                     152 .even
+B 00 09
006F10                153 _t01_calib_data1::
006F10                154 	.ds 4
+                     156 
+                     157 .area _XRAM$AD$adc7_value(XRAM,ABS,dat)
+                     158 .org 0x6ffa
+                     159 .even
+B 00 0A
006FFA                160 _adc7_value::
006FFA                161 	.ds 2
+                     163 
+                     164 .area _XRAM$AD$adc3_value(XRAM,ABS,dat)
+                     165 .org 0x6ff8
+                     166 .even
+B 00 0B
006FF8                167 _adc3_value::
006FF8                168 	.ds 2
+                     170 
+                     171 .area _XRAM$AD$adc2_value(XRAM,ABS,dat)
+                     172 .org 0x6ff6
+                     173 .even
+B 00 0C
006FF6                174 _adc2_value::
006FF6                175 	.ds 2
+                     177 
+                     178 .area _XRAM$AD$adc0_value(XRAM,ABS,dat)
+                     179 .org 0x6ff4
+                     180 .even
+B 00 0D
006FF4                181 _adc0_value::
006FF4                182 	.ds 2
+                     184 
+                     185 .area _XRAM$AD$prev_task(XRAM,ABS,dat)
+                     186 .org 0x6f32
+                     187 .even
+B 00 0E
006F32                188 _prev_task::
006F32                189 	.ds 2
+                     191 
+                     192 .area _XRAM$AD$all_mp3_num(XRAM,ABS,dat)
+                     193 .org 0x6f02
+                     194 .even
+B 00 0F
006F02                195 _all_mp3_num::
006F02                196 	.ds 2
+                     198 
+                     199 .area _XRAM$AD$current_area(XRAM,ABS,dat)
+                     200 .org 0x6f08
+                     201 .even
+B 00 10
006F08                202 _current_area::
006F08                203 	.ds 2
+                     205 
+                     206 .area _XRAM$AD$current_playmp3_number(XRAM,ABS,dat)
+                     207 .org 0x6f0a
+                     208 .even
+B 00 11
006F0A                209 _current_playmp3_number::
006F0A                210 	.ds 2
+                     212 
+                     213 .area _XRAM$AD$current_wav_num(XRAM,ABS,dat)
+                     214 .org 0x6ff2
+                     215 .even
+B 00 12
006FF2                216 _current_wav_num::
006FF2                217 	.ds 2
+                     219 
+                     220 .area _XRAM$AD$wav_action(XRAM,ABS,dat)
+                     221 .org 0x6ff0
+                     222 .even
+B 00 13
006FF0                223 _wav_action::
006FF0                224 	.ds 2
+                     226 
+                     227 .area _XRAM$AD$bak_current_index(XRAM,ABS,dat)
+                     228 .org 0x6f2a
+                     229 .even
+B 00 14
006F2A                230 _bak_current_index::
006F2A                231 	.ds 2
+                     233 
+                     234 .area _XRAM$AD$volume_inc_flag(XRAM,ABS,dat)
+                     235 .org 0x6f28
+                     236 .even
+B 00 15
006F28                237 _volume_inc_flag::
006F28                238 	.ds 2
+                     240 
+                     241 .area _XRAM$AD$current_mp3_sd(XRAM,ABS,dat)
+                     242 .org 0x6f06
+                     243 .even
+B 00 16
006F06                244 _current_mp3_sd::
006F06                245 	.ds 2
+                     247 
+                     248 .area _XRAM$AD$sd2_ap3_number(XRAM,ABS,dat)
+                     249 .org 0x6f0c
+                     250 .even
+B 00 17
006F0C                251 _sd2_ap3_number::
006F0C                252 	.ds 2
+                     254 
+                     255 .area _XRAM$AD$current_sd(XRAM,ABS,dat)
+                     256 .org 0x6f0e
+                     257 .even
+B 00 18
006F0E                258 _current_sd::
006F0E                259 	.ds 2
+                     261 
+                     262 .area _XRAM$AD$ap4_mp3_flag(XRAM,ABS,dat)
+                     263 .org 0x6f1e
+                     264 .even
+B 00 19
006F1E                265 _ap4_mp3_flag::
006F1E                266 	.ds 2
+                     268 
+                     269 .area _XRAM$AD$ap3_file_number(XRAM,ABS,dat)
+                     270 .org 0x6f1c
+                     271 .even
+B 00 1A
006F1C                272 _ap3_file_number::
006F1C                273 	.ds 2
+                     275 
+                     276 .area _XRAM$AD$vol_idx(XRAM,ABS,dat)
+                     277 .org 0x6f1a
+                     278 .even
+B 00 1B
006F1A                279 _vol_idx::
006F1A                280 	.ds 2
+                     282 
+                     283 .area _XRAM$AD$rev1Flag(XRAM,ABS,dat)
+                     284 .org 0x6f2e
+                     285 .even
+B 00 1C
006F2E                286 _rev1Flag::
006F2E                287 	.ds 2
+                     289 
+                     290 .area _XRAM$AD$sys_flag(XRAM,ABS,dat)
+                     291 .org 0x6f04
+                     292 .even
+B 00 1D
006F04                293 _sys_flag::
006F04                294 	.ds 2
+                     296 
+                     297 .area _XRAM$AD$systerm_flag(XRAM,ABS,dat)
+                     298 .org 0x6f2c
+                     299 .even
+B 00 1E
006F2C                300 _systerm_flag::
006F2C                301 	.ds 2
+                     303 
+                     304 .area _XRAM$AD$gflag(XRAM,ABS,dat)
+                     305 .org 0x6f18
+                     306 .even
+B 00 1F
006F18                307 _gflag::
006F18                308 	.ds 2
+                     310 
+                     311 .area _XRAM$AD$cluster_buf(XRAM,ABS,dat)
+                     312 .org 0x6de2
+                     313 .even
+B 00 20
006DE2                314 _cluster_buf::
006DE2                315 	.ds 288
+                     318 
+                     319 .area _XRAM$AD$Current_Record(XRAM,ABS,dat)
+                     320 .org 0x6f20
+                     321 .even
+B 00 21
006F20                322 _Current_Record::
006F20                323 	.ds 8
+                     325 
+                     326 ; THE END
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+ 21 _Current_Record  006F20 GR
+  D _adc0_value  006FF4 GR
+  C _adc2_value  006FF6 GR
+  B _adc3_value  006FF8 GR
+  A _adc7_value  006FFA GR
+  F _all_mp3_num  006F02 GR
+ 1A _ap3_file_number  006F1C GR
+ 19 _ap4_mp3_flag  006F1E GR
+ 14 _bak_current_index  006F2A GR
+ 20 _cluster_buf  006DE2 GR
+ 10 _current_area  006F08 GR
+ 16 _current_mp3_sd  006F06 GR
+ 11 _current_playmp3_number  006F0A GR
+ 18 _current_sd  006F0E GR
+ 12 _current_wav_num  006FF2 GR
+  3 _g_paster_dir  006DA6 GR
+  4 _g_string2  006F34 GR
+ 1F _gflag  006F18 GR
+  E _prev_task  006F32 GR
+  2 _remote_index_tab  006F70 GR
+ 1C _rev1Flag  006F2E GR
+  6 _rev_int_1  006FFC GR
+  5 _rev_int_2  006FFE GR
+ 17 _sd2_ap3_number  006F0C GR
+ 1D _sys_flag  006F04 GR
+ 1E _systerm_flag  006F2C GR
+  9 _t01_calib_data1  006F10 GR
+  8 _t01_calib_data2  006F14 GR
+  7 _t01_calib_data3  006F30 GR
+ 1B _vol_idx  006F1A GR
+ 15 _volume_inc_flag  006F28 GR
+ 13 _wav_action  006FF0 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$GlobalVariable_c$ size    0   flags 0
+   2 _XRAM$AD$remote_index_tab size   80   flags 2
+   3 _XRAM$AD$g_paster_dir size   3C   flags 2
+   4 _XRAM$AD$g_string2 size   3C   flags 2
+   5 _XRAM$AD$rev_int_2 size    2   flags 2
+   6 _XRAM$AD$rev_int_1 size    2   flags 2
+   7 _XRAM$AD$t01_calib_data3 size    2   flags 2
+   8 _XRAM$AD$t01_calib_data2 size    4   flags 2
+   9 _XRAM$AD$t01_calib_data1 size    4   flags 2
+   A _XRAM$AD$adc7_value size    2   flags 2
+   B _XRAM$AD$adc3_value size    2   flags 2
+   C _XRAM$AD$adc2_value size    2   flags 2
+   D _XRAM$AD$adc0_value size    2   flags 2
+   E _XRAM$AD$prev_task size    2   flags 2
+   F _XRAM$AD$all_mp3_num size    2   flags 2
+  10 _XRAM$AD$current_area size    2   flags 2
+  11 _XRAM$AD$current_playmp3_number size    2   flags 2
+  12 _XRAM$AD$current_wav_num size    2   flags 2
+  13 _XRAM$AD$wav_action size    2   flags 2
+  14 _XRAM$AD$bak_current_index size    2   flags 2
+  15 _XRAM$AD$volume_inc_flag size    2   flags 2
+  16 _XRAM$AD$current_mp3_sd size    2   flags 2
+  17 _XRAM$AD$sd2_ap3_number size    2   flags 2
+  18 _XRAM$AD$current_sd size    2   flags 2
+  19 _XRAM$AD$ap4_mp3_flag size    2   flags 2
+  1A _XRAM$AD$ap3_file_number size    2   flags 2
+  1B _XRAM$AD$vol_idx size    2   flags 2
+  1C _XRAM$AD$rev1Flag size    2   flags 2
+  1D _XRAM$AD$sys_flag size    2   flags 2
+  1E _XRAM$AD$systerm_flag size    2   flags 2
+  1F _XRAM$AD$gflag size    2   flags 2
+  20 _XRAM$AD$cluster_buf size  120   flags 2
+  21 _XRAM$AD$Current_Record size    8   flags 2
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\SYSTEM.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$SYSTEM_C$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                      57  
+                      58  .area _SYSTEM_CODE$RD$VolTbl(SYSTEM_CODE,REL) 
+                      59  .even 
+B 00 02
014D18                 60  _VolTbl:: 
014D18  00 07          61  	.dw 7  
014D1A  00 0D          62  	.dw 13  
014D1C  00 14          63  	.dw 20  
014D1E  00 1C          64  	.dw 28  
014D20  00 1F          65  	.dw 31  
+                      68  
+                      69  .area _SYSTEM_CODE$RD$SpeakerTbl(SYSTEM_CODE,REL) 
+                      70  .even 
+B 00 03
014D22                 71  _SpeakerTbl:: 
014D22  00 04          72  	.dw 4  
014D24  00 05          73  	.dw 5  
014D26  00 06          74  	.dw 6  
014D28  00 08          75  	.dw 8  
014D2A  00 0A          76  	.dw 10  
+                      78  
+                      79  .area _$system_reset(SYSTEM_CODE,REL) 
+B 00 04
01491E                 81  _system_reset:: 
01491E  2E 00          83  	LINK #0 
014920  58 F0          84  	PUSH R0 
014922  58 F1          85  	PUSH R1 
014924                 87  L49: 
014924                 89  L50: 
014924                 91  L51: 
014924  68 F1 49 0E    92  	MOV R1,#(L45) 
014928  68 F0 00 01    93  	MOV R0,#^(L45) 
01492C  58 F1          94  	PUSH R1 
01492E  58 F0          95  	PUSH R0 
014930                 96  .if KERNEL1_5 = 1
+                      97  	CRIT #1
+                      98  .endif
014930  BD 01 3C F4    99  	SCALL _SendString 
014934  50 F4         100  	ADD SP,#4 
014936                102  L52: 
+                     103  	
014936  F6 57         104  	BCLR 0x57.6 
014938                106  L53: 
+                     107  	
014938  E7 57         108  	BSET 0x57.7 
01493A                110  L54: 
+                     111  	
01493A  F5 57         112  	BCLR 0x57.5 
01493C                114  L55: 
01493C  68 F0 BF FF   115  	MOV R0,#0xbfff 
014940  AA F0 F2 2A   116  	MOVX _RTCWDT,R0 
014944                118  L56: 
014944                119  L46: 
014944                121  L57: 
014944                123  L58: 
014944                125  L59: 
014944                127  L60: 
014944                128  L47: 
014944                130  L61: 
014944  AC 00 49 44   131  	AJMP #0,L46 
014948                133  L62: 
014948                135  L63: 
014948  38 1F         136  	POP R1 
01494A  38 0F         137  	POP R0 
01494C                138  	UNLINK_MACRO
01494C  2F 00         138  UNLINK 
+                     138  
01494E                139  .if KERNEL1_5 = 1
+                     140  	CRIT #1
+                     141  .endif
01494E  C6 20         142  	RETS 
+                     144  
+                     145  .area _$Exception(SYSTEM_CODE,REL) 
+B 00 05
013B9E                146  _Exception:: 
013B9E  2E 00         148  	LINK #0 
013BA0                149  	SAVE$ISR
013BA0  58 F0         149  PUSH R0 
013BA2  1F 09         149  PUSH RC 
013BA4  1F 0A         149  PUSH  SRC 
013BA6  68 09 00 00   149  MOV RC, #0 
013BAA  68 0A 00 00   149  MOV SRC, #0 
013BAE  1F 01         149  PUSH  PSR 
013BB0  1F 00         149  PUSH  SOCR 
013BB2  1F 0C         149  PUSH  RE 
013BB4  1F 0B         149  PUSH  RS 
+                     149                   
013BB6  1F 13         149  PUSH XM0 
013BB8  1F 19         149  PUSH YM0 
013BBA  1F 02         149  PUSH SB 
013BBC  1F 10         149  PUSH DS0 
013BBE  1F 11         149  PUSH DS1 
013BC0  58 FE         149  PUSH Y2 
013BC2  58 F8         149  PUSH X0 
013BC4  68 13 00 00   149  MOV  XM0, #0 
013BC8  68 19 00 00   149  MOV  YM0, #0 
013BCC  58 F2         149  PUSH R2 
013BCE  58 F3         149  PUSH R3 
013BD0  BA F0 F2 DC   149  MOVX  R0,ES0 
013BD4  58 F0         149  PUSH  R0 
013BD6  BA F0 F2 DE   149  MOVX  R0,ES1 
013BDA  58 F0         149  PUSH  R0 
013BDC  BD 01 4A D0   149  SCALL _ClrCirqAndAdjustCpri 
+                     149          
+                     149  
013BE0  58 F0         150  	PUSH R0 
013BE2                152  L65: 
013BE2                154  L66: 
013BE2                156  L67: 
013BE2                157  .if KERNEL1_5 = 1
+                     158  	CRIT #1
+                     159  .endif
013BE2  BD 01 49 1E   160  	SCALL _system_reset 
013BE6                162  L68: 
013BE6                164  L69: 
013BE6                165  L64: 
013BE6  38 0F         166  	POP R0 
013BE8                167  	RESTORE$ISR
013BE8  38 0F         167  POP   R0 
013BEA  BA EF F2 E0   167  MOVX  ES1,R0 
013BEE  38 0F         167  POP   R0 
013BF0  BA EE F2 E0   167  MOVX  ES0,R0 
013BF4  38 3F         167  POP  R3 
013BF6  38 2F         167  POP  R2 
013BF8  38 8F         167  POP  X0 
013BFA  38 EF         167  POP Y2 
013BFC  1F 91         167  POP DS1 
013BFE  1F 90         167  POP DS0 
013C00  1F 82         167  POP SB 
013C02  1F 99         167  POP YM0 
013C04  1F 93         167  POP XM0 
+                     167          
013C06  1F 8B         167  POP   RS 
013C08  1F 8C         167  POP   RE 
013C0A  1F 80         167  POP   SOCR 
+                     167     
013C0C  1F 81         167  POP   PSR 
013C0E  1F 8A         167  POP   SRC 
013C10  1F 89         167  POP RC 
013C12  38 0F         167  POP R0 
+                     167  
013C14                168  	UNLINK_MACRO
013C14  2F 00         168  UNLINK 
+                     168  
013C16                169  .if KERNEL1_5 = 1
+                     170  	CRIT #1
+                     171  .endif
013C16  C6 10         172  	RETI 
+                     174  
+                     175  .area _$timer_get_time(SYSTEM_CODE,REL) 
+B 00 06
014AF6                176  _timer_get_time:: 
014AF6  2E 02         178  	LINK #2 
014AF8                180  L71: 
014AF8                182  L72: 
014AF8                185  L73: 
014AF8                186  	LOAD4$memory R0
014AF8  68 10 00 00   186  MOV DS0,#@(_g_timer_tick) 
014AFC  88 F0 07 34   186  MOV R0,DS0:(_g_timer_tick) 
014B00  88 F1 07 36   186  MOV R1,DS0:(_g_timer_tick+2) 
+                     186  
014B04                187  	SAVE4$stack -4
014B04  6A 0B FF FC   187  MOV [FP+#(-4)],R0 
014B08  6A 1B FF FE   187  MOV [FP+#(-4+2)],R1 
+                     187  
014B0C                189  L74: 
014B0C                190  	LOAD4$stack R0
014B0C  78 0B FF FC   190  MOV R0,[FP+#(-4)] 
014B10  78 1B FF FE   190  MOV R1,[FP+#(-4+2)] 
+                     190  
014B14                192  L75: 
014B14                194  L76: 
014B14                195  L70: 
014B14                196  	UNLINK_MACRO
014B14  2F 00         196  UNLINK 
+                     196  
014B16                197  .if KERNEL1_5 = 1
+                     198  	CRIT #1
+                     199  .endif
014B16  C6 20         200  	RETS 
+                     202  
+                     203  .area _$timer_check_timeout(SYSTEM_CODE,REL) 
+B 00 07
014980                204  _timer_check_timeout:: 
014980  2E 00         207  	LINK #0 
014982  58 F1         208  	PUSH R1 
014984  58 F2         209  	PUSH R2 
014986  58 F3         210  	PUSH R3 
014988                212  L80: 
014988                214  L81: 
014988                216  L82: 
014988                217  .if KERNEL1_5 = 1
+                     218  	CRIT #1
+                     219  .endif
014988  BD 01 4A F6   220  	SCALL _timer_get_time 
01498C                221  	LOAD4$stack R2
01498C  78 2B 00 06   221  MOV R2,[FP+#(6)] 
014990  78 3B 00 08   221  MOV R3,[FP+#(6+2)] 
+                     221  
014994                222  	CMP$long R0
014994  12 13         222  SUB R1,R3 
014996  13 02         222  SUBC R0,R2 
+                     222  
014998  AC 05 49 A2   223  	AJMP IF_UL,L78 
01499C                225  L83: 
01499C                227  L84: 
01499C                229  L85: 
01499C  48 01         230  	MOV R0,#1 
01499E  AC 00 49 A4   231  	AJMP #0,L77 
0149A2                233  L86: 
0149A2                235  L87: 
0149A2                236  L78: 
0149A2                238  L88: 
0149A2                240  L89: 
0149A2                242  L90: 
0149A2  48 00         243  	MOV R0,#0 
0149A4                245  L91: 
0149A4                247  L92: 
0149A4                249  L93: 
0149A4                251  L94: 
0149A4                252  L77: 
0149A4  38 3F         253  	POP R3 
0149A6  38 2F         254  	POP R2 
0149A8  38 1F         255  	POP R1 
0149AA                256  	UNLINK_MACRO
0149AA  2F 00         256  UNLINK 
+                     256  
0149AC                257  .if KERNEL1_5 = 1
+                     258  	CRIT #1
+                     259  .endif
0149AC  C6 20         260  	RETS 
+                     262  
+                     263  .area _$TIMER0_ISR(SYSTEM_CODE,REL) 
+B 00 08
01389C                264  _TIMER0_ISR:: 
01389C  2E 00         266  	LINK #0 
01389E                267  	SAVE$ISR
01389E  58 F0         267  PUSH R0 
0138A0  1F 09         267  PUSH RC 
0138A2  1F 0A         267  PUSH  SRC 
0138A4  68 09 00 00   267  MOV RC, #0 
0138A8  68 0A 00 00   267  MOV SRC, #0 
0138AC  1F 01         267  PUSH  PSR 
0138AE  1F 00         267  PUSH  SOCR 
0138B0  1F 0C         267  PUSH  RE 
0138B2  1F 0B         267  PUSH  RS 
+                     267                   
0138B4  1F 13         267  PUSH XM0 
0138B6  1F 19         267  PUSH YM0 
0138B8  1F 02         267  PUSH SB 
0138BA  1F 10         267  PUSH DS0 
0138BC  1F 11         267  PUSH DS1 
0138BE  58 FE         267  PUSH Y2 
0138C0  58 F8         267  PUSH X0 
0138C2  68 13 00 00   267  MOV  XM0, #0 
0138C6  68 19 00 00   267  MOV  YM0, #0 
0138CA  58 F2         267  PUSH R2 
0138CC  58 F3         267  PUSH R3 
0138CE  BA F0 F2 DC   267  MOVX  R0,ES0 
0138D2  58 F0         267  PUSH  R0 
0138D4  BA F0 F2 DE   267  MOVX  R0,ES1 
0138D8  58 F0         267  PUSH  R0 
0138DA  BD 01 4A D0   267  SCALL _ClrCirqAndAdjustCpri 
+                     267          
+                     267  
0138DE  58 F0         268  	PUSH R0 
0138E0  58 F1         269  	PUSH R1 
0138E2                271  L96: 
0138E2                273  L97: 
0138E2                275  L98: 
0138E2  48 11         276  	MOV R1,#1 
0138E4  48 00         277  	MOV R0,#0 
0138E6  68 10 00 00   278  	MOV DS0,#@(_g_timer_tick) 
0138EA  B0 F1 07 36   279  	ADD DS0:(_g_timer_tick+2),R1 
0138EE  B1 F0 07 34   280  	ADDC DS0:(_g_timer_tick),R0 
0138F2                282  L99: 
0138F2                284  L100: 
0138F2                285  L95: 
0138F2  38 1F         286  	POP R1 
0138F4  38 0F         287  	POP R0 
0138F6                288  	RESTORE$ISR
0138F6  38 0F         288  POP   R0 
0138F8  BA EF F2 E0   288  MOVX  ES1,R0 
0138FC  38 0F         288  POP   R0 
0138FE  BA EE F2 E0   288  MOVX  ES0,R0 
013902  38 3F         288  POP  R3 
013904  38 2F         288  POP  R2 
013906  38 8F         288  POP  X0 
013908  38 EF         288  POP Y2 
01390A  1F 91         288  POP DS1 
01390C  1F 90         288  POP DS0 
01390E  1F 82         288  POP SB 
013910  1F 99         288  POP YM0 
013912  1F 93         288  POP XM0 
+                     288          
013914  1F 8B         288  POP   RS 
013916  1F 8C         288  POP   RE 
013918  1F 80         288  POP   SOCR 
+                     288     
01391A  1F 81         288  POP   PSR 
01391C  1F 8A         288  POP   SRC 
01391E  1F 89         288  POP RC 
013920  38 0F         288  POP R0 
+                     288  
013922                289  	UNLINK_MACRO
013922  2F 00         289  UNLINK 
+                     289  
013924                290  .if KERNEL1_5 = 1
+                     291  	CRIT #1
+                     292  .endif
013924  C6 10         293  	RETI 
+                     295  
+                     296  .area _$adc_get(SYSTEM_CODE,REL) 
+B 00 09
01265C                297  _adc_get:: 
01265C  2E 01         299  	LINK #1 
01265E  58 F0         300  	PUSH R0 
012660  58 F1         301  	PUSH R1 
012662                303  L112: 
012662                305  L113: 
012662                308  L114: 
012662                309  	LOAD4$memory R0
012662  68 10 00 00   309  MOV DS0,#@(_adc_timer) 
012666  88 F0 07 3C   309  MOV R0,DS0:(_adc_timer) 
01266A  88 F1 07 3E   309  MOV R1,DS0:(_adc_timer+2) 
+                     309  
01266E  58 F1         310  	PUSH R1 
012670  58 F0         311  	PUSH R0 
012672                312  .if KERNEL1_5 = 1
+                     313  	CRIT #1
+                     314  .endif
012672  BD 01 49 80   315  	SCALL _timer_check_timeout 
012676  50 F4         316  	ADD SP,#4 
012678  19 01         317  	MOVZE R0,Rb1 
01267A  56 00         318  	CMP R0,#0 
01267C  AC 02 26 84   319  	AJMP IF_NE,L102 
012680                321  L115: 
012680                323  L116: 
012680                325  L117: 
012680  AC 00 27 5A   326  	AJMP #0,L101 
012684                328  L118: 
012684                330  L119: 
012684                331  L102: 
012684                333  L120: 
012684                334  .if KERNEL1_5 = 1
+                     335  	CRIT #1
+                     336  .endif
012684  BD 01 4A F6   337  	SCALL _timer_get_time 
012688  50 1A         338  	ADD R1,#10 
01268A  51 00         339  	ADDC R0,#0 
01268C  50 11         340  	ADD R1,#1 
01268E  51 00         341  	ADDC R0,#0 
012690                342  	SAVE4$memory _adc_timer
012690  68 10 00 00   342  MOV DS0,#@(_adc_timer) 
012694                342  .if KERNEL1_E = 1
+                     342  NOP
+                     342  .endif
012694  A8 F0 07 3C   342  MOV DS0:(_adc_timer),R0 
012698  A8 F1 07 3E   342  MOV DS0:(_adc_timer+2),R1 
+                     342  
01269C                344  L121: 
01269C  68 10 00 00   345  	MOV DS0,#@_adc_channel 
0126A0  99 F0 07 9A   346  	MOVZE R0,DS0:_adc_channel 
0126A4  58 F0         347  	PUSH R0 
0126A6                348  .if KERNEL1_5 = 1
+                     349  	CRIT #1
+                     350  .endif
0126A6  BD 01 3D D2   351  	SCALL _Get_ADCValue 
0126AA  50 F2         352  	ADD SP,#2 
0126AC  6A 0B FF FE   353  	MOV [FP+#(-2)],R0 
0126B0                355  L122: 
0126B0  68 10 00 00   356  	MOV DS0,#@_adc_channel 
0126B4  99 F0 07 9A   357  	MOVZE R0,DS0:_adc_channel 
0126B8  56 00         358  	CMP R0,#0 
0126BA  AC 02 26 D8   359  	AJMP IF_NE,L104 
0126BE                361  L123: 
0126BE                363  L124: 
0126BE                365  L125: 
0126BE  78 0B FF FE   366  	MOV R0,[FP+#(-2)] 
0126C2  68 10 00 00   367  	MOV DS0,#@_adc0_value 
0126C6                368  .if KERNEL1_E = 1
+                     369  	NOP
+                     370  .endif
0126C6  A8 F0 6F F4   371  	MOV DS0:_adc0_value,R0 
0126CA                373  L126: 
0126CA  49 12         374  	MOVB Rb1,#2 
0126CC  68 10 00 00   375  	MOV DS0,#@_adc_channel 
0126D0                376  .if KERNEL1_E = 1
+                     377  	NOP
+                     378  .endif
0126D0  A9 F1 07 9A   379  	MOVB DS0:_adc_channel,Rb1 
0126D4                381  L127: 
0126D4  AC 00 27 5A   382  	AJMP #0,L101 
0126D8                384  L128: 
0126D8                386  L129: 
0126D8                387  L104: 
0126D8                389  L130: 
0126D8  68 10 00 00   390  	MOV DS0,#@_adc_channel 
0126DC  99 F0 07 9A   391  	MOVZE R0,DS0:_adc_channel 
0126E0  56 02         392  	CMP R0,#2 
0126E2  AC 02 27 00   393  	AJMP IF_NE,L106 
0126E6                395  L131: 
0126E6                397  L132: 
0126E6                399  L133: 
0126E6  78 0B FF FE   400  	MOV R0,[FP+#(-2)] 
0126EA  68 10 00 00   401  	MOV DS0,#@_adc2_value 
0126EE                402  .if KERNEL1_E = 1
+                     403  	NOP
+                     404  .endif
0126EE  A8 F0 6F F6   405  	MOV DS0:_adc2_value,R0 
0126F2                407  L134: 
0126F2  49 13         408  	MOVB Rb1,#3 
0126F4  68 10 00 00   409  	MOV DS0,#@_adc_channel 
0126F8                410  .if KERNEL1_E = 1
+                     411  	NOP
+                     412  .endif
0126F8  A9 F1 07 9A   413  	MOVB DS0:_adc_channel,Rb1 
0126FC                415  L135: 
0126FC  AC 00 27 5A   416  	AJMP #0,L101 
012700                418  L136: 
012700                420  L137: 
012700                421  L106: 
012700                423  L138: 
012700  68 10 00 00   424  	MOV DS0,#@_adc_channel 
012704  99 F0 07 9A   425  	MOVZE R0,DS0:_adc_channel 
012708  56 03         426  	CMP R0,#3 
01270A  AC 02 27 28   427  	AJMP IF_NE,L108 
01270E                429  L139: 
01270E                431  L140: 
01270E                433  L141: 
01270E  78 0B FF FE   434  	MOV R0,[FP+#(-2)] 
012712  68 10 00 00   435  	MOV DS0,#@_adc3_value 
012716                436  .if KERNEL1_E = 1
+                     437  	NOP
+                     438  .endif
012716  A8 F0 6F F8   439  	MOV DS0:_adc3_value,R0 
01271A                441  L142: 
01271A  49 17         442  	MOVB Rb1,#7 
01271C  68 10 00 00   443  	MOV DS0,#@_adc_channel 
012720                444  .if KERNEL1_E = 1
+                     445  	NOP
+                     446  .endif
012720  A9 F1 07 9A   447  	MOVB DS0:_adc_channel,Rb1 
012724                449  L143: 
012724  AC 00 27 5A   450  	AJMP #0,L101 
012728                452  L144: 
012728                454  L145: 
012728                455  L108: 
012728                457  L146: 
012728  68 10 00 00   458  	MOV DS0,#@_adc_channel 
01272C  99 F0 07 9A   459  	MOVZE R0,DS0:_adc_channel 
012730  56 07         460  	CMP R0,#7 
012732  AC 02 27 50   461  	AJMP IF_NE,L110 
012736                463  L147: 
012736                465  L148: 
012736                467  L149: 
012736  78 0B FF FE   468  	MOV R0,[FP+#(-2)] 
01273A  68 10 00 00   469  	MOV DS0,#@_adc7_value 
01273E                470  .if KERNEL1_E = 1
+                     471  	NOP
+                     472  .endif
01273E  A8 F0 6F FA   473  	MOV DS0:_adc7_value,R0 
012742                475  L150: 
012742  49 10         476  	MOVB Rb1,#0 
012744  68 10 00 00   477  	MOV DS0,#@_adc_channel 
012748                478  .if KERNEL1_E = 1
+                     479  	NOP
+                     480  .endif
012748  A9 F1 07 9A   481  	MOVB DS0:_adc_channel,Rb1 
01274C                483  L151: 
01274C  AC 00 27 5A   484  	AJMP #0,L101 
012750                486  L152: 
012750                488  L153: 
012750                489  L110: 
012750                491  L154: 
012750  49 17         492  	MOVB Rb1,#7 
012752  68 10 00 00   493  	MOV DS0,#@_adc_channel 
012756                494  .if KERNEL1_E = 1
+                     495  	NOP
+                     496  .endif
012756  A9 F1 07 9A   497  	MOVB DS0:_adc_channel,Rb1 
01275A                499  L155: 
01275A                501  L156: 
01275A                502  L101: 
01275A  38 1F         503  	POP R1 
01275C  38 0F         504  	POP R0 
01275E                505  	UNLINK_MACRO
01275E  2F 00         505  UNLINK 
+                     505  
012760                506  .if KERNEL1_5 = 1
+                     507  	CRIT #1
+                     508  .endif
012760  C6 20         509  	RETS 
+                     511  
+                     512  .area _$op_time_dowith(SYSTEM_CODE,REL) 
+B 00 0A
0143F0                513  _op_time_dowith:: 
0143F0  2E 02         515  	LINK #2 
0143F2  58 F0         516  	PUSH R0 
0143F4  58 F1         517  	PUSH R1 
0143F6                519  L160: 
0143F6                521  L161: 
0143F6                523  L162: 
0143F6  BA F0 06 E0   524  	MOVX R0,_op_close_timer 
0143FA  BA F1 06 E2   525  	MOVX R1,_op_close_timer+2 
0143FE                526  	SAVE4$stack -4
0143FE  6A 0B FF FC   526  MOV [FP+#(-4)],R0 
014402  6A 1B FF FE   526  MOV [FP+#(-4+2)],R1 
+                     526  
014406                527  	CMP$long$con R0
014406  52 10         527  SUB R1,#(0 & 0xFFFF) 
014408  53 00         527  SUBC R0,#(0 >> 16) 
+                     527  
01440A  AC 01 44 36   528  	AJMP IF_EQ,L158 
01440E                529  	LOAD4$stack R0
01440E  78 0B FF FC   529  MOV R0,[FP+#(-4)] 
014412  78 1B FF FE   529  MOV R1,[FP+#(-4+2)] 
+                     529  
014416  58 F1         530  	PUSH R1 
014418  58 F0         531  	PUSH R0 
01441A                532  .if KERNEL1_5 = 1
+                     533  	CRIT #1
+                     534  .endif
01441A  BD 01 49 80   535  	SCALL _timer_check_timeout 
01441E  50 F4         536  	ADD SP,#4 
014420  19 01         537  	MOVZE R0,Rb1 
014422  56 00         538  	CMP R0,#0 
014424  AC 01 44 36   539  	AJMP IF_EQ,L158 
014428                541  L163: 
014428                543  L164: 
014428                545  L165: 
014428  48 10         546  	MOV R1,#0 
01442A  48 00         547  	MOV R0,#0 
01442C  AA F0 06 E0   548  	MOVX _op_close_timer,R0 
014430  AA F1 06 E2   549  	MOVX _op_close_timer+2,R1 
014434                551  L166: 
+                     552  	
014434  F2 4E         553  	BCLR 0x4e.2 
014436                555  L167: 
014436                557  L168: 
014436                558  L158: 
014436                560  L169: 
014436                562  L170: 
014436                563  L157: 
014436  38 1F         564  	POP R1 
014438  38 0F         565  	POP R0 
01443A                566  	UNLINK_MACRO
01443A  2F 00         566  UNLINK 
+                     566  
01443C                567  .if KERNEL1_5 = 1
+                     568  	CRIT #1
+                     569  .endif
01443C  C6 20         570  	RETS 
+                     572  
+                     573  .area _$clk_time_dowith(SYSTEM_CODE,REL) 
+B 00 0B
014160                574  _clk_time_dowith:: 
014160  2E 02         576  	LINK #2 
014162  58 F0         577  	PUSH R0 
014164  58 F1         578  	PUSH R1 
014166                580  L174: 
014166                582  L175: 
014166                584  L176: 
014166                585  	LOAD4$memory R0
014166  68 10 00 00   585  MOV DS0,#@(_g_system_clk_timer) 
01416A  88 F0 07 38   585  MOV R0,DS0:(_g_system_clk_timer) 
01416E  88 F1 07 3A   585  MOV R1,DS0:(_g_system_clk_timer+2) 
+                     585  
014172                586  	SAVE4$stack -4
014172  6A 0B FF FC   586  MOV [FP+#(-4)],R0 
014176  6A 1B FF FE   586  MOV [FP+#(-4+2)],R1 
+                     586  
01417A                587  	CMP$long$con R0
01417A  52 10         587  SUB R1,#(0 & 0xFFFF) 
01417C  53 00         587  SUBC R0,#(0 >> 16) 
+                     587  
01417E  AC 01 41 B0   588  	AJMP IF_EQ,L172 
014182                589  	LOAD4$stack R0
014182  78 0B FF FC   589  MOV R0,[FP+#(-4)] 
014186  78 1B FF FE   589  MOV R1,[FP+#(-4+2)] 
+                     589  
01418A  58 F1         590  	PUSH R1 
01418C  58 F0         591  	PUSH R0 
01418E                592  .if KERNEL1_5 = 1
+                     593  	CRIT #1
+                     594  .endif
01418E  BD 01 49 80   595  	SCALL _timer_check_timeout 
014192  50 F4         596  	ADD SP,#4 
014194  19 01         597  	MOVZE R0,Rb1 
014196  56 00         598  	CMP R0,#0 
014198  AC 01 41 B0   599  	AJMP IF_EQ,L172 
01419C                601  L177: 
01419C                603  L178: 
01419C                605  L179: 
01419C  48 10         606  	MOV R1,#0 
01419E  48 00         607  	MOV R0,#0 
0141A0                608  	SAVE4$memory _g_system_clk_timer
0141A0  68 10 00 00   608  MOV DS0,#@(_g_system_clk_timer) 
0141A4                608  .if KERNEL1_E = 1
+                     608  NOP
+                     608  .endif
0141A4  A8 F0 07 38   608  MOV DS0:(_g_system_clk_timer),R0 
0141A8  A8 F1 07 3A   608  MOV DS0:(_g_system_clk_timer+2),R1 
+                     608  
0141AC                610  L180: 
0141AC                611  .if KERNEL1_5 = 1
+                     612  	CRIT #1
+                     613  .endif
0141AC  BD 01 42 B6   614  	SCALL _SysClkDowngrade 
0141B0                616  L181: 
0141B0                618  L182: 
0141B0                619  L172: 
0141B0                621  L183: 
0141B0                623  L184: 
0141B0                624  L171: 
0141B0  38 1F         625  	POP R1 
0141B2  38 0F         626  	POP R0 
0141B4                627  	UNLINK_MACRO
0141B4  2F 00         627  UNLINK 
+                     627  
0141B6                628  .if KERNEL1_5 = 1
+                     629  	CRIT #1
+                     630  .endif
0141B6  C6 20         631  	RETS 
+                     633  
+                     634  .area _$vol_dec(SYSTEM_CODE,REL) 
+B 00 0C
014D4C                635  _vol_dec:: 
014D4C  2E 00         637  	LINK #0 
014D4E                639  L186: 
014D4E                641  L187: 
014D4E                643  L188: 
014D4E                645  L189: 
014D4E                647  L190: 
014D4E                648  L185: 
014D4E                649  	UNLINK_MACRO
014D4E  2F 00         649  UNLINK 
+                     649  
014D50                650  .if KERNEL1_5 = 1
+                     651  	CRIT #1
+                     652  .endif
014D50  C6 20         653  	RETS 
+                     655  
+                     656  .area _$vol_inc(SYSTEM_CODE,REL) 
+B 00 0D
014D46                657  _vol_inc:: 
014D46  2E 00         659  	LINK #0 
014D48                661  L192: 
014D48                663  L193: 
014D48                665  L194: 
014D48                667  L195: 
014D48                669  L196: 
014D48                670  L191: 
014D48                671  	UNLINK_MACRO
014D48  2F 00         671  UNLINK 
+                     671  
014D4A                672  .if KERNEL1_5 = 1
+                     673  	CRIT #1
+                     674  .endif
014D4A  C6 20         675  	RETS 
+                     677  
+                     678  .area _$judge_op(SYSTEM_CODE,REL) 
+B 00 0E
014950                679  _judge_op:: 
014950  2E 00         681  	LINK #0 
014952  58 F0         682  	PUSH R0 
014954  58 F1         683  	PUSH R1 
014956                685  L200: 
014956                687  L201: 
014956                689  L202: 
+                     690  	
014956  7C 59 F0 40   691  	BMOV R0.0,0x59.4 
01495A  54 01         692  	AND R0,#1 
01495C  68 10 00 00   693  	MOV DS0,#@(_gflag) 
014960  88 F1 6F 18   694  	MOV R1,DS0:(_gflag) 
014964  4D 16         695  	SR R1,#6 
014966  54 11         696  	AND R1,#1 
014968  16 01         697  	CMP R0,R1 
01496A  AC 01 49 78   698  	AJMP IF_EQ,L198 
01496E                700  L203: 
01496E                702  L204: 
01496E                704  L205: 
01496E  48 15         705  	MOV R1,#5 
014970  68 10 00 00   706  	MOV DS0,#@_vol_idx_bak 
014974                707  .if KERNEL1_E = 1
+                     708  	NOP
+                     709  .endif
014974  A8 F1 07 86   710  	MOV DS0:_vol_idx_bak,R1 
014978                712  L206: 
014978                714  L207: 
014978                715  L198: 
014978                717  L208: 
014978                719  L209: 
014978                720  L197: 
014978  38 1F         721  	POP R1 
01497A  38 0F         722  	POP R0 
01497C                723  	UNLINK_MACRO
01497C  2F 00         723  UNLINK 
+                     723  
01497E                724  .if KERNEL1_5 = 1
+                     725  	CRIT #1
+                     726  .endif
01497E  C6 20         727  	RETS 
+                     729  
+                     730  .area _$inc_volume(SYSTEM_CODE,REL) 
+B 00 0F
0139AA                731  _inc_volume:: 
0139AA  2E 00         734  	LINK #0 
0139AC  58 F0         735  	PUSH R0 
0139AE  58 F1         736  	PUSH R1 
0139B0                738  L215: 
0139B0                740  L216: 
0139B0  78 1B 00 06   741  	MOV R1,[FP+#(6)] 
0139B4  6B 3B 00 06   742  	MOVB [FP+#(6)],Rb3 
0139B8                744  L217: 
+                     745  	
0139B8  7C 59 F1 40   746  	BMOV R1.0,0x59.4 
0139BC  54 11         747  	AND R1,#1 
0139BE  68 10 00 00   748  	MOV DS0,#@(_gflag) 
0139C2  88 F0 6F 18   749  	MOV R0,DS0:(_gflag) 
0139C6  74 F0 FF BF   750  	AND R0,#0xffbf 
0139CA  54 11         751  	AND R1,#1 
0139CC  4C 16         752  	SL R1,#6 
0139CE  74 F1 00 40   753  	AND R1,#64 
0139D2  15 01         754  	OR R0,R1 
0139D4  68 10 00 00   755  	MOV DS0,#@_gflag 
0139D8                756  .if KERNEL1_E = 1
+                     757  	NOP
+                     758  .endif
0139D8  A8 F0 6F 18   759  	MOV DS0:_gflag,R0 
0139DC                761  L218: 
0139DC  68 10 00 00   762  	MOV DS0,#@(_gflag) 
0139E0  88 F0 6F 18   763  	MOV R0,DS0:(_gflag) 
0139E4  74 F0 00 40   764  	AND R0,#64 
0139E8  56 00         765  	CMP R0,#0 
0139EA  AC 02 39 FE   766  	AJMP IF_NE,L211 
0139EE                768  L219: 
0139EE                770  L220: 
0139EE                772  L221: 
+                     773  	
0139EE  F2 4E         774  	BCLR 0x4e.2 
0139F0                776  L222: 
0139F0  48 05         777  	MOV R0,#5 
0139F2  58 F0         778  	PUSH R0 
0139F4                779  .if KERNEL1_5 = 1
+                     780  	CRIT #1
+                     781  .endif
0139F4  BD 01 C0 02   782  	SCALL _DAC_Speaker_Volume 
0139F8  50 F2         783  	ADD SP,#2 
0139FA                785  L223: 
0139FA                787  L224: 
0139FA  AC 00 3A 26   788  	AJMP #0,L212 
0139FE                789  L211: 
0139FE                791  L225: 
0139FE                793  L226: 
0139FE                795  L227: 
+                     796  	
0139FE  E2 4E         797  	BSET 0x4e.2 
013A00                799  L228: 
013A00  68 10 00 00   800  	MOV DS0,#@_flag_wav_play 
013A04  99 F0 07 92   801  	MOVZE R0,DS0:_flag_wav_play 
013A08  56 00         802  	CMP R0,#0 
013A0A  AC 01 3A 1C   803  	AJMP IF_EQ,L213 
013A0E                805  L229: 
013A0E                807  L230: 
013A0E                809  L231: 
013A0E  48 0C         810  	MOV R0,#12 
013A10  58 F0         811  	PUSH R0 
013A12                812  .if KERNEL1_5 = 1
+                     813  	CRIT #1
+                     814  .endif
013A12  BD 01 C0 02   815  	SCALL _DAC_Speaker_Volume 
013A16  50 F2         816  	ADD SP,#2 
013A18                818  L232: 
013A18                820  L233: 
013A18  AC 00 3A 26   821  	AJMP #0,L214 
013A1C                822  L213: 
013A1C                824  L234: 
013A1C                826  L235: 
013A1C                828  L236: 
013A1C  48 08         829  	MOV R0,#8 
013A1E  58 F0         830  	PUSH R0 
013A20                831  .if KERNEL1_5 = 1
+                     832  	CRIT #1
+                     833  .endif
013A20  BD 01 C0 02   834  	SCALL _DAC_Speaker_Volume 
013A24  50 F2         835  	ADD SP,#2 
013A26                837  L237: 
013A26                839  L238: 
013A26                840  L214: 
013A26                842  L239: 
013A26                844  L240: 
013A26                845  L212: 
013A26                847  L241: 
013A26                849  L242: 
013A26                850  L210: 
013A26  38 1F         851  	POP R1 
013A28  38 0F         852  	POP R0 
013A2A                853  	UNLINK_MACRO
013A2A  2F 00         853  UNLINK 
+                     853  
013A2C                854  .if KERNEL1_5 = 1
+                     855  	CRIT #1
+                     856  .endif
013A2C  C6 20         857  	RETS 
+                     859  
+                     860  .area _$SpeakDetect(SYSTEM_CODE,REL) 
+B 00 10
0134FA                861  _SpeakDetect:: 
0134FA  2E 00         864  	LINK #0 
0134FC  58 F0         865  	PUSH R0 
0134FE  58 F1         866  	PUSH R1 
013500  58 F2         867  	PUSH R2 
013502  58 F3         868  	PUSH R3 
013504                870  L248: 
013504                872  L249: 
013504  78 0B 00 06   873  	MOV R0,[FP+#(6)] 
013508  6B 1B 00 06   874  	MOVB [FP+#(6)],Rb1 
01350C                876  L250: 
01350C                877  .if KERNEL1_5 = 1
+                     878  	CRIT #1
+                     879  .endif
01350C  BD 01 49 50   880  	SCALL _judge_op 
013510                882  L251: 
013510  68 10 00 00   883  	MOV DS0,#@(_vol_idx) 
013514  88 F0 6F 1A   884  	MOV R0,DS0:(_vol_idx) 
013518  68 10 00 00   885  	MOV DS0,#@(_vol_idx_bak) 
01351C  96 F0 07 86   886  	CMP R0,DS0:(_vol_idx_bak) 
013520  AC 01 35 9E   887  	AJMP IF_EQ,L244 
013524                889  L252: 
013524                891  L253: 
013524                893  L254: 
013524  68 10 00 00   894  	MOV DS0,#@(_vol_idx) 
013528  88 F0 6F 1A   895  	MOV R0,DS0:(_vol_idx) 
01352C  68 10 00 00   896  	MOV DS0,#@_vol_idx_bak 
013530                897  .if KERNEL1_E = 1
+                     898  	NOP
+                     899  .endif
013530  A8 F0 07 86   900  	MOV DS0:_vol_idx_bak,R0 
013534                902  L255: 
013534                903  .if KERNEL1_5 = 1
+                     904  	CRIT #1
+                     905  .endif
013534  BD 01 BF F2   906  	SCALL _DAC_Disable_Speaker 
013538                908  L256: 
013538                909  .if KERNEL1_5 = 1
+                     910  	CRIT #1
+                     911  .endif
013538  BD 01 BF DA   912  	SCALL _DAC_Enable_HeadPhone 
01353C                914  L257: 
01353C  68 10 00 00   915  	MOV DS0,#@(_sys_flag) 
013540  88 F0 6F 04   916  	MOV R0,DS0:(_sys_flag) 
013544  74 F0 40 00   917  	AND R0,#16384 
013548  56 00         918  	CMP R0,#0 
01354A  AC 01 35 62   919  	AJMP IF_EQ,L246 
01354E                921  L258: 
01354E                923  L259: 
01354E                925  L260: 
01354E  68 10 00 02   926  	MOV DS0,#@(_VolTbl) 
013552  88 F0 4D 18   927  	MOV R0,DS0:(_VolTbl) 
013556  58 F0         928  	PUSH R0 
013558                929  .if KERNEL1_5 = 1
+                     930  	CRIT #1
+                     931  .endif
013558  BD 01 BF FA   932  	SCALL _DAC_HeadPhone_Volume 
01355C  50 F2         933  	ADD SP,#2 
01355E                935  L261: 
01355E                937  L262: 
01355E  AC 00 35 90   938  	AJMP #0,L247 
013562                939  L246: 
013562                941  L263: 
013562                943  L264: 
013562                945  L265: 
013562  68 10 00 00   946  	MOV DS0,#@_vol_idx 
013566  88 F1 6F 1A   947  	MOV R1,DS0:_vol_idx 
01356A  48 00         948  	MOV R0,#0 
01356C  4C 11         949  	SL R1,#1 
01356E  5C 01         950  	SLOSB R0,#1 
013570  68 F3 4D 18   951  	MOV R3,#(_VolTbl) 
013574  68 F2 00 01   952  	MOV R2,#^(_VolTbl) 
013578  10 13         953  	ADD R1,R3 
01357A  11 02         954  	ADDC R0,R2 
01357C                955  	LOAD2$indirect R0
01357C  4C 11         955  SL R1,#1 
01357E  5C 01         955  SLOSB R0,#1 
013580  BA 10 F2 E0   955  MOVX DS0, R0 
013584  4D 11         955  SR R1,#1 
013586  28 01         955  MOV R0,[R1] 
+                     955  
013588  58 F0         956  	PUSH R0 
01358A                957  .if KERNEL1_5 = 1
+                     958  	CRIT #1
+                     959  .endif
01358A  BD 01 BF FA   960  	SCALL _DAC_HeadPhone_Volume 
01358E  50 F2         961  	ADD SP,#2 
013590                963  L266: 
013590                965  L267: 
013590                966  L247: 
013590                968  L268: 
013590  79 1B 00 06   969  	MOVB Rb1,[FP+#(6)] 
013594  19 01         970  	MOVZE R0,Rb1 
013596  58 F0         971  	PUSH R0 
013598                972  .if KERNEL1_5 = 1
+                     973  	CRIT #1
+                     974  .endif
013598  BD 01 39 AA   975  	SCALL _inc_volume 
01359C  50 F2         976  	ADD SP,#2 
01359E                978  L269: 
01359E                980  L270: 
01359E                981  L244: 
01359E                983  L271: 
01359E                985  L272: 
01359E                986  L243: 
01359E  38 3F         987  	POP R3 
0135A0  38 2F         988  	POP R2 
0135A2  38 1F         989  	POP R1 
0135A4  38 0F         990  	POP R0 
0135A6                991  	UNLINK_MACRO
0135A6  2F 00         991  UNLINK 
+                     991  
0135A8                992  .if KERNEL1_5 = 1
+                     993  	CRIT #1
+                     994  .endif
0135A8  C6 20         995  	RETS 
+                     997  
+                     998  .area _$CheckUSB(SYSTEM_CODE,REL) 
+B 00 11
013E20                999  _CheckUSB:: 
013E20  2E 00        1001  	LINK #0 
013E22  58 F1        1002  	PUSH R1 
013E24               1004  L279: 
013E24               1006  L280: 
013E24               1008  L281: 
013E24  68 10 00 00  1009  	MOV DS0,#@(_gflag) 
013E28  88 F0 6F 18  1010  	MOV R0,DS0:(_gflag) 
013E2C  74 F0 80 00  1011  	AND R0,#0x8000 
013E30  56 00        1012  	CMP R0,#0 
013E32  AC 01 3E 3C  1013  	AJMP IF_EQ,L274 
013E36               1015  L282: 
013E36  48 00        1016  	MOV R0,#0 
013E38  AC 00 3E 7C  1017  	AJMP #0,L273 
013E3C               1018  L274: 
013E3C               1020  L283: 
013E3C  68 10 00 00  1021  	MOV DS0,#@(_adc2_value) 
013E40  88 F0 6F F6  1022  	MOV R0,DS0:(_adc2_value) 
013E44  76 F0 00 64  1023  	CMP R0,#100 
013E48  AC 0C 3E 7A  1024  	AJMP IF_ULE,L276 
013E4C               1026  L284: 
013E4C               1028  L285: 
013E4C               1030  L286: 
013E4C  48 00        1031  	MOV R0,#0 
013E4E  58 F0        1032  	PUSH R0 
013E50               1033  .if KERNEL1_5 = 1
+                    1034  	CRIT #1
+                    1035  .endif
013E50  BD 01 42 0E  1036  	SCALL _clkup_time 
013E54  50 F2        1037  	ADD SP,#2 
013E56               1039  L287: 
013E56  68 F1 49 02  1040  	MOV R1,#(L278) 
013E5A  68 F0 00 01  1041  	MOV R0,#^(L278) 
013E5E  58 F1        1042  	PUSH R1 
013E60  58 F0        1043  	PUSH R0 
013E62               1044  .if KERNEL1_5 = 1
+                    1045  	CRIT #1
+                    1046  .endif
013E62  BD 01 3C F4  1047  	SCALL _SendString 
013E66  50 F4        1048  	ADD SP,#4 
013E68               1050  L288: 
013E68  48 10        1051  	MOV R1,#0 
013E6A  48 00        1052  	MOV R0,#0 
013E6C  AA F0 06 D4  1053  	MOVX _sys_led_timer,R0 
013E70  AA F1 06 D6  1054  	MOVX _sys_led_timer+2,R1 
013E74               1056  L289: 
013E74  48 01        1057  	MOV R0,#1 
013E76  AC 00 3E 7C  1058  	AJMP #0,L273 
013E7A               1060  L290: 
013E7A               1062  L291: 
013E7A               1063  L276: 
013E7A               1065  L292: 
013E7A  48 00        1066  	MOV R0,#0 
013E7C               1068  L293: 
013E7C               1070  L294: 
013E7C               1071  L273: 
013E7C  38 1F        1072  	POP R1 
013E7E               1073  	UNLINK_MACRO
013E7E  2F 00        1073  UNLINK 
+                    1073  
013E80               1074  .if KERNEL1_5 = 1
+                    1075  	CRIT #1
+                    1076  .endif
013E80  C6 20        1077  	RETS 
+                    1079  
+                    1080  .area _$power_forbid_autopoweroff(SYSTEM_CODE,REL) 
+B 00 12
014CB8               1081  _power_forbid_autopoweroff:: 
014CB8  2E 00        1083  	LINK #0 
014CBA  58 F0        1084  	PUSH R0 
014CBC               1086  L296: 
014CBC               1088  L297: 
014CBC               1090  L298: 
014CBC  49 11        1091  	MOVB Rb1,#1 
014CBE  AB F1 07 6C  1092  	MOVBX _g_b_autopoweroff_forbidden,Rb1 
014CC2               1094  L299: 
014CC2               1096  L300: 
014CC2               1097  L295: 
014CC2  38 0F        1098  	POP R0 
014CC4               1099  	UNLINK_MACRO
014CC4  2F 00        1099  UNLINK 
+                    1099  
014CC6               1100  .if KERNEL1_5 = 1
+                    1101  	CRIT #1
+                    1102  .endif
014CC6  C6 20        1103  	RETS 
+                    1105  
+                    1106  .area _$power_authorize_autopoweroff(SYSTEM_CODE,REL) 
+B 00 13
013D5A               1107  _power_authorize_autopoweroff:: 
013D5A  2E 00        1109  	LINK #0 
013D5C  58 F0        1110  	PUSH R0 
013D5E  58 F1        1111  	PUSH R1 
013D60               1113  L302: 
013D60               1115  L303: 
013D60               1117  L304: 
013D60  49 10        1118  	MOVB Rb1,#0 
013D62  AB F1 07 6C  1119  	MOVBX _g_b_autopoweroff_forbidden,Rb1 
013D66               1121  L305: 
013D66               1122  .if KERNEL1_5 = 1
+                    1123  	CRIT #1
+                    1124  .endif
013D66  BD 01 4A F6  1125  	SCALL _timer_get_time 
013D6A  70 F1 93 E0  1126  	ADD R1,#(0x000493e0 & 0xFFFF) 
013D6E  51 04        1127  	ADDC R0,#(0x000493e0 >> 16) 
013D70  50 11        1128  	ADD R1,#1 
013D72  51 00        1129  	ADDC R0,#0 
013D74  AA F0 06 E4  1130  	MOVX _g_autopoweroff_timer,R0 
013D78  AA F1 06 E6  1131  	MOVX _g_autopoweroff_timer+2,R1 
013D7C               1133  L306: 
013D7C  68 F0 FD FF  1134  	MOV R0,#0xfdff 
013D80  68 10 00 00  1135  	MOV DS0,#@(_systerm_flag) 
013D84  B4 F0 6F 2C  1136  	AND DS0:(_systerm_flag),R0 
013D88               1138  L307: 
013D88  68 F0 FF EF  1139  	MOV R0,#0xffef 
013D8C  68 10 00 00  1140  	MOV DS0,#@(_systerm_flag) 
013D90  B4 F0 6F 2C  1141  	AND DS0:(_systerm_flag),R0 
013D94               1143  L308: 
013D94               1145  L309: 
013D94               1146  L301: 
013D94  38 1F        1147  	POP R1 
013D96  38 0F        1148  	POP R0 
013D98               1149  	UNLINK_MACRO
013D98  2F 00        1149  UNLINK 
+                    1149  
013D9A               1150  .if KERNEL1_5 = 1
+                    1151  	CRIT #1
+                    1152  .endif
013D9A  C6 20        1153  	RETS 
+                    1154  
013D9C               1155  _Delay_ms:: 
013D9C  2E 00        1156      LINK #0 
013D9E  58 F0        1157      PUSH R0 
013DA0  58 F1        1158      PUSH R1 
+                    1159  
013DA2  78 0B 00 06  1160      MOV R0,[FP+#(6)] 
+                    1161  $Loop2: 
013DA6  68 F1 2E E0  1162      MOV R1,#12000  
+                    1163  $Loop: 
013DAA  4E 10        1164      CMPD1 R1,#0 
013DAC  AC 02 3D AA  1165      AJMP IF_NE,$Loop 
013DB0  4E 00        1166      CMPD1 R0,#0 
013DB2  AC 02 3D A6  1167      AJMP IF_NE,$Loop2 
013DB6  38 1F        1168      POP R1 
013DB8  38 0F        1169      POP R0 
013DBA               1170      UNLINK_MACRO
013DBA  2F 00        1170  UNLINK 
+                    1170  
013DBC  C6 20        1171      RETS 
+                    1172  
+                    1173  
+                    1174  .area _$SysClkUpgrade(SYSTEM_CODE,REL) 
+B 00 14
013FA2               1176  _SysClkUpgrade:: 
013FA2  2E 00        1178  	LINK #0 
013FA4  58 F0        1179  	PUSH R0 
013FA6  58 F1        1180  	PUSH R1 
013FA8               1182  L314: 
013FA8               1184  L315: 
013FA8               1186  L316: 
013FA8  68 10 00 00  1187  	MOV DS0,#@(_gflag) 
013FAC  88 F0 6F 18  1188  	MOV R0,DS0:(_gflag) 
013FB0  74 F0 04 00  1189  	AND R0,#1024 
013FB4  56 00        1190  	CMP R0,#0 
013FB6  AC 01 3F F6  1191  	AJMP IF_EQ,L311 
013FBA               1193  L317: 
013FBA               1195  L318: 
013FBA               1197  L319: 
013FBA  48 09        1198  	MOV R0,#9 
013FBC  58 F0        1199  	PUSH R0 
013FBE               1200  .if KERNEL1_5 = 1
+                    1201  	CRIT #1
+                    1202  .endif
013FBE  BD 01 45 A6  1203  	SCALL _SystemClock 
013FC2  50 F2        1204  	ADD SP,#2 
013FC4               1206  L320: 
013FC4  48 03        1207  	MOV R0,#3 
013FC6  58 F0        1208  	PUSH R0 
013FC8               1209  .if KERNEL1_5 = 1
+                    1210  	CRIT #1
+                    1211  .endif
013FC8  BD 01 45 A6  1212  	SCALL _SystemClock 
013FCC  50 F2        1213  	ADD SP,#2 
013FCE               1215  L321: 
013FCE  48 00        1216  	MOV R0,#0 
013FD0  58 F0        1217  	PUSH R0 
013FD2               1218  .if KERNEL1_5 = 1
+                    1219  	CRIT #1
+                    1220  .endif
013FD2  BD 01 14 4C  1221  	SCALL _SPIF_Set_Clock 
013FD6  50 F2        1222  	ADD SP,#2 
013FD8               1224  L322: 
013FD8  68 F0 FB FF  1225  	MOV R0,#0xfbff 
013FDC  68 10 00 00  1226  	MOV DS0,#@(_gflag) 
013FE0  B4 F0 6F 18  1227  	AND DS0:(_gflag),R0 
013FE4               1229  L323: 
013FE4  68 F1 48 F8  1230  	MOV R1,#(L313) 
013FE8  68 F0 00 01  1231  	MOV R0,#^(L313) 
013FEC  58 F1        1232  	PUSH R1 
013FEE  58 F0        1233  	PUSH R0 
013FF0               1234  .if KERNEL1_5 = 1
+                    1235  	CRIT #1
+                    1236  .endif
013FF0  BD 01 3C F4  1237  	SCALL _SendString 
013FF4  50 F4        1238  	ADD SP,#4 
013FF6               1240  L324: 
013FF6               1242  L325: 
013FF6               1243  L311: 
013FF6               1245  L326: 
013FF6               1247  L327: 
013FF6               1248  L310: 
013FF6  38 1F        1249  	POP R1 
013FF8  38 0F        1250  	POP R0 
013FFA               1251  	UNLINK_MACRO
013FFA  2F 00        1251  UNLINK 
+                    1251  
013FFC               1252  .if KERNEL1_5 = 1
+                    1253  	CRIT #1
+                    1254  .endif
013FFC  C6 20        1255  	RETS 
+                    1257  
+                    1258  .area _$SysClkDowngrade(SYSTEM_CODE,REL) 
+B 00 15
0142B6               1259  _SysClkDowngrade:: 
0142B6  2E 00        1261  	LINK #0 
0142B8  58 F0        1262  	PUSH R0 
0142BA  58 F1        1263  	PUSH R1 
0142BC               1265  L332: 
0142BC               1267  L333: 
0142BC               1269  L334: 
0142BC  68 10 00 00  1270  	MOV DS0,#@(_gflag) 
0142C0  88 F0 6F 18  1271  	MOV R0,DS0:(_gflag) 
0142C4  74 F0 04 00  1272  	AND R0,#1024 
0142C8  56 00        1273  	CMP R0,#0 
0142CA  AC 02 42 FE  1274  	AJMP IF_NE,L329 
0142CE               1276  L335: 
0142CE               1278  L336: 
0142CE               1280  L337: 
0142CE  68 F1 48 EC  1281  	MOV R1,#(L331) 
0142D2  68 F0 00 01  1282  	MOV R0,#^(L331) 
0142D6  58 F1        1283  	PUSH R1 
0142D8  58 F0        1284  	PUSH R0 
0142DA               1285  .if KERNEL1_5 = 1
+                    1286  	CRIT #1
+                    1287  .endif
0142DA  BD 01 3C F4  1288  	SCALL _SendString 
0142DE  50 F4        1289  	ADD SP,#4 
0142E0               1291  L338: 
0142E0  48 08        1292  	MOV R0,#8 
0142E2  58 F0        1293  	PUSH R0 
0142E4               1294  .if KERNEL1_5 = 1
+                    1295  	CRIT #1
+                    1296  .endif
0142E4  BD 01 14 4C  1297  	SCALL _SPIF_Set_Clock 
0142E8  50 F2        1298  	ADD SP,#2 
0142EA               1300  L339: 
+                    1301  
0142EA  FC 40        1302           BCLR MODCON.12 
0142EC  BF 00 00 2D  1303           REP #45 
0142F0  C7 00        1304     		NOP 
+                    1305        
0142F2               1307  L340: 
0142F2  68 F0 04 00  1308  	MOV R0,#1024 
0142F6  68 10 00 00  1309  	MOV DS0,#@(_gflag) 
0142FA  B5 F0 6F 18  1310  	OR DS0:(_gflag),R0 
0142FE               1312  L341: 
0142FE               1314  L342: 
0142FE               1315  L329: 
0142FE               1317  L343: 
0142FE               1319  L344: 
0142FE               1320  L328: 
0142FE  38 1F        1321  	POP R1 
014300  38 0F        1322  	POP R0 
014302               1323  	UNLINK_MACRO
014302  2F 00        1323  UNLINK 
+                    1323  
014304               1324  .if KERNEL1_5 = 1
+                    1325  	CRIT #1
+                    1326  .endif
014304  C6 20        1327  	RETS 
+                    1329  
+                    1330  .area _$clkup_time(SYSTEM_CODE,REL) 
+B 00 16
01420E               1331  _clkup_time:: 
01420E  2E 00        1334  	LINK #0 
014210  58 F0        1335  	PUSH R0 
014212  58 F1        1336  	PUSH R1 
014214               1338  L348: 
014214               1340  L349: 
014214  78 0B 00 06  1341  	MOV R0,[FP+#(6)] 
014218  6B 1B 00 06  1342  	MOVB [FP+#(6)],Rb1 
01421C               1344  L350: 
01421C               1345  .if KERNEL1_5 = 1
+                    1346  	CRIT #1
+                    1347  .endif
01421C  BD 01 3F A2  1348  	SCALL _SysClkUpgrade 
014220               1350  L351: 
014220  79 1B 00 06  1351  	MOVB Rb1,[FP+#(6)] 
014224  19 01        1352  	MOVZE R0,Rb1 
014226  56 00        1353  	CMP R0,#0 
014228  AC 01 42 4A  1354  	AJMP IF_EQ,L346 
01422C               1356  L352: 
01422C               1358  L353: 
01422C               1360  L354: 
01422C               1361  .if KERNEL1_5 = 1
+                    1362  	CRIT #1
+                    1363  .endif
01422C  BD 01 4A F6  1364  	SCALL _timer_get_time 
014230  70 F1 07 D0  1365  	ADD R1,#2000 
014234  51 00        1366  	ADDC R0,#0 
014236  50 11        1367  	ADD R1,#1 
014238  51 00        1368  	ADDC R0,#0 
01423A               1369  	SAVE4$memory _g_system_clk_timer
01423A  68 10 00 00  1369  MOV DS0,#@(_g_system_clk_timer) 
01423E               1369  .if KERNEL1_E = 1
+                    1369  NOP
+                    1369  .endif
01423E  A8 F0 07 38  1369  MOV DS0:(_g_system_clk_timer),R0 
014242  A8 F1 07 3A  1369  MOV DS0:(_g_system_clk_timer+2),R1 
+                    1369  
014246               1371  L355: 
014246               1373  L356: 
014246  AC 00 42 5A  1374  	AJMP #0,L347 
01424A               1375  L346: 
01424A               1377  L357: 
01424A               1379  L358: 
01424A               1381  L359: 
01424A  48 10        1382  	MOV R1,#0 
01424C  48 00        1383  	MOV R0,#0 
01424E               1384  	SAVE4$memory _g_system_clk_timer
01424E  68 10 00 00  1384  MOV DS0,#@(_g_system_clk_timer) 
014252               1384  .if KERNEL1_E = 1
+                    1384  NOP
+                    1384  .endif
014252  A8 F0 07 38  1384  MOV DS0:(_g_system_clk_timer),R0 
014256  A8 F1 07 3A  1384  MOV DS0:(_g_system_clk_timer+2),R1 
+                    1384  
01425A               1386  L360: 
01425A               1388  L361: 
01425A               1389  L347: 
01425A               1391  L362: 
01425A               1393  L363: 
01425A               1394  L345: 
01425A  38 1F        1395  	POP R1 
01425C  38 0F        1396  	POP R0 
01425E               1397  	UNLINK_MACRO
01425E  2F 00        1397  UNLINK 
+                    1397  
014260               1398  .if KERNEL1_5 = 1
+                    1399  	CRIT #1
+                    1400  .endif
014260  C6 20        1401  	RETS 
+                    1403  
+                    1404  .area _$time3_init(SYSTEM_TIMER3_INIT_CODE,REL) 
+B 00 17
01443E               1405  _time3_init:: 
01443E  2E 00        1407  	LINK #0 
014440  58 F0        1408  	PUSH R0 
014442  58 F1        1409  	PUSH R1 
014444               1411  L365: 
014444               1413  L366: 
014444               1415  L367: 
014444  68 F1 38 9C  1416  	MOV R1,#(_TIMER0_ISR) 
014448  68 F0 00 01  1417  	MOV R0,#^(_TIMER0_ISR) 
01444C  58 F1        1418  	PUSH R1 
01444E  58 F0        1419  	PUSH R0 
014450  68 F0 00 16  1420  	MOV R0,#22 
014454  58 F0        1421  	PUSH R0 
014456               1422  .if KERNEL1_5 = 1
+                    1423  	CRIT #1
+                    1424  .endif
014456  BD 03 C4 8A  1425  	SCALL _SetVector 
01445A  50 F6        1426  	ADD SP,#6 
01445C               1428  L368: 
01445C  68 F0 D0 05  1429  	MOV R0,#0xd005 
014460  AA F0 F2 44  1430  	MOVX _TMR3CR,R0 
014464               1432  L369: 
014464  68 F0 02 EE  1433  	MOV R0,#750 
014468  AA F0 F2 48  1434  	MOVX _TM3PRD,R0 
01446C               1436  L370: 
01446C  48 01        1437  	MOV R0,#1 
01446E  AA F0 F2 A6  1438  	MOVX _TM3ICR,R0 
014472               1440  L371: 
014472  48 10        1441  	MOV R1,#0 
014474  48 00        1442  	MOV R0,#0 
014476               1443  	SAVE4$memory _g_timer_tick
014476  68 10 00 00  1443  MOV DS0,#@(_g_timer_tick) 
01447A               1443  .if KERNEL1_E = 1
+                    1443  NOP
+                    1443  .endif
01447A  A8 F0 07 34  1443  MOV DS0:(_g_timer_tick),R0 
01447E  A8 F1 07 36  1443  MOV DS0:(_g_timer_tick+2),R1 
+                    1443  
014482               1445  L372: 
014482               1447  L373: 
014482               1448  L364: 
014482  38 1F        1449  	POP R1 
014484  38 0F        1450  	POP R0 
014486               1451  	UNLINK_MACRO
014486  2F 00        1451  UNLINK 
+                    1451  
014488               1452  .if KERNEL1_5 = 1
+                    1453  	CRIT #1
+                    1454  .endif
014488  C6 20        1455  	RETS 
+                    1457  
+                    1458  .area _$System_Timer3_Init(SYSTEM_TIMER3_INIT_CODE,REL) 
+B 00 18
012DF6               1459  _System_Timer3_Init:: 
012DF6  2E 00        1461  	LINK #0 
012DF8  58 F0        1462  	PUSH R0 
012DFA  58 F1        1463  	PUSH R1 
012DFC               1465  L375: 
012DFC               1467  L376: 
012DFC               1469  L377: 
012DFC               1470  .if KERNEL1_5 = 1
+                    1471  	CRIT #1
+                    1472  .endif
012DFC  BD 01 44 3E  1473  	SCALL _time3_init 
012E00               1475  L378: 
+                    1476  	
012E00  7C 59 F0 40  1477  	BMOV R0.0,0x59.4 
012E04  54 01        1478  	AND R0,#1 
012E06  68 10 00 00  1479  	MOV DS0,#@(_gflag) 
012E0A  88 F1 6F 18  1480  	MOV R1,DS0:(_gflag) 
012E0E  74 F1 FF BF  1481  	AND R1,#0xffbf 
012E12  54 01        1482  	AND R0,#1 
012E14  4C 06        1483  	SL R0,#6 
012E16  74 F0 00 40  1484  	AND R0,#64 
012E1A  15 10        1485  	OR R1,R0 
012E1C  68 10 00 00  1486  	MOV DS0,#@_gflag 
012E20               1487  .if KERNEL1_E = 1
+                    1488  	NOP
+                    1489  .endif
012E20  A8 F1 6F 18  1490  	MOV DS0:_gflag,R1 
012E24               1492  L379: 
012E24  49 30        1493  	MOVB Rb3,#0 
012E26  68 10 00 00  1494  	MOV DS0,#@_battery_count 
012E2A               1495  .if KERNEL1_E = 1
+                    1496  	NOP
+                    1497  .endif
012E2A  A9 F3 07 98  1498  	MOVB DS0:_battery_count,Rb3 
012E2E               1500  L380: 
012E2E  49 30        1501  	MOVB Rb3,#0 
012E30  68 10 00 00  1502  	MOV DS0,#@_adc_channel 
012E34               1503  .if KERNEL1_E = 1
+                    1504  	NOP
+                    1505  .endif
012E34  A9 F3 07 9A  1506  	MOVB DS0:_adc_channel,Rb3 
012E38               1508  L381: 
012E38  48 11        1509  	MOV R1,#1 
012E3A  48 00        1510  	MOV R0,#0 
012E3C               1511  	SAVE4$memory _adc_timer
012E3C  68 10 00 00  1511  MOV DS0,#@(_adc_timer) 
012E40               1511  .if KERNEL1_E = 1
+                    1511  NOP
+                    1511  .endif
012E40  A8 F0 07 3C  1511  MOV DS0:(_adc_timer),R0 
012E44  A8 F1 07 3E  1511  MOV DS0:(_adc_timer+2),R1 
+                    1511  
012E48               1513  L382: 
012E48  48 10        1514  	MOV R1,#0 
012E4A  48 00        1515  	MOV R0,#0 
012E4C  AA F0 06 D4  1516  	MOVX _sys_led_timer,R0 
012E50  AA F1 06 D6  1517  	MOVX _sys_led_timer+2,R1 
012E54               1519  L383: 
012E54               1520  .if KERNEL1_5 = 1
+                    1521  	CRIT #1
+                    1522  .endif
012E54  BD 01 4A F6  1523  	SCALL _timer_get_time 
012E58  70 F1 00 32  1524  	ADD R1,#50 
012E5C  51 00        1525  	ADDC R0,#0 
012E5E  50 11        1526  	ADD R1,#1 
012E60  51 00        1527  	ADDC R0,#0 
012E62  AA F0 06 D4  1528  	MOVX _sys_led_timer,R0 
012E66  AA F1 06 D6  1529  	MOVX _sys_led_timer+2,R1 
012E6A               1531  L384: 
012E6A  49 10        1532  	MOVB Rb1,#0 
012E6C  68 10 00 00  1533  	MOV DS0,#@_flag_tishi 
012E70               1534  .if KERNEL1_E = 1
+                    1535  	NOP
+                    1536  .endif
012E70  A9 F1 07 94  1537  	MOVB DS0:_flag_tishi,Rb1 
012E74               1539  L385: 
012E74  48 10        1540  	MOV R1,#0 
012E76  48 00        1541  	MOV R0,#0 
012E78  AA F0 06 E0  1542  	MOVX _op_close_timer,R0 
012E7C  AA F1 06 E2  1543  	MOVX _op_close_timer+2,R1 
012E80               1545  L386: 
012E80  48 10        1546  	MOV R1,#0 
012E82  48 00        1547  	MOV R0,#0 
012E84  AA F0 06 DC  1548  	MOVX _rec_led_timer,R0 
012E88  AA F1 06 DE  1549  	MOVX _rec_led_timer+2,R1 
012E8C               1551  L387: 
012E8C               1552  .if KERNEL1_5 = 1
+                    1553  	CRIT #1
+                    1554  .endif
012E8C  BD 01 4A F6  1555  	SCALL _timer_get_time 
012E90  70 F1 00 19  1556  	ADD R1,#25 
012E94  51 00        1557  	ADDC R0,#0 
012E96  50 11        1558  	ADD R1,#1 
012E98  51 00        1559  	ADDC R0,#0 
012E9A  AA F0 06 DC  1560  	MOVX _rec_led_timer,R0 
012E9E  AA F1 06 DE  1561  	MOVX _rec_led_timer+2,R1 
012EA2               1563  L388: 
012EA2  49 11        1564  	MOVB Rb1,#1 
012EA4  68 10 00 00  1565  	MOV DS0,#@_flag_tishi 
012EA8               1566  .if KERNEL1_E = 1
+                    1567  	NOP
+                    1568  .endif
012EA8  A9 F1 07 94  1569  	MOVB DS0:_flag_tishi,Rb1 
012EAC               1571  L389: 
012EAC  48 00        1572  	MOV R0,#0 
012EAE  68 10 00 00  1573  	MOV DS0,#@_sleep_mode_count 
012EB2               1574  .if KERNEL1_E = 1
+                    1575  	NOP
+                    1576  .endif
012EB2  A8 F0 07 8A  1577  	MOV DS0:_sleep_mode_count,R0 
012EB6               1579  L390: 
012EB6  48 10        1580  	MOV R1,#0 
012EB8  48 00        1581  	MOV R0,#0 
012EBA               1582  	SAVE4$memory _sleep_mode_timer
012EBA  68 10 00 00  1582  MOV DS0,#@(_sleep_mode_timer) 
012EBE               1582  .if KERNEL1_E = 1
+                    1582  NOP
+                    1582  .endif
012EBE  A8 F0 07 20  1582  MOV DS0:(_sleep_mode_timer),R0 
012EC2  A8 F1 07 22  1582  MOV DS0:(_sleep_mode_timer+2),R1 
+                    1582  
012EC6               1584  L391: 
012EC6               1586  L392: 
012EC6               1587  L374: 
012EC6  38 1F        1588  	POP R1 
012EC8  38 0F        1589  	POP R0 
012ECA               1590  	UNLINK_MACRO
012ECA  2F 00        1590  UNLINK 
+                    1590  
012ECC               1591  .if KERNEL1_5 = 1
+                    1592  	CRIT #1
+                    1593  .endif
012ECC  C6 20        1594  	RETS 
+                    1596  
+                    1597  .area _$BatteryDetect(BATTERY_CODE,REL) 
+B 00 19
012C36               1598  _BatteryDetect:: 
012C36  2E 02        1600  	LINK #2 
012C38  58 F1        1601  	PUSH R1 
012C3A  58 F2        1602  	PUSH R2 
012C3C  58 F3        1603  	PUSH R3 
012C3E               1605  L401: 
012C3E               1607  L402: 
012C3E               1611  L403: 
012C3E  68 10 00 00  1612  	MOV DS0,#@(_adc2_value) 
012C42  88 F0 6F F6  1613  	MOV R0,DS0:(_adc2_value) 
012C46  76 F0 00 64  1614  	CMP R0,#100 
012C4A  AC 0C 2C 54  1615  	AJMP IF_ULE,L394 
012C4E               1617  L404: 
012C4E  48 00        1618  	MOV R0,#0 
012C50  AC 00 2D 12  1619  	AJMP #0,L393 
012C54               1620  L394: 
012C54               1622  L405: 
012C54  68 F1 00 64  1623  	MOV R1,#100 
012C58  48 00        1624  	MOV R0,#0 
012C5A  68 10 00 00  1625  	MOV DS0,#@_adc0_value 
012C5E  88 F3 6F F4  1626  	MOV R3,DS0:_adc0_value 
012C62  48 20        1627  	MOV R2,#0 
012C64               1628  	MUL$ulong R0
012C64  58 F3        1628  PUSH R3 
012C66  58 F2        1628  PUSH R2 
012C68  58 F1        1628  PUSH R1 
012C6A  58 F0        1628  PUSH R0 
012C6C               1628  .if KERNEL1_5 = 1
+                    1628  CRIT #1
+                    1628  .endif
012C6C  BD 01 01 64  1628  SCALL __MULulong 
012C70  50 F8        1628  ADD SP,#8 
+                    1628  
012C72  68 10 00 00  1629  	MOV DS0,#@_adc7_value 
012C76  88 F3 6F FA  1630  	MOV R3,DS0:_adc7_value 
012C7A  48 20        1631  	MOV R2,#0 
012C7C               1632  	DIV$ulong R0
012C7C  58 F3        1632  PUSH R3 
012C7E  58 F2        1632  PUSH R2 
012C80  58 F1        1632  PUSH R1 
012C82  58 F0        1632  PUSH R0 
012C84               1632  .if KERNEL1_5 = 1
+                    1632  CRIT #1
+                    1632  .endif
012C84  BD 01 01 6C  1632  SCALL __DIVulong 
012C88  50 F8        1632  ADD SP,#8 
+                    1632  
012C8A  08 01        1633  	MOV R0,R1 
012C8C  6A 0B FF FE  1634  	MOV [FP+#(-2)],R0 
012C90               1636  L406: 
012C90  78 0B FF FE  1637  	MOV R0,[FP+#(-2)] 
012C94  76 F0 00 59  1638  	CMP R0,#89 
012C98  AC 06 2C FA  1639  	AJMP IF_UGE,L396 
012C9C               1641  L407: 
012C9C               1643  L408: 
012C9C               1645  L409: 
012C9C  68 10 00 00  1646  	MOV DS0,#@_battery_count 
012CA0  99 F0 07 98  1647  	MOVZE R0,DS0:_battery_count 
012CA4  50 01        1648  	ADD R0,#1 
012CA6  68 10 00 00  1649  	MOV DS0,#@_battery_count 
012CAA               1650  .if KERNEL1_E = 1
+                    1651  	NOP
+                    1652  .endif
012CAA  A9 F1 07 98  1653  	MOVB DS0:_battery_count,Rb1 
012CAE               1655  L410: 
012CAE  68 10 00 00  1656  	MOV DS0,#@_battery_count 
012CB2  99 F0 07 98  1657  	MOVZE R0,DS0:_battery_count 
012CB6  76 F0 00 14  1658  	CMP R0,#20 
012CBA  AC 09 2D 10  1659  	AJMP IF_SL,L397 
012CBE               1661  L411: 
012CBE               1663  L412: 
012CBE               1665  L413: 
012CBE  68 F1 4C 98  1666  	MOV R1,#(L400) 
012CC2  68 F0 00 01  1667  	MOV R0,#^(L400) 
012CC6  58 F1        1668  	PUSH R1 
012CC8  58 F0        1669  	PUSH R0 
012CCA               1670  .if KERNEL1_5 = 1
+                    1671  	CRIT #1
+                    1672  .endif
012CCA  BD 01 3C F4  1673  	SCALL _SendString 
012CCE  50 F4        1674  	ADD SP,#4 
012CD0               1676  L414: 
012CD0  48 00        1677  	MOV R0,#0 
012CD2  58 F0        1678  	PUSH R0 
012CD4               1679  .if KERNEL1_5 = 1
+                    1680  	CRIT #1
+                    1681  .endif
012CD4  BD 01 42 0E  1682  	SCALL _clkup_time 
012CD8  50 F2        1683  	ADD SP,#2 
012CDA               1685  L415: 
+                    1686  	
012CDA  E6 57        1687  	BSET 0x57.6 
012CDC               1689  L416: 
+                    1690  	
012CDC  F7 57        1691  	BCLR 0x57.7 
012CDE               1693  L417: 
012CDE  48 10        1694  	MOV R1,#0 
012CE0  48 00        1695  	MOV R0,#0 
012CE2  AA F0 06 D4  1696  	MOVX _sys_led_timer,R0 
012CE6  AA F1 06 D6  1697  	MOVX _sys_led_timer+2,R1 
012CEA               1699  L418: 
012CEA  48 04        1700  	MOV R0,#4 
012CEC  68 10 00 00  1701  	MOV DS0,#@(_gflag) 
012CF0  B5 F0 6F 18  1702  	OR DS0:(_gflag),R0 
012CF4               1704  L419: 
012CF4  48 01        1705  	MOV R0,#1 
012CF6  AC 00 2D 12  1706  	AJMP #0,L393 
012CFA               1708  L420: 
012CFA               1710  L421: 
012CFA               1712  L422: 
012CFA               1714  L423: 
012CFA               1715  L396: 
012CFA               1717  L424: 
012CFA               1719  L425: 
012CFA               1721  L426: 
012CFA  49 10        1722  	MOVB Rb1,#0 
012CFC  68 10 00 00  1723  	MOV DS0,#@_battery_count 
012D00               1724  .if KERNEL1_E = 1
+                    1725  	NOP
+                    1726  .endif
012D00  A9 F1 07 98  1727  	MOVB DS0:_battery_count,Rb1 
012D04               1729  L427: 
012D04  68 F0 FF FB  1730  	MOV R0,#0xfffb 
012D08  68 10 00 00  1731  	MOV DS0,#@(_gflag) 
012D0C  B4 F0 6F 18  1732  	AND DS0:(_gflag),R0 
012D10               1734  L428: 
012D10               1736  L429: 
012D10               1737  L397: 
012D10               1739  L430: 
012D10  48 00        1740  	MOV R0,#0 
012D12               1742  L431: 
012D12               1744  L432: 
012D12               1745  L393: 
012D12  38 3F        1746  	POP R3 
012D14  38 2F        1747  	POP R2 
012D16  38 1F        1748  	POP R1 
012D18               1749  	UNLINK_MACRO
012D18  2F 00        1749  UNLINK 
+                    1749  
012D1A               1750  .if KERNEL1_5 = 1
+                    1751  	CRIT #1
+                    1752  .endif
012D1A  C6 20        1753  	RETS 
+                    1978  
+                    1979  .area _$SYSTEM_C$(ROM,REL) 
+B 00 01
030000               1981  Letext: 
+                    1982  
+                    1983  .area _SYSTEM_DATA$RD$flag_tishi(SYSTEM_DATA,REL,dat) 
+B 00 1A
000794               1984  _flag_tishi:: 
000794               1985  	.ds 1 
+                    1987  
+                    1988  .area _SYSTEM_DATA$RD$sleep_mode_count(SYSTEM_DATA,REL,dat) 
+                    1989  .even 
+B 00 1B
000794               1990  _sleep_mode_count:: 
000794
000794               1990  _sleep_mode_count:: 
000794               1991  	.ds 2 
+                    1993  
+                    1994  .area _SYSTEM_DATA$RD$speaker_vol(SYSTEM_DATA,REL,dat) 
+                    1995  .even 
+B 00 1C
000788               1996  _speaker_vol:: 
000788               1997  	.ds 2 
+                    1999  
+                    2000  .area _SYSTEM_DATA$RD$adc_timer(SYSTEM_DATA,REL,dat) 
+                    2001  .even 
+B 00 1D
00073C               2002  _adc_timer:: 
00073C               2003  	.ds 4 
+                    2005  
+                    2006  .area _SYSTEM_DATA$RD$adc_channel(SYSTEM_DATA,REL,dat) 
+B 00 1E
00079A               2007  _adc_channel:: 
00079A               2008  	.ds 1 
+                    2010  
+                    2011  .area _SYSTEM_DATA$RD$led_timer(SYSTEM_DATA,REL,dat) 
+                    2012  .even 
+B 00 1F
000730               2013  _led_timer:: 
000730               2014  	.ds 4 
+                    2016  
+                    2017  
+                    2018  
+                    2019  .area _XRAM$RD$g_autopoweroff_timer(XRAM,REL,dat) 
+                    2020  .even 
+B 00 20
0006E4               2021  _g_autopoweroff_timer:: 
0006E4               2022  	.ds 4 
+                    2024  
+                    2025  .area _XRAM$RD$g_b_poweroff_activated(XRAM,REL,dat) 
+B 00 21
00076A               2026  _g_b_poweroff_activated:: 
00076A               2027  	.ds 1 
+                    2029  
+                    2030  .area _XRAM$RD$g_b_autopoweroff_forbidden(XRAM,REL,dat) 
+B 00 22
00076C               2031  _g_b_autopoweroff_forbidden:: 
00076C               2032  	.ds 1 
+                    2034  
+                    2035  .area _XRAM$RD$Buf(XRAM,REL,dat) 
+B 00 23
000400               2036  _Buf:: 
000400               2037  	.ds 512 
+                    2040  
+                    2041  .area _XRAM$RD$Length(XRAM,REL,dat) 
+                    2042  .even 
+B 00 24
0006F4               2043  _Length:: 
0006F4               2044  	.ds 4 
+                    2046  
+                    2047  .area _XRAM$RD$Start_Sector(XRAM,REL,dat) 
+                    2048  .even 
+B 00 25
0006F0               2049  _Start_Sector:: 
0006F0               2050  	.ds 4 
+                    2052  
+                    2053  .area _SYSTEM_DATA$RD$gOidXOR_Key(SYSTEM_DATA,REL,dat) 
+B 00 26
000790               2054  _gOidXOR_Key:: 
000790               2055  	.ds 1 
+                    2057  
+                    2058  .area _SYSTEM_DATA$RD$play_file_size(SYSTEM_DATA,REL,dat) 
+                    2059  .even 
+B 00 27
000728               2060  _play_file_size:: 
000728               2061  	.ds 4 
+                    2063  
+                    2064  .area _SYSTEM_DATA$RD$mp3_begin_add(SYSTEM_DATA,REL,dat) 
+                    2065  .even 
+B 00 28
00072C               2066  _mp3_begin_add:: 
00072C               2067  	.ds 4 
+                    2069  
+                    2070  .area _SYSTEM_DATA$RD$ADPCM_File(SYSTEM_DATA,REL,dat) 
+                    2071  .even 
+B 00 29
0007A0               2072  _ADPCM_File:: 
0007A0               2073  	.ds 2 
+                    2075  
+                    2076  .area _SYSTEM_DATA$RD$flag_creat(SYSTEM_DATA,REL,dat) 
+B 00 2A
000796               2077  _flag_creat:: 
000796               2078  	.ds 1 
+                    2080  
+                    2081  .area _SYSTEM_DATA$RD$OID_PLAY(SYSTEM_DATA,REL,dat) 
+B 00 2B
00079C               2082  _OID_PLAY:: 
00079C               2083  	.ds 1 
+                    2085  
+                    2086  .area _SYSTEM_DATA$RD$low_num(SYSTEM_DATA,REL,dat) 
+                    2087  .even 
+B 00 2C
00078C               2088  _low_num:: 
00078C               2089  	.ds 2 
+                    2091  
+                    2092  .area _SYSTEM_DATA$RD$heigh_num(SYSTEM_DATA,REL,dat) 
+                    2093  .even 
+B 00 2D
00078E               2094  _heigh_num:: 
00078E               2095  	.ds 2 
+                    2097  
+                    2098  .area _SYSTEM_DATA$RD$system_check_timer(SYSTEM_DATA,REL,dat) 
+                    2099  .even 
+B 00 2E
00071C               2100  _system_check_timer:: 
00071C               2101  	.ds 4 
+                    2103  
+                    2104  .area _SYSTEM_DATA$RD$DAC_Out(SYSTEM_DATA,REL,dat) 
+                    2105  .even 
+B 00 2F
00079E               2106  _DAC_Out:: 
00079E               2107  	.ds 2 
+                    2109  
+                    2110  .area _SYSTEM_DATA$RD$flag_wav_play(SYSTEM_DATA,REL,dat) 
+B 00 30
000792               2111  _flag_wav_play:: 
000792               2112  	.ds 1 
+                    2114  
+                    2115  .area _SYSTEM_DATA$RD$battery_count(SYSTEM_DATA,REL,dat) 
+B 00 31
000798               2116  _battery_count:: 
000798               2117  	.ds 1 
+                    2119  
+                    2120  .area _SYSTEM_DATA$RD$vol_idx_bak(SYSTEM_DATA,REL,dat) 
+                    2121  .even 
+B 00 32
000786               2122  _vol_idx_bak:: 
000786               2123  	.ds 2 
+                    2125  
+                    2126  .area _SYSTEM_DATA$RD$g_timer_tick(SYSTEM_DATA,REL,dat) 
+                    2127  .even 
+B 00 33
000734               2128  _g_timer_tick:: 
000734               2129  	.ds 4 
+                    2131  
+                    2132  .area _SYSTEM_DATA$RD$g_system_clk_timer(SYSTEM_DATA,REL,dat) 
+                    2133  .even 
+B 00 34
000738               2134  _g_system_clk_timer:: 
000738               2135  	.ds 4 
+                    2137  
+                    2138  .area _SYSTEM_DATA$RD$sleep_mode_timer(SYSTEM_DATA,REL,dat) 
+                    2139  .even 
+B 00 35
000720               2140  _sleep_mode_timer:: 
000720               2141  	.ds 4 
+                    2143  
+                    2144  .area _SYSTEM_DATA$RD$qieqing_timer(SYSTEM_DATA,REL,dat) 
+                    2145  .even 
+B 00 36
000724               2146  _qieqing_timer:: 
000724               2147  	.ds 4 
+                    2149  
+                    2150  .area _XRAM$RD$op_close_timer(XRAM,REL,dat) 
+                    2151  .even 
+B 00 37
0006E0               2152  _op_close_timer:: 
0006E0               2153  	.ds 4 
+                    2155  
+                    2156  .area _XRAM$RD$sys_led_timer(XRAM,REL,dat) 
+                    2157  .even 
+B 00 38
0006D4               2158  _sys_led_timer:: 
0006D4               2159  	.ds 4 
+                    2161  
+                    2162  .area _XRAM$RD$rec_led_timer(XRAM,REL,dat) 
+                    2163  .even 
+B 00 39
0006DC               2164  _rec_led_timer:: 
0006DC               2165  	.ds 4 
+                    2167  
+                    2168  
+                    2169  
+                    2170  
+                    2171  
+                    2172  
+                    2173  
+                    2174  
+                    2175  
+                    2176  
+                    2177  
+                    2178  
+                    2179  
+                    2180  
+                    2181  
+                    2182  
+                    2183  
+                    2184  
+                    2185  
+                    2186  
+                    2187  .area _BATTERY_CODE$RD$SYSTEM_C$(BATTERY_CODE,REL) 
+B 00 3A
014C98               2188  L400: 
014C98  0D           2189  	.db 13 
014C99  0A           2190  	.db 10 
+                    2191  	
014C9A  6C 6F 77 20  2192  	.db 108,111,119,32,98,97,116,116,101,114,121,33,0 
014C9E  62 61 74 74
014CA2  65 72 79 21
014CA6  00
+                    2193  
+                    2194  .area _SYSTEM_CODE$RD$SYSTEM_C$(SYSTEM_CODE,REL) 
+B 00 3B
0148EC               2195  L331: 
0148EC  0D           2196  	.db 13 
0148ED  0A           2197  	.db 10 
+                    2198  	
0148EE  73 79 73 20  2199  	.db 115,121,115,32,108,111,119,33,0 
0148F2  6C 6F 77 21
0148F6  00
+                    2200  
+                    2201  .area _SYSTEM_CODE$RD$SYSTEM_C$(SYSTEM_CODE,REL) 
+B 00 3B
0148F8               2202  L313: 
0148F8  0D           2203  	.db 13 
0148F9  0A           2204  	.db 10 
+                    2205  	
0148FA  73 79 73 20  2206  	.db 115,121,115,32,117,112,33,0 
0148FE  75 70 21 00
+                    2207  
+                    2208  .area _SYSTEM_CODE$RD$SYSTEM_C$(SYSTEM_CODE,REL) 
+B 00 3B
014902               2209  L278: 
014902  0D           2210  	.db 13 
014903  0A           2211  	.db 10 
+                    2212  	
014904  66 69 6E 64  2213  	.db 102,105,110,100,32,117,115,98,33,0 
014908  20 75 73 62
01490C  21 00
+                    2214  
+                    2215  .area _SYSTEM_CODE$RD$SYSTEM_C$(SYSTEM_CODE,REL) 
+B 00 3B
01490E               2216  L45: 
01490E  0D           2217  	.db 13 
01490F  0A           2218  	.db 10 
+                    2219  	
014910  73 79 73 74  2220  	.db 115,121,115,116,101,109,32,114,101,115,101,116,33,0 
014914  65 6D 20 72
014918  65 73 65 74
01491C  21 00
+                    2221  
+                    2222  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+  8 L100  000056 R
+  9 L101  0000FE R
+  9 L102  000028 R
+  9 L104  00007C R
+  9 L106  0000A4 R
+  9 L108  0000CC R
+  9 L110  0000F4 R
+  9 L112  000006 R
+  9 L113  000006 R
+  9 L114  000006 R
+  9 L115  000024 R
+  9 L116  000024 R
+  9 L117  000024 R
+  9 L118  000028 R
+  9 L119  000028 R
+  9 L120  000028 R
+  9 L121  000040 R
+  9 L122  000054 R
+  9 L123  000062 R
+  9 L124  000062 R
+  9 L125  000062 R
+  9 L126  00006E R
+  9 L127  000078 R
+  9 L128  00007C R
+  9 L129  00007C R
+  9 L130  00007C R
+  9 L131  00008A R
+  9 L132  00008A R
+  9 L133  00008A R
+  9 L134  000096 R
+  9 L135  0000A0 R
+  9 L136  0000A4 R
+  9 L137  0000A4 R
+  9 L138  0000A4 R
+  9 L139  0000B2 R
+  9 L140  0000B2 R
+  9 L141  0000B2 R
+  9 L142  0000BE R
+  9 L143  0000C8 R
+  9 L144  0000CC R
+  9 L145  0000CC R
+  9 L146  0000CC R
+  9 L147  0000DA R
+  9 L148  0000DA R
+  9 L149  0000DA R
+  9 L150  0000E6 R
+  9 L151  0000F0 R
+  9 L152  0000F4 R
+  9 L153  0000F4 R
+  9 L154  0000F4 R
+  9 L155  0000FE R
+  9 L156  0000FE R
+  A L157  000046 R
+  A L158  000046 R
+  A L160  000006 R
+  A L161  000006 R
+  A L162  000006 R
+  A L163  000038 R
+  A L164  000038 R
+  A L165  000038 R
+  A L166  000044 R
+  A L167  000046 R
+  A L168  000046 R
+  A L169  000046 R
+  A L170  000046 R
+  B L171  000050 R
+  B L172  000050 R
+  B L174  000006 R
+  B L175  000006 R
+  B L176  000006 R
+  B L177  00003C R
+  B L178  00003C R
+  B L179  00003C R
+  B L180  00004C R
+  B L181  000050 R
+  B L182  000050 R
+  B L183  000050 R
+  B L184  000050 R
+  C L185  000002 R
+  C L186  000002 R
+  C L187  000002 R
+  C L188  000002 R
+  C L189  000002 R
+  C L190  000002 R
+  D L191  000002 R
+  D L192  000002 R
+  D L193  000002 R
+  D L194  000002 R
+  D L195  000002 R
+  D L196  000002 R
+  E L197  000028 R
+  E L198  000028 R
+  E L200  000006 R
+  E L201  000006 R
+  E L202  000006 R
+  E L203  00001E R
+  E L204  00001E R
+  E L205  00001E R
+  E L206  000028 R
+  E L207  000028 R
+  E L208  000028 R
+  E L209  000028 R
+  F L210  00007C R
+  F L211  000054 R
+  F L212  00007C R
+  F L213  000072 R
+  F L214  00007C R
+  F L215  000006 R
+  F L216  000006 R
+  F L217  00000E R
+  F L218  000032 R
+  F L219  000044 R
+  F L220  000044 R
+  F L221  000044 R
+  F L222  000046 R
+  F L223  000050 R
+  F L224  000050 R
+  F L225  000054 R
+  F L226  000054 R
+  F L227  000054 R
+  F L228  000056 R
+  F L229  000064 R
+  F L230  000064 R
+  F L231  000064 R
+  F L232  00006E R
+  F L233  00006E R
+  F L234  000072 R
+  F L235  000072 R
+  F L236  000072 R
+  F L237  00007C R
+  F L238  00007C R
+  F L239  00007C R
+  F L240  00007C R
+  F L241  00007C R
+  F L242  00007C R
+ 10 L243  0000A4 R
+ 10 L244  0000A4 R
+ 10 L246  000068 R
+ 10 L247  000096 R
+ 10 L248  00000A R
+ 10 L249  00000A R
+ 10 L250  000012 R
+ 10 L251  000016 R
+ 10 L252  00002A R
+ 10 L253  00002A R
+ 10 L254  00002A R
+ 10 L255  00003A R
+ 10 L256  00003E R
+ 10 L257  000042 R
+ 10 L258  000054 R
+ 10 L259  000054 R
+ 10 L260  000054 R
+ 10 L261  000064 R
+ 10 L262  000064 R
+ 10 L263  000068 R
+ 10 L264  000068 R
+ 10 L265  000068 R
+ 10 L266  000096 R
+ 10 L267  000096 R
+ 10 L268  000096 R
+ 10 L269  0000A4 R
+ 10 L270  0000A4 R
+ 10 L271  0000A4 R
+ 10 L272  0000A4 R
+ 11 L273  00005C R
+ 11 L274  00001C R
+ 11 L276  00005A R
+ 3B L278  000016 R
+ 11 L279  000004 R
+ 11 L280  000004 R
+ 11 L281  000004 R
+ 11 L282  000016 R
+ 11 L283  00001C R
+ 11 L284  00002C R
+ 11 L285  00002C R
+ 11 L286  00002C R
+ 11 L287  000036 R
+ 11 L288  000048 R
+ 11 L289  000054 R
+ 11 L290  00005A R
+ 11 L291  00005A R
+ 11 L292  00005A R
+ 11 L293  00005C R
+ 11 L294  00005C R
+ 12 L295  00000A R
+ 12 L296  000004 R
+ 12 L297  000004 R
+ 12 L298  000004 R
+ 12 L299  00000A R
+ 12 L300  00000A R
+ 13 L301  00003A R
+ 13 L302  000006 R
+ 13 L303  000006 R
+ 13 L304  000006 R
+ 13 L305  00000C R
+ 13 L306  000022 R
+ 13 L307  00002E R
+ 13 L308  00003A R
+ 13 L309  00003A R
+ 14 L310  000054 R
+ 14 L311  000054 R
+ 3B L313  00000C R
+ 14 L314  000006 R
+ 14 L315  000006 R
+ 14 L316  000006 R
+ 14 L317  000018 R
+ 14 L318  000018 R
+ 14 L319  000018 R
+ 14 L320  000022 R
+ 14 L321  00002C R
+ 14 L322  000036 R
+ 14 L323  000042 R
+ 14 L324  000054 R
+ 14 L325  000054 R
+ 14 L326  000054 R
+ 14 L327  000054 R
+ 15 L328  000048 R
+ 15 L329  000048 R
+ 3B L331  000000 R
+ 15 L332  000006 R
+ 15 L333  000006 R
+ 15 L334  000006 R
+ 15 L335  000018 R
+ 15 L336  000018 R
+ 15 L337  000018 R
+ 15 L338  00002A R
+ 15 L339  000034 R
+ 15 L340  00003C R
+ 15 L341  000048 R
+ 15 L342  000048 R
+ 15 L343  000048 R
+ 15 L344  000048 R
+ 16 L345  00004C R
+ 16 L346  00003C R
+ 16 L347  00004C R
+ 16 L348  000006 R
+ 16 L349  000006 R
+ 16 L350  00000E R
+ 16 L351  000012 R
+ 16 L352  00001E R
+ 16 L353  00001E R
+ 16 L354  00001E R
+ 16 L355  000038 R
+ 16 L356  000038 R
+ 16 L357  00003C R
+ 16 L358  00003C R
+ 16 L359  00003C R
+ 16 L360  00004C R
+ 16 L361  00004C R
+ 16 L362  00004C R
+ 16 L363  00004C R
+ 17 L364  000044 R
+ 17 L365  000006 R
+ 17 L366  000006 R
+ 17 L367  000006 R
+ 17 L368  00001E R
+ 17 L369  000026 R
+ 17 L370  00002E R
+ 17 L371  000034 R
+ 17 L372  000044 R
+ 17 L373  000044 R
+ 18 L374  0000D0 R
+ 18 L375  000006 R
+ 18 L376  000006 R
+ 18 L377  000006 R
+ 18 L378  00000A R
+ 18 L379  00002E R
+ 18 L380  000038 R
+ 18 L381  000042 R
+ 18 L382  000052 R
+ 18 L383  00005E R
+ 18 L384  000074 R
+ 18 L385  00007E R
+ 18 L386  00008A R
+ 18 L387  000096 R
+ 18 L388  0000AC R
+ 18 L389  0000B6 R
+ 18 L390  0000C0 R
+ 18 L391  0000D0 R
+ 18 L392  0000D0 R
+ 19 L393  0000DC R
+ 19 L394  00001E R
+ 19 L396  0000C4 R
+ 19 L397  0000DA R
+ 3A L400  000000 R
+ 19 L401  000008 R
+ 19 L402  000008 R
+ 19 L403  000008 R
+ 19 L404  000018 R
+ 19 L405  00001E R
+ 19 L406  00005A R
+ 19 L407  000066 R
+ 19 L408  000066 R
+ 19 L409  000066 R
+ 19 L410  000078 R
+ 19 L411  000088 R
+ 19 L412  000088 R
+ 19 L413  000088 R
+ 19 L414  00009A R
+ 19 L415  0000A4 R
+ 19 L416  0000A6 R
+ 19 L417  0000A8 R
+ 19 L418  0000B4 R
+ 19 L419  0000BE R
+ 19 L420  0000C4 R
+ 19 L421  0000C4 R
+ 19 L422  0000C4 R
+ 19 L423  0000C4 R
+ 19 L424  0000C4 R
+ 19 L425  0000C4 R
+ 19 L426  0000C4 R
+ 19 L427  0000CE R
+ 19 L428  0000DA R
+ 19 L429  0000DA R
+ 19 L430  0000DA R
+ 19 L431  0000DC R
+ 19 L432  0000DC R
+ 3B L45  000022 R
+  4 L46  000026 R
+  4 L47  000026 R
+  4 L49  000006 R
+  4 L50  000006 R
+  4 L51  000006 R
+  4 L52  000018 R
+  4 L53  00001A R
+  4 L54  00001C R
+  4 L55  00001E R
+  4 L56  000026 R
+  4 L57  000026 R
+  4 L58  000026 R
+  4 L59  000026 R
+  4 L60  000026 R
+  4 L61  000026 R
+  4 L62  00002A R
+  4 L63  00002A R
+  5 L64  000048 R
+  5 L65  000044 R
+  5 L66  000044 R
+  5 L67  000044 R
+  5 L68  000048 R
+  5 L69  000048 R
+  6 L70  00001E R
+  6 L71  000002 R
+  6 L72  000002 R
+  6 L73  000002 R
+  6 L74  000016 R
+  6 L75  00001E R
+  6 L76  00001E R
+  7 L77  000024 R
+  7 L78  000022 R
+  7 L80  000008 R
+  7 L81  000008 R
+  7 L82  000008 R
+  7 L83  00001C R
+  7 L84  00001C R
+  7 L85  00001C R
+  7 L86  000022 R
+  7 L87  000022 R
+  7 L88  000022 R
+  7 L89  000022 R
+  7 L90  000022 R
+  7 L91  000024 R
+  7 L92  000024 R
+  7 L93  000024 R
+  7 L94  000024 R
+  8 L95  000056 R
+  8 L96  000046 R
+  8 L97  000046 R
+  8 L98  000046 R
+  8 L99  000056 R
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+ 29 _ADPCM_File  000000 GR
+ 19 _BatteryDetect  000000 GR
+ 23 _Buf  000000 GR
+ 11 _CheckUSB  000000 GR
+    _ClrCirqAndAdjustCpri  ****** GX
+    _DAC_Disable_Speaker  ****** GX
+    _DAC_Enable_HeadPhone  ****** GX
+    _DAC_HeadPhone_Volume  ****** GX
+ 2F _DAC_Out  000000 GR
+    _DAC_Speaker_Volume  ****** GX
+ 13 _Delay_ms  000042 GR
+  5 _Exception  000000 GR
+    _Get_ADCValue  ****** GX
+ 24 _Length  000000 GR
+ 2B _OID_PLAY  000000 GR
+    _RTCWDT  ****** GX
+    _SPIF_Set_Clock  ****** GX
+    _SendString  ****** GX
+    _SetVector  ****** GX
+ 10 _SpeakDetect  000000 GR
+  3 _SpeakerTbl  000000 GR
+ 25 _Start_Sector  000000 GR
+ 15 _SysClkDowngrade  000000 GR
+ 14 _SysClkUpgrade  000000 GR
+    _SystemClock  ****** GX
+ 18 _System_Timer3_Init  000000 GR
+  8 _TIMER0_ISR  000000 GR
+    _TM3ICR  ****** GX
+    _TM3PRD  ****** GX
+    _TMR3CR  ****** GX
+  2 _VolTbl  000000 GR
+    __DIVulong  ****** GX
+    __MULulong  ****** GX
+    _adc0_value  ****** GX
+    _adc2_value  ****** GX
+    _adc3_value  ****** GX
+    _adc7_value  ****** GX
+ 1E _adc_channel  000000 GR
+  9 _adc_get  000000 GR
+ 1D _adc_timer  000000 GR
+ 31 _battery_count  000000 GR
+  B _clk_time_dowith  000000 GR
+ 16 _clkup_time  000000 GR
+ 2A _flag_creat  000000 GR
+ 1A _flag_tishi  000000 GR
+ 30 _flag_wav_play  000000 GR
+ 26 _gOidXOR_Key  000000 GR
+ 20 _g_autopoweroff_timer  000000 GR
+ 22 _g_b_autopoweroff_forbidden  000000 GR
+ 21 _g_b_poweroff_activated  000000 GR
+ 34 _g_system_clk_timer  000000 GR
+ 33 _g_timer_tick  000000 GR
+    _gflag  ****** GX
+ 2D _heigh_num  000000 GR
+  F _inc_volume  000000 GR
+  E _judge_op  000000 GR
+ 1F _led_timer  000000 GR
+ 2C _low_num  000000 GR
+ 28 _mp3_begin_add  000000 GR
+ 37 _op_close_timer  000000 GR
+  A _op_time_dowith  000000 GR
+ 27 _play_file_size  000000 GR
+ 13 _power_authorize_autopoweroff  000000 GR
+ 12 _power_forbid_autopoweroff  000000 GR
+ 36 _qieqing_timer  000000 GR
+ 39 _rec_led_timer  000000 GR
+ 1B _sleep_mode_count  000000 GR
+ 35 _sleep_mode_timer  000000 GR
+ 1C _speaker_vol  000000 GR
+    _sys_flag  ****** GX
+ 38 _sys_led_timer  000000 GR
+ 2E _system_check_timer  000000 GR
+  4 _system_reset  000000 GR
+    _systerm_flag  ****** GX
+ 17 _time3_init  000000 GR
+  7 _timer_check_timeout  000000 GR
+  6 _timer_get_time  000000 GR
+  C _vol_dec  000000 GR
+    _vol_idx  ****** GX
+ 32 _vol_idx_bak  000000 GR
+  D _vol_inc  000000 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$SYSTEM_C$ size    0   flags 0
+   2 _SYSTEM_CODE$RD$VolTbl size    A   flags 0
+   3 _SYSTEM_CODE$RD$SpeakerTbl size    A   flags 0
+   4 _$system_reset size   32   flags 0
+   5 _$Exception size   7A   flags 0
+   6 _$timer_get_time size   22   flags 0
+   7 _$timer_check_timeout size   2E   flags 0
+   8 _$TIMER0_ISR size   8A   flags 0
+   9 _$adc_get size  106   flags 0
+   A _$op_time_dowith size   4E   flags 0
+   B _$clk_time_dowith size   58   flags 0
+   C _$vol_dec size    6   flags 0
+   D _$vol_inc size    6   flags 0
+   E _$judge_op size   30   flags 0
+   F _$inc_volume size   84   flags 0
+  10 _$SpeakDetect size   B0   flags 0
+  11 _$CheckUSB size   62   flags 0
+  12 _$power_forbid_autopoweroff size   10   flags 0
+  13 _$power_authorize_autopoweroff size   64   flags 0
+  14 _$SysClkUpgrade size   5C   flags 0
+  15 _$SysClkDowngrade size   50   flags 0
+  16 _$clkup_time size   54   flags 0
+  17 _$time3_init size   4C   flags 0
+  18 _$System_Timer3_Init size   D8   flags 0
+  19 _$BatteryDetect size   E6   flags 0
+  1A _SYSTEM_DATA$RD$flag_tishi size    2   flags 0
+  1B _SYSTEM_DATA$RD$sleep_mode_count size    2   flags 0
+  1C _SYSTEM_DATA$RD$speaker_vol size    2   flags 0
+  1D _SYSTEM_DATA$RD$adc_timer size    4   flags 0
+  1E _SYSTEM_DATA$RD$adc_channel size    2   flags 0
+  1F _SYSTEM_DATA$RD$led_timer size    4   flags 0
+  20 _XRAM$RD$g_autopoweroff_timer size    4   flags 0
+  21 _XRAM$RD$g_b_poweroff_activated size    2   flags 0
+  22 _XRAM$RD$g_b_autopoweroff_forbidden size    2   flags 0
+  23 _XRAM$RD$Buf size  200   flags 0
+  24 _XRAM$RD$Length size    4   flags 0
+  25 _XRAM$RD$Start_Sector size    4   flags 0
+  26 _SYSTEM_DATA$RD$gOidXOR_Key size    2   flags 0
+  27 _SYSTEM_DATA$RD$play_file_size size    4   flags 0
+  28 _SYSTEM_DATA$RD$mp3_begin_add size    4   flags 0
+  29 _SYSTEM_DATA$RD$ADPCM_File size    2   flags 0
+  2A _SYSTEM_DATA$RD$flag_creat size    2   flags 0
+  2B _SYSTEM_DATA$RD$OID_PLAY size    2   flags 0
+  2C _SYSTEM_DATA$RD$low_num size    2   flags 0
+  2D _SYSTEM_DATA$RD$heigh_num size    2   flags 0
+  2E _SYSTEM_DATA$RD$system_check_timer size    4   flags 0
+  2F _SYSTEM_DATA$RD$DAC_Out size    2   flags 0
+  30 _SYSTEM_DATA$RD$flag_wav_play size    2   flags 0
+  31 _SYSTEM_DATA$RD$battery_count size    2   flags 0
+  32 _SYSTEM_DATA$RD$vol_idx_bak size    2   flags 0
+  33 _SYSTEM_DATA$RD$g_timer_tick size    4   flags 0
+  34 _SYSTEM_DATA$RD$g_system_clk_timer size    4   flags 0
+  35 _SYSTEM_DATA$RD$sleep_mode_timer size    4   flags 0
+  36 _SYSTEM_DATA$RD$qieqing_timer size    4   flags 0
+  37 _XRAM$RD$op_close_timer size    4   flags 0
+  38 _XRAM$RD$sys_led_timer size    4   flags 0
+  39 _XRAM$RD$rec_led_timer size    4   flags 0
+  3A _BATTERY_CODE$RD$SYSTEM_C$ size   10   flags 0
+  3B _SYSTEM_CODE$RD$SYSTEM_C$ size   32   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$USB_MassStorage_c$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                      57  
+                      58  .area _USB_MS_XRAM$RD$lidian_flag(USB_MS_XRAM,REL,dat) 
+B 00 02
00077C                 59  _lidian_flag:: 
00077C                 60  	.ds (_1$_lidian_flag - _0$_lidian_flag) 
+                      61  .area _SGV_INIT_CODE(USB_MS_CODE,REL) 
+                      62  .even 
00077C                 63  .sgvsym _lidian_flag 
00077C                 64  	INIT$global3 _lidian_flag
+B 00 03
00077C  68 F0 00 00    64  MOV R0,#^_lidian_flag 
00077C
00077C  68 F0 00 00    64  MOV R0,#^_lidian_flag 
000780  68 F1 00 00    64  MOV R1,#_lidian_flag 
000784  68 F2 00 00    64  MOV R2,#^ _0$_lidian_flag 
000788  68 F3 00 00    64  MOV R3,# _0$_lidian_flag 
00078C  48 41          64  MOV R4,#( _1$_lidian_flag -  _0$_lidian_flag) 
00078E                 64  .if KERNEL1_5 = 1
+                      64  CRIT #1
+                      64  .endif
00078E  BD 00 00 00    64  SCALL  USB_MS_CODE__INIT$copy 
+                      64  
+                      65  .area _$lidian_flag(USB_MS_CODE,REL) 
+B 00 04
014D5E                 66  _0$_lidian_flag: 
014D5E  00             67  	.db 0x0  
014D5F                 68  _1$_lidian_flag: 
+                      70  
+                      71  .area _$key_down(USB_MS_CODE,REL) 
+B 00 05
0132CE                 73  _key_down:: 
0132CE  2E 04          75  	LINK #4 
0132D0  58 F1          76  	PUSH R1 
0132D2  58 F2          77  	PUSH R2 
0132D4  58 F3          78  	PUSH R3 
0132D6                 80  L42: 
0132D6                 82  L43: 
0132D6                 86  L44: 
0132D6  48 10          87  	MOV R1,#0 
0132D8  6A 1B FF FC    88  	MOV [FP+#(-4)],R1 
0132DC                 90  L45: 
0132DC  48 10          91  	MOV R1,#0 
0132DE  6A 1B FF FE    92  	MOV [FP+#(-2)],R1 
0132E2                 94  L46: 
0132E2  BA F0 00 00    95  	MOVX R0,_rec_led_timer 
0132E6  BA F1 00 02    96  	MOVX R1,_rec_led_timer+2 
0132EA                 97  	SAVE4$stack -8
0132EA  6A 0B FF F8    97  MOV [FP+#(-8)],R0 
0132EE  6A 1B FF FA    97  MOV [FP+#(-8+2)],R1 
+                      97  
0132F2                 98  	CMP$long$con R0
0132F2  52 10          98  SUB R1,#(0 & 0xFFFF) 
0132F4  53 00          98  SUBC R0,#(0 >> 16) 
+                      98  
0132F6  AC 01 00 B8    99  	AJMP IF_EQ,L36 
0132FA                100  	LOAD4$stack R0
0132FA  78 0B FF F8   100  MOV R0,[FP+#(-8)] 
0132FE  78 1B FF FA   100  MOV R1,[FP+#(-8+2)] 
+                     100  
013302  58 F1         101  	PUSH R1 
013304  58 F0         102  	PUSH R0 
013306                103  .if KERNEL1_5 = 1
+                     104  	CRIT #1
+                     105  .endif
013306  BD 00 00 00   106  	SCALL _timer_check_timeout 
01330A  50 F4         107  	ADD SP,#4 
01330C  19 01         108  	MOVZE R0,Rb1 
01330E  56 00         109  	CMP R0,#0 
013310  AC 01 00 B8   110  	AJMP IF_EQ,L36 
013314                112  L47: 
013314                114  L48: 
013314                116  L49: 
013314                117  .if KERNEL1_5 = 1
+                     118  	CRIT #1
+                     119  .endif
013314  BD 00 00 00   120  	SCALL _timer_get_time 
013318  70 F1 00 FA   121  	ADD R1,#250 
01331C  51 00         122  	ADDC R0,#0 
01331E  50 11         123  	ADD R1,#1 
013320  51 00         124  	ADDC R0,#0 
013322  AA F0 00 00   125  	MOVX _rec_led_timer,R0 
013326  AA F1 00 02   126  	MOVX _rec_led_timer+2,R1 
01332A                128  L50: 
01332A  48 03         129  	MOV R0,#3 
01332C  58 F0         130  	PUSH R0 
01332E                131  .if KERNEL1_5 = 1
+                     132  	CRIT #1
+                     133  .endif
01332E  BD 00 00 00   134  	SCALL _Get_ADCValue 
013332  50 F2         135  	ADD SP,#2 
013334  68 10 00 00   136  	MOV DS0,#@_adc3_value 
013338                137  .if KERNEL1_E = 1
+                     138  	NOP
+                     139  .endif
013338  A8 F0 00 00   140  	MOV DS0:_adc3_value,R0 
01333C                142  L51: 
+                     143  	
01333C  7C 46 F0 50   144  	BMOV R0.0,0x46.5 
013340  54 01         145  	AND R0,#1 
013342  56 00         146  	CMP R0,#0 
013344  AC 01 00 A8   147  	AJMP IF_EQ,L38 
013348                149  L52: 
013348                151  L53: 
013348                153  L54: 
013348                154  	LOAD4$memory R0
013348  68 10 00 00   154  MOV DS0,#@(_time_count) 
01334C  88 F0 00 00   154  MOV R0,DS0:(_time_count) 
013350  88 F1 00 02   154  MOV R1,DS0:(_time_count+2) 
+                     154  
013354                155  	MOVDR R2
013354                155  .if R2=R0
+                     155  .else
013354  08 20         155  MOV R2,R0 
+                     155  .endif
013356                155  .if R3=R1
+                     155  .else
013356  08 31         155  MOV R3,R1 
+                     155  .endif
+                     155  
013358  50 31         156  	ADD R3,#1 
01335A  51 20         157  	ADDC R2,#0 
01335C                158  	SAVE4$memory _time_count
01335C  68 10 00 00   158  MOV DS0,#@(_time_count) 
013360                158  .if KERNEL1_E = 1
+                     158  NOP
+                     158  .endif
013360  A8 F2 00 00   158  MOV DS0:(_time_count),R2 
013364  A8 F3 00 02   158  MOV DS0:(_time_count+2),R3 
+                     158  
013368                159  	CMP$long$con R0
013368  52 12         159  SUB R1,#(2 & 0xFFFF) 
01336A  53 00         159  SUBC R0,#(2 >> 16) 
+                     159  
01336C  AC 0C 00 B8   160  	AJMP IF_ULE,L39 
013370                162  L55: 
013370                164  L56: 
013370                166  L57: 
013370  48 01         167  	MOV R0,#1 
013372  AC 00 00 BA   168  	AJMP #0,L35 
013376                170  L58: 
013376                172  L59: 
013376                174  L60: 
013376                176  L61: 
013376                177  L38: 
013376                179  L62: 
013376                181  L63: 
013376                183  L64: 
013376  48 10         184  	MOV R1,#0 
013378  48 00         185  	MOV R0,#0 
01337A                186  	SAVE4$memory _time_count
01337A  68 10 00 00   186  MOV DS0,#@(_time_count) 
01337E                186  .if KERNEL1_E = 1
+                     186  NOP
+                     186  .endif
01337E  A8 F0 00 00   186  MOV DS0:(_time_count),R0 
013382  A8 F1 00 02   186  MOV DS0:(_time_count+2),R1 
+                     186  
013386                188  L65: 
013386                190  L66: 
013386                191  L39: 
013386                193  L67: 
013386                195  L68: 
013386                196  L36: 
013386                198  L69: 
013386  48 00         199  	MOV R0,#0 
013388                201  L70: 
013388                203  L71: 
013388                204  L35: 
013388  38 3F         205  	POP R3 
01338A  38 2F         206  	POP R2 
01338C  38 1F         207  	POP R1 
01338E                208  	UNLINK_MACRO
01338E  2F 00         208  UNLINK 
+                     208  
013390                209  .if KERNEL1_5 = 1
+                     210  	CRIT #1
+                     211  .endif
013390  C6 20         212  	RETS 
+                     214  
+                     215  .area _TEXT$main(USB_MS_CODE,REL) 
+B 00 06
01162C                216  _main:: 
01162C  2E 03         218  	LINK #3 
01162E  58 F0         219  	PUSH R0 
011630  58 F1         220  	PUSH R1 
011632                222  L104: 
011632                224  L105: 
011632                228  L106: 
011632                229  .if KERNEL1_5 = 1
+                     230  	CRIT #1
+                     231  .endif
011632  BD 00 00 00   232  	SCALL _IP_INIT 
011636                234  L107: 
011636                235  .if KERNEL1_5 = 1
+                     236  	CRIT #1
+                     237  .endif
011636  BD 00 00 00   238  	SCALL _ADC_init 
01163A                240  L108: 
01163A  48 03         241  	MOV R0,#3 
01163C  58 F0         242  	PUSH R0 
01163E                243  .if KERNEL1_5 = 1
+                     244  	CRIT #1
+                     245  .endif
01163E  BD 00 00 00   246  	SCALL _SystemClock 
011642  50 F2         247  	ADD SP,#2 
011644                249  L109: 
+                     250  	
011644  F2 4E         251  	BCLR 0x4e.2 
011646                253  L110: 
+                     254  	
011646  F5 57         255  	BCLR 0x57.5 
011648                257  L111: 
+                     258  	
011648  F6 57         259  	BCLR 0x57.6 
01164A                261  L112: 
+                     262  	
01164A  F7 57         263  	BCLR 0x57.7 
01164C                265  L113: 
01164C                266  .if KERNEL1_5 = 1
+                     267  	CRIT #1
+                     268  .endif
01164C  BD 00 00 00   269  	SCALL _System_Timer3_Init 
011650                271  L114: 
011650                272  .if KERNEL1_5 = 1
+                     273  	CRIT #1
+                     274  .endif
011650  BD 00 00 00   275  	SCALL _UART_Init 
011654                277  L115: 
011654  68 F1 00 28   278  	MOV R1,#(L73) 
011658  68 F0 00 28   279  	MOV R0,#^(L73) 
01165C  58 F1         280  	PUSH R1 
01165E  58 F0         281  	PUSH R0 
011660                282  .if KERNEL1_5 = 1
+                     283  	CRIT #1
+                     284  .endif
011660  BD 00 00 00   285  	SCALL _SendString 
011664  50 F4         286  	ADD SP,#4 
011666                288  L116: 
011666                289  .if KERNEL1_5 = 1
+                     290  	CRIT #1
+                     291  .endif
011666  BD 00 00 00   292  	SCALL _MassStorage_Init 
01166A                294  L117: 
01166A                295  .if KERNEL1_5 = 1
+                     296  	CRIT #1
+                     297  .endif
01166A  BD 00 00 00   298  	SCALL _USBStoragePoweroff 
01166E                300  L118: 
01166E  48 01         301  	MOV R0,#(0x00018000 >> 16) 
011670  68 F1 80 00   302  	MOV R1,#(0x00018000 & 0xFFFF) 
011674  58 F1         303  	PUSH R1 
011676  58 F0         304  	PUSH R0 
011678                305  .if KERNEL1_5 = 1
+                     306  	CRIT #1
+                     307  .endif
011678  BD 00 00 00   308  	SCALL _USBSetDebounceCount 
01167C  50 F4         309  	ADD SP,#4 
01167E                311  L119: 
01167E  48 10         312  	MOV R1,#0 
011680  48 00         313  	MOV R0,#0 
011682                314  	SAVE4$stack -6
011682  6A 0B FF FA   314  MOV [FP+#(-6)],R0 
011686  6A 1B FF FC   314  MOV [FP+#(-6+2)],R1 
+                     314  
01168A  AC 00 00 8C   315  	AJMP #0,L77 
01168E                316  L74: 
01168E                318  L120: 
01168E                320  L121: 
01168E                322  L122: 
01168E                323  .if KERNEL1_5 = 1
+                     324  	CRIT #1
+                     325  .endif
01168E  BD 00 00 00   326  	SCALL _USBAttachCheck 
011692  6A 0B FF FE   327  	MOV [FP+#(-2)],R0 
011696                329  L123: 
011696  78 0B FF FE   330  	MOV R0,[FP+#(-2)] 
01169A  56 00         331  	CMP R0,#0 
01169C  AC 01 00 78   332  	AJMP IF_EQ,L78 
0116A0                334  L124: 
0116A0  AC 00 00 9E   335  	AJMP #0,L76 
0116A4                336  L78: 
0116A4                338  L125: 
0116A4                340  L126: 
0116A4                341  L75: 
0116A4                343  L127: 
0116A4                344  	LOAD4$stack R0
0116A4  78 0B FF FA   344  MOV R0,[FP+#(-6)] 
0116A8  78 1B FF FC   344  MOV R1,[FP+#(-6+2)] 
+                     344  
0116AC  50 11         345  	ADD R1,#1 
0116AE  51 00         346  	ADDC R0,#0 
0116B0                347  	SAVE4$stack -6
0116B0  6A 0B FF FA   347  MOV [FP+#(-6)],R0 
0116B4  6A 1B FF FC   347  MOV [FP+#(-6+2)],R1 
+                     347  
0116B8                348  L77: 
0116B8                350  L128: 
0116B8                351  	LOAD4$stack R0
0116B8  78 0B FF FA   351  MOV R0,[FP+#(-6)] 
0116BC  78 1B FF FC   351  MOV R1,[FP+#(-6+2)] 
+                     351  
0116C0                352  	CMP$long$con R0
0116C0  52 10         352  SUB R1,#(0x00100000 & 0xFFFF) 
0116C2  73 F0 00 10   352  SUBC R0,#(0x00100000 >> 16) 
+                     352  
0116C6  AC 0C 00 62   353  	AJMP IF_ULE,L74 
0116CA                354  L76: 
0116CA                356  L129: 
0116CA  78 0B FF FE   357  	MOV R0,[FP+#(-2)] 
0116CE  56 00         358  	CMP R0,#0 
0116D0  AC 02 00 BE   359  	AJMP IF_NE,L80 
0116D4                361  L130: 
0116D4                363  L131: 
0116D4                365  L132: 
0116D4  68 F1 00 1A   366  	MOV R1,#(L82) 
0116D8  68 F0 00 1A   367  	MOV R0,#^(L82) 
0116DC  58 F1         368  	PUSH R1 
0116DE  58 F0         369  	PUSH R0 
0116E0                370  .if KERNEL1_5 = 1
+                     371  	CRIT #1
+                     372  .endif
0116E0  BD 00 00 00   373  	SCALL _SendString 
0116E4  50 F4         374  	ADD SP,#4 
0116E6                376  L133: 
0116E6  AC 00 01 64   377  	AJMP #0,L83 
0116EA                379  L134: 
0116EA                381  L135: 
0116EA                382  L80: 
0116EA                384  L136: 
0116EA                385  .if KERNEL1_5 = 1
+                     386  	CRIT #1
+                     387  .endif
0116EA  BD 00 00 00   388  	SCALL _timer_get_time 
0116EE  70 F1 07 D0   389  	ADD R1,#2000 
0116F2  51 00         390  	ADDC R0,#0 
0116F4  50 11         391  	ADD R1,#1 
0116F6  51 00         392  	ADDC R0,#0 
0116F8  AA F0 00 00   393  	MOVX _usb_nosd_timer,R0 
0116FC  AA F1 00 02   394  	MOVX _usb_nosd_timer+2,R1 
011700                396  L137: 
011700  48 00         397  	MOV R0,#0 
011702  68 10 00 00   398  	MOV DS0,#@_usb_core_status 
011706                399  .if KERNEL1_E = 1
+                     400  	NOP
+                     401  .endif
011706  A8 F0 00 00   402  	MOV DS0:_usb_core_status,R0 
01170A                404  L138: 
01170A  49 10         405  	MOVB Rb1,#0 
01170C  AB F1 00 00   406  	MOVBX _usb_count,Rb1 
011710                408  L139: 
011710  49 11         409  	MOVB Rb1,#1 
011712  68 10 00 00   410  	MOV DS0,#@_b_usb_detection 
011716                411  .if KERNEL1_E = 1
+                     412  	NOP
+                     413  .endif
011716  A9 F1 00 00   414  	MOVB DS0:_b_usb_detection,Rb1 
01171A                416  L140: 
01171A  49 10         417  	MOVB Rb1,#0 
01171C  68 10 00 00   418  	MOV DS0,#@_adpate_flag 
011720                419  .if KERNEL1_E = 1
+                     420  	NOP
+                     421  .endif
011720  A9 F1 00 00   422  	MOVB DS0:_adpate_flag,Rb1 
011724                424  L141: 
011724                425  .if KERNEL1_5 = 1
+                     426  	CRIT #1
+                     427  .endif
011724  BD 00 00 00   428  	SCALL _MassStorage_Registers 
011728                430  L142: 
011728  AC 00 01 30   431  	AJMP #0,L85 
01172C                432  L84: 
01172C                434  L143: 
01172C                436  L144: 
01172C                438  L145: 
01172C                439  .if KERNEL1_5 = 1
+                     440  	CRIT #1
+                     441  .endif
01172C  BD 00 00 00   442  	SCALL _MassStorage_Loop 
011730  56 01         443  	CMP R0,#1 
011732  AC 02 01 0E   444  	AJMP IF_NE,L87 
011736                446  L146: 
011736  AC 00 01 34   447  	AJMP #0,L86 
01173A                448  L87: 
01173A                450  L147: 
01173A  68 10 00 00   451  	MOV DS0,#@_adpate_flag 
01173E  99 F0 00 00   452  	MOVZE R0,DS0:_adpate_flag 
011742  56 00         453  	CMP R0,#0 
011744  AC 01 01 20   454  	AJMP IF_EQ,L89 
011748                456  L148: 
011748  AC 00 01 64   457  	AJMP #0,L83 
01174C                458  L89: 
01174C                460  L149: 
01174C                461  .if KERNEL1_5 = 1
+                     462  	CRIT #1
+                     463  .endif
01174C  BD 00 00 00   464  	SCALL _key_down 
011750  19 01         465  	MOVZE R0,Rb1 
011752  56 00         466  	CMP R0,#0 
011754  AC 01 01 30   467  	AJMP IF_EQ,L91 
011758                469  L150: 
011758                471  L151: 
011758                473  L152: 
011758  AC 00 01 34   474  	AJMP #0,L86 
01175C                476  L153: 
01175C                478  L154: 
01175C                479  L91: 
01175C                481  L155: 
01175C                483  L156: 
01175C                484  L85: 
01175C                486  L157: 
01175C  AC 00 01 00   487  	AJMP #0,L84 
011760                488  L86: 
011760                490  L158: 
011760                491  .if KERNEL1_5 = 1
+                     492  	CRIT #1
+                     493  .endif
011760  BD 00 00 00   494  	SCALL _MassStorage_Exit 
011764                495  L93: 
011764                497  L159: 
011764  68 F0 80 00   498  	MOV R0,#0x8000 
011768  68 10 00 00   499  	MOV DS0,#@(_gflag) 
01176C  B5 F0 00 00   500  	OR DS0:(_gflag),R0 
011770                502  L160: 
011770  68 F1 00 0E   503  	MOV R1,#(L94) 
011774  68 F0 00 0E   504  	MOV R0,#^(L94) 
011778  58 F1         505  	PUSH R1 
01177A  58 F0         506  	PUSH R0 
01177C                507  .if KERNEL1_5 = 1
+                     508  	CRIT #1
+                     509  .endif
01177C  BD 00 00 00   510  	SCALL _SendString 
011780  50 F4         511  	ADD SP,#4 
011782                513  L161: 
011782  48 01         514  	MOV R0,#1 
011784  58 F0         515  	PUSH R0 
011786                516  .if KERNEL1_5 = 1
+                     517  	CRIT #1
+                     518  .endif
011786  BD 00 00 00   519  	SCALL _CommonLoadCode 
01178A  50 F2         520  	ADD SP,#2 
01178C                522  L162: 
01178C                523  L95: 
01178C                525  L163: 
01178C                526  L96: 
01178C                528  L164: 
01178C  AC 00 01 60   529  	AJMP #0,L95 
011790                530  L83: 
011790                532  L165: 
011790  68 F1 00 00   533  	MOV R1,#(L98) 
011794  68 F0 00 00   534  	MOV R0,#^(L98) 
011798  58 F1         535  	PUSH R1 
01179A  58 F0         536  	PUSH R0 
01179C                537  .if KERNEL1_5 = 1
+                     538  	CRIT #1
+                     539  .endif
01179C  BD 00 00 00   540  	SCALL _SendString 
0117A0  50 F4         541  	ADD SP,#4 
0117A2                543  L166: 
0117A2  AC 00 01 8A   544  	AJMP #0,L100 
0117A6                545  L99: 
0117A6                547  L167: 
0117A6                549  L168: 
0117A6                551  L169: 
0117A6                552  .if KERNEL1_5 = 1
+                     553  	CRIT #1
+                     554  .endif
0117A6  BD 00 00 00   555  	SCALL _key_down 
0117AA  19 01         556  	MOVZE R0,Rb1 
0117AC  56 00         557  	CMP R0,#0 
0117AE  AC 01 01 8A   558  	AJMP IF_EQ,L102 
0117B2                560  L170: 
0117B2  AC 00 01 38   561  	AJMP #0,L93 
0117B6                562  L102: 
0117B6                564  L171: 
0117B6                566  L172: 
0117B6                567  L100: 
0117B6                569  L173: 
0117B6  AC 00 01 7A   570  	AJMP #0,L99 
0117BA                572  L174: 
0117BA                574  L175: 
0117BA  38 1F         575  	POP R1 
0117BC  38 0F         576  	POP R0 
0117BE                577  	UNLINK_MACRO
0117BE  2F 00         577  UNLINK 
+                     577  
0117C0                578  .if KERNEL1_5 = 1
+                     579  	CRIT #1
+                     580  .endif
0117C0  C6 20         581  	RETS 
+                     771  
+                     772  .area _$USB_MassStorage_c$(ROM,REL) 
+B 00 01
030000                774  Letext: 
+                     775  
+                     776  .area _USB_MS_XRAM$RD$usb_core_status(USB_MS_XRAM,REL,dat) 
+                     777  .even 
+B 00 07
00077A                778  _usb_core_status:: 
00077A                779  	.ds 2 
+                     781  
+                     782  .area _USB_MS_XRAM$RD$b_usb_detection(USB_MS_XRAM,REL,dat) 
+B 00 08
000782                783  _b_usb_detection:: 
000782                784  	.ds 1 
+                     786  
+                     787  .area _XRAM$RD$usb_count(XRAM,REL,dat) 
+B 00 09
000760                788  _usb_count:: 
000760                789  	.ds 1 
+                     791  
+                     792  .area _XRAM$RD$usb_nosd_timer(XRAM,REL,dat) 
+                     793  .even 
+B 00 0A
0006D0                794  _usb_nosd_timer:: 
0006D0                795  	.ds 4 
+                     797  
+                     798  .area _USB_MS_XRAM$RD$adpate_flag(USB_MS_XRAM,REL,dat) 
+B 00 0B
000784                799  _adpate_flag:: 
000784                800  	.ds 1 
+                     802  
+                     803  .area _USB_MS_XRAM$RD$vid_data(USB_MS_XRAM,REL,dat) 
+                     804  .even 
+B 00 0C
000778                805  _vid_data:: 
000778                806  	.ds 2 
+                     808  
+                     809  .area _USB_MS_XRAM$RD$flag_chongdian(USB_MS_XRAM,REL,dat) 
+                     810  .even 
+B 00 0D
000780                811  _flag_chongdian:: 
000780                812  	.ds 2 
+                     814  
+                     815  .area _USB_MS_XRAM$RD$usb_attach_time(USB_MS_XRAM,REL,dat) 
+                     816  .even 
+B 00 0E
000714                817  _usb_attach_time:: 
000714                818  	.ds 4 
+                     820  
+                     821  .area _USB_MS_XRAM$RD$time_count(USB_MS_XRAM,REL,dat) 
+                     822  .even 
+B 00 0F
000718                823  _time_count:: 
000718                824  	.ds 4 
+                     826  
+                     827  .area _USB_MS_XRAM$RD$g_exit_usb(USB_MS_XRAM,REL,dat) 
+                     828  .even 
+B 00 10
00077E                829  _g_exit_usb:: 
00077E                830  	.ds 2 
+                     832  
+                     833  
+                     834  
+                     835  
+                     836  
+                     837  
+                     838  
+                     839  
+                     840  
+                     841  
+                     842  
+                     843  
+                     844  
+                     845  
+                     846  
+                     847  
+                     848  
+                     849  
+                     850  
+                     851  
+                     852  
+                     853  .area _USB_MS_CODE$RD$USB_MassStorage_c$(USB_MS_CODE,REL) 
+B 00 11
0147D6                854  L98: 
0147D6  0D            855  	.db 13 
0147D7  0A            856  	.db 10 
+                     857  	
0147D8  75 73 62 20   858  	.db 117,115,98,32,97,100,112,97,116,101,33,0 
0147DC  61 64 70 61
0147E0  74 65 21 00
+                     859  
+                     860  .area _USB_MS_CODE$RD$USB_MassStorage_c$(USB_MS_CODE,REL) 
+B 00 11
0147E4                861  L94: 
0147E4  0D            862  	.db 13 
0147E5  0A            863  	.db 10 
+                     864  	
0147E6  75 73 62 20   865  	.db 117,115,98,32,101,120,105,116,33,0 
0147EA  65 78 69 74
0147EE  21 00
+                     866  
+                     867  .area _USB_MS_CODE$RD$USB_MassStorage_c$(USB_MS_CODE,REL) 
+B 00 11
0147F0                868  L82: 
0147F0  0D            869  	.db 13 
0147F1  0A            870  	.db 10 
+                     871  	
0147F2  75 73 62 20   872  	.db 117,115,98,32,97,100,112,101,97,116,33,0 
0147F6  61 64 70 65
0147FA  61 74 21 00
+                     873  
+                     874  .area _USB_MS_CODE$RD$USB_MassStorage_c$(USB_MS_CODE,REL) 
+B 00 11
0147FE                875  L73: 
0147FE  0D            876  	.db 13 
0147FF  0A            877  	.db 10 
+                     878  	
014800  4B 42 20 75   879  	.db 75,66,32,117,115,98,32,98,101,103,105,110,33,0 
014804  73 62 20 62
014808  65 67 69 6E
01480C  21 00
+                     880  
+                     881  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+  6 L100  00018A R
+  6 L102  00018A R
+  6 L104  000006 R
+  6 L105  000006 R
+  6 L106  000006 R
+  6 L107  00000A R
+  6 L108  00000E R
+  6 L109  000018 R
+  6 L110  00001A R
+  6 L111  00001C R
+  6 L112  00001E R
+  6 L113  000020 R
+  6 L114  000024 R
+  6 L115  000028 R
+  6 L116  00003A R
+  6 L117  00003E R
+  6 L118  000042 R
+  6 L119  000052 R
+  6 L120  000062 R
+  6 L121  000062 R
+  6 L122  000062 R
+  6 L123  00006A R
+  6 L124  000074 R
+  6 L125  000078 R
+  6 L126  000078 R
+  6 L127  000078 R
+  6 L128  00008C R
+  6 L129  00009E R
+  6 L130  0000A8 R
+  6 L131  0000A8 R
+  6 L132  0000A8 R
+  6 L133  0000BA R
+  6 L134  0000BE R
+  6 L135  0000BE R
+  6 L136  0000BE R
+  6 L137  0000D4 R
+  6 L138  0000DE R
+  6 L139  0000E4 R
+  6 L140  0000EE R
+  6 L141  0000F8 R
+  6 L142  0000FC R
+  6 L143  000100 R
+  6 L144  000100 R
+  6 L145  000100 R
+  6 L146  00010A R
+  6 L147  00010E R
+  6 L148  00011C R
+  6 L149  000120 R
+  6 L150  00012C R
+  6 L151  00012C R
+  6 L152  00012C R
+  6 L153  000130 R
+  6 L154  000130 R
+  6 L155  000130 R
+  6 L156  000130 R
+  6 L157  000130 R
+  6 L158  000134 R
+  6 L159  000138 R
+  6 L160  000144 R
+  6 L161  000156 R
+  6 L162  000160 R
+  6 L163  000160 R
+  6 L164  000160 R
+  6 L165  000164 R
+  6 L166  000176 R
+  6 L167  00017A R
+  6 L168  00017A R
+  6 L169  00017A R
+  6 L170  000186 R
+  6 L171  00018A R
+  6 L172  00018A R
+  6 L173  00018A R
+  6 L174  00018E R
+  6 L175  00018E R
+  5 L35  0000BA R
+  5 L36  0000B8 R
+  5 L38  0000A8 R
+  5 L39  0000B8 R
+  5 L42  000008 R
+  5 L43  000008 R
+  5 L44  000008 R
+  5 L45  00000E R
+  5 L46  000014 R
+  5 L47  000046 R
+  5 L48  000046 R
+  5 L49  000046 R
+  5 L50  00005C R
+  5 L51  00006E R
+  5 L52  00007A R
+  5 L53  00007A R
+  5 L54  00007A R
+  5 L55  0000A2 R
+  5 L56  0000A2 R
+  5 L57  0000A2 R
+  5 L58  0000A8 R
+  5 L59  0000A8 R
+  5 L60  0000A8 R
+  5 L61  0000A8 R
+  5 L62  0000A8 R
+  5 L63  0000A8 R
+  5 L64  0000A8 R
+  5 L65  0000B8 R
+  5 L66  0000B8 R
+  5 L67  0000B8 R
+  5 L68  0000B8 R
+  5 L69  0000B8 R
+  5 L70  0000BA R
+  5 L71  0000BA R
+ 11 L73  000028 R
+  6 L74  000062 R
+  6 L75  000078 R
+  6 L76  00009E R
+  6 L77  00008C R
+  6 L78  000078 R
+  6 L80  0000BE R
+ 11 L82  00001A R
+  6 L83  000164 R
+  6 L84  000100 R
+  6 L85  000130 R
+  6 L86  000134 R
+  6 L87  00010E R
+  6 L89  000120 R
+  6 L91  000130 R
+  6 L93  000138 R
+ 11 L94  00000E R
+  6 L95  000160 R
+  6 L96  000160 R
+ 11 L98  000000 R
+  6 L99  00017A R
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+    USB_MS_CODE__INIT$copy  ****** GX
+  4 _0$_lidian_flag  000000 R
+  4 _1$_lidian_flag  000001 R
+    _ADC_init  ****** GX
+    _CommonLoadCode  ****** GX
+    _Get_ADCValue  ****** GX
+    _IP_INIT  ****** GX
+    _MassStorage_Exit  ****** GX
+    _MassStorage_Init  ****** GX
+    _MassStorage_Loop  ****** GX
+    _MassStorage_Registers  ****** GX
+    _SendString  ****** GX
+    _SystemClock  ****** GX
+    _System_Timer3_Init  ****** GX
+    _UART_Init  ****** GX
+    _USBAttachCheck  ****** GX
+    _USBSetDebounceCount  ****** GX
+    _USBStoragePoweroff  ****** GX
+    _adc3_value  ****** GX
+  B _adpate_flag  000000 GR
+  8 _b_usb_detection  000000 GR
+  D _flag_chongdian  000000 GR
+ 10 _g_exit_usb  000000 GR
+    _gflag  ****** GX
+  5 _key_down  000000 GR
+  2 _lidian_flag  000000 GR
+  6 _main  000000 GR
+    _rec_led_timer  ****** GX
+  F _time_count  000000 GR
+    _timer_check_timeout  ****** GX
+    _timer_get_time  ****** GX
+  E _usb_attach_time  000000 GR
+  7 _usb_core_status  000000 GR
+  9 _usb_count  000000 GR
+  A _usb_nosd_timer  000000 GR
+  C _vid_data  000000 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$USB_MassStorage_c$ size    0   flags 0
+   2 _USB_MS_XRAM$RD$lidian_flag size    2   flags 0
+   3 _SGV_INIT_CODE size   16   flags 0
+   4 _$lidian_flag size    2   flags 0
+   5 _$key_down size   C4   flags 0
+   6 _TEXT$main size  196   flags 0
+   7 _USB_MS_XRAM$RD$usb_core_status size    2   flags 0
+   8 _USB_MS_XRAM$RD$b_usb_detection size    2   flags 0
+   9 _XRAM$RD$usb_count size    2   flags 0
+   A _XRAM$RD$usb_nosd_timer size    4   flags 0
+   B _USB_MS_XRAM$RD$adpate_flag size    2   flags 0
+   C _USB_MS_XRAM$RD$vid_data size    2   flags 0
+   D _USB_MS_XRAM$RD$flag_chongdian size    2   flags 0
+   E _USB_MS_XRAM$RD$usb_attach_time size    4   flags 0
+   F _USB_MS_XRAM$RD$time_count size    4   flags 0
+  10 _USB_MS_XRAM$RD$g_exit_usb size    2   flags 0
+  11 _USB_MS_CODE$RD$USB_MassStorage_c$ size   38   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_SD1.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$USB_MassStorage_SD1_c$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                      57  
+                      58  .area _$usd1_protect(USB_MS_CODE,REL) 
+B 00 02
014D36                 60  _usd1_protect:: 
014D36  2E 00          62  	LINK #0 
014D38                 64  L36: 
014D38                 66  L37: 
014D38                 68  L38: 
014D38  48 00          69  	MOV R0,#0 
014D3A                 71  L39: 
014D3A                 73  L40: 
014D3A                 74  L35: 
014D3A                 75  	UNLINK_MACRO
014D3A  2F 00          75  UNLINK 
+                      75  
014D3C                 76  .if KERNEL1_5 = 1
+                      77  	CRIT #1
+                      78  .endif
014D3C  C6 20          79  	RETS 
+                      81  
+                      82  .area _$usd1_write(USB_MS_CODE,REL) 
+B 00 03
014AAA                 83  _usd1_write:: 
014AAA  2E 00          88  	LINK #0 
014AAC  58 F1          89  	PUSH R1 
014AAE                 91  L42: 
014AAE                 93  L43: 
014AAE                 95  L44: 
014AAE                 96  .if KERNEL1_5 = 1
+                      97  	CRIT #1
+                      98  .endif
014AAE  BD 01 4C 42    99  	SCALL _MassStorage_Write 
014AB2                101  L45: 
014AB2  78 0B 00 0A   102  	MOV R0,[FP+#(10)] 
014AB6  58 F0         103  	PUSH R0 
014AB8                104  	LOAD4$stack R0
014AB8  78 0B 00 06   104  MOV R0,[FP+#(6)] 
014ABC  78 1B 00 08   104  MOV R1,[FP+#(6+2)] 
+                     104  
014AC0  58 F1         105  	PUSH R1 
014AC2  58 F0         106  	PUSH R0 
014AC4                107  .if KERNEL1_5 = 1
+                     108  	CRIT #1
+                     109  .endif
014AC4  BD 01 1E B2   110  	SCALL _sd1_cache_write 
014AC8  50 F6         111  	ADD SP,#6 
014ACA                113  L46: 
014ACA                115  L47: 
014ACA                116  L41: 
014ACA  38 1F         117  	POP R1 
014ACC                118  	UNLINK_MACRO
014ACC  2F 00         118  UNLINK 
+                     118  
014ACE                119  .if KERNEL1_5 = 1
+                     120  	CRIT #1
+                     121  .endif
014ACE  C6 20         122  	RETS 
+                     124  
+                     125  .area _$usd1_status(USB_MS_CODE,REL) 
+B 00 04
014C2A                126  _usd1_status:: 
014C2A  2E 00         128  	LINK #0 
014C2C                130  L51: 
014C2C                132  L52: 
014C2C                134  L53: 
014C2C  BA F0 07 A6   135  	MOVX R0,_SD1_Mounted 
014C30  56 00         136  	CMP R0,#0 
014C32  AC 01 4C 3C   137  	AJMP IF_EQ,L49 
014C36                139  L54: 
014C36  48 01         140  	MOV R0,#1 
014C38  AC 00 4C 3E   141  	AJMP #0,L48 
014C3C                142  L49: 
014C3C                144  L55: 
014C3C  48 00         145  	MOV R0,#0 
014C3E                147  L56: 
014C3E                149  L57: 
014C3E                150  L48: 
014C3E                151  	UNLINK_MACRO
014C3E  2F 00         151  UNLINK 
+                     151  
014C40                152  .if KERNEL1_5 = 1
+                     153  	CRIT #1
+                     154  .endif
014C40  C6 20         155  	RETS 
+                     157  
+                     158  .area _$MassStorage_SD1_Register(USB_MS_CODE,REL) 
+B 00 05
013784                159  _MassStorage_SD1_Register:: 
013784  2E 00         162  	LINK #0 
013786  58 F0         163  	PUSH R0 
013788  58 F1         164  	PUSH R1 
01378A                166  L62: 
01378A                168  L63: 
01378A                170  L64: 
01378A  68 F1 4C 10   171  	MOV R1,#(L61) 
01378E  68 F0 00 01   172  	MOV R0,#^(L61) 
013792  58 F1         173  	PUSH R1 
013794  58 F0         174  	PUSH R0 
013796  68 F1 4C 16   175  	MOV R1,#(L60) 
01379A  68 F0 00 01   176  	MOV R0,#^(L60) 
01379E  58 F1         177  	PUSH R1 
0137A0  58 F0         178  	PUSH R0 
0137A2  68 F1 4C 20   179  	MOV R1,#(L59) 
0137A6  68 F0 00 01   180  	MOV R0,#^(L59) 
0137AA  58 F1         181  	PUSH R1 
0137AC  58 F0         182  	PUSH R0 
0137AE  68 F0 00 80   183  	MOV R0,#128 
0137B2  58 F0         184  	PUSH R0 
0137B4  68 F1 4C 2A   185  	MOV R1,#(_usd1_status) 
0137B8  68 F0 00 01   186  	MOV R0,#^(_usd1_status) 
0137BC  58 F1         187  	PUSH R1 
0137BE  58 F0         188  	PUSH R0 
0137C0  68 F1 4C E6   189  	MOV R1,#(_sd1_fat_size) 
0137C4  68 F0 00 01   190  	MOV R0,#^(_sd1_fat_size) 
0137C8  58 F1         191  	PUSH R1 
0137CA  58 F0         192  	PUSH R0 
0137CC  68 F1 4A 08   193  	MOV R1,#(_sd1_cache_flush) 
0137D0  68 F0 00 01   194  	MOV R0,#^(_sd1_cache_flush) 
0137D4  58 F1         195  	PUSH R1 
0137D6  58 F0         196  	PUSH R0 
0137D8  68 F1 4D 36   197  	MOV R1,#(_usd1_protect) 
0137DC  68 F0 00 01   198  	MOV R0,#^(_usd1_protect) 
0137E0  58 F1         199  	PUSH R1 
0137E2  58 F0         200  	PUSH R0 
0137E4  68 F1 4A AA   201  	MOV R1,#(_usd1_write) 
0137E8  68 F0 00 01   202  	MOV R0,#^(_usd1_write) 
0137EC  58 F1         203  	PUSH R1 
0137EE  58 F0         204  	PUSH R0 
0137F0  68 F1 1A BA   205  	MOV R1,#(_sd1_cache_read) 
0137F4  68 F0 00 01   206  	MOV R0,#^(_sd1_cache_read) 
0137F8  58 F1         207  	PUSH R1 
0137FA  58 F0         208  	PUSH R0 
0137FC  78 0B 00 06   209  	MOV R0,[FP+#(6)] 
013800  58 F0         210  	PUSH R0 
013802                211  .if KERNEL1_5 = 1
+                     212  	CRIT #1
+                     213  .endif
013802  BD 01 19 48   214  	SCALL _USBStorageRegister 
013806  70 FF 00 28   215  	ADD SP,#40 
01380A                217  L65: 
01380A                219  L66: 
01380A                220  L58: 
01380A  38 1F         221  	POP R1 
01380C  38 0F         222  	POP R0 
01380E                223  	UNLINK_MACRO
01380E  2F 00         223  UNLINK 
+                     223  
013810                224  .if KERNEL1_5 = 1
+                     225  	CRIT #1
+                     226  .endif
013810  C6 20         227  	RETS 
+                     229  
+                     230  .area _$MassStorage_SD1_Loop(USB_MS_CODE,REL) 
+B 00 06
014D58                231  _MassStorage_SD1_Loop:: 
014D58  2E 00         233  	LINK #0 
014D5A                235  L68: 
014D5A                237  L69: 
014D5A                239  L70: 
014D5A                241  L71: 
014D5A                242  L67: 
014D5A                243  	UNLINK_MACRO
014D5A  2F 00         243  UNLINK 
+                     243  
014D5C                244  .if KERNEL1_5 = 1
+                     245  	CRIT #1
+                     246  .endif
014D5C  C6 20         247  	RETS 
+                     249  
+                     250  .area _$MassStorage_SD1_Init(USB_MS_CODE,REL) 
+B 00 07
014C5A                251  _MassStorage_SD1_Init:: 
014C5A  2E 00         253  	LINK #0 
014C5C  58 F0         254  	PUSH R0 
014C5E                256  L73: 
014C5E                258  L74: 
014C5E                260  L75: 
014C5E                261  .if KERNEL1_5 = 1
+                     262  	CRIT #1
+                     263  .endif
014C5E  BD 01 0E 82   264  	SCALL _sd1_mount 
014C62                266  L76: 
014C62  48 03         267  	MOV R0,#3 
014C64  AA F0 F1 DA   268  	MOVX _SDCKCR,R0 
014C68                270  L77: 
014C68                271  .if KERNEL1_5 = 1
+                     272  	CRIT #1
+                     273  .endif
014C68  BD 01 47 62   274  	SCALL _sd1_cache8k_init 
014C6C                276  L78: 
014C6C                278  L79: 
014C6C                279  L72: 
014C6C  38 0F         280  	POP R0 
014C6E                281  	UNLINK_MACRO
014C6E  2F 00         281  UNLINK 
+                     281  
014C70                282  .if KERNEL1_5 = 1
+                     283  	CRIT #1
+                     284  .endif
014C70  C6 20         285  	RETS 
+                     475  
+                     476  .area _$USB_MassStorage_SD1_c$(ROM,REL) 
+B 00 01
030000                478  Letext: 
+                     479  
+                     480  
+                     481  
+                     482  
+                     483  
+                     484  
+                     485  
+                     486  
+                     487  
+                     488  
+                     489  
+                     490  .area _USB_MS_CODE$RD$USB_MassStorage_SD1_c$(USB_MS_CODE,REL) 
+B 00 08
014C10                491  L61: 
+                     492  	
014C10  31 2E 30 30   493  	.db 49,46,48,48,0 
014C14  00
+                     494  
+                     495  .area _USB_MS_CODE$RD$USB_MassStorage_SD1_c$(USB_MS_CODE,REL) 
+B 00 08
014C16                496  L60: 
+                     497  	
014C16  53 44 2D 31   498  	.db 83,68,45,49,32,68,105,115,107,0 
014C1A  20 44 69 73
014C1E  6B 00
+                     499  
+                     500  .area _USB_MS_CODE$RD$USB_MassStorage_SD1_c$(USB_MS_CODE,REL) 
+B 00 08
014C20                501  L59: 
+                     502  	
014C20  4B 42 20 55   503  	.db 75,66,32,85,83,66,50,48,0 
014C24  53 42 32 30
014C28  00
+                     504  
+                     505  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+  2 L35  000004 R
+  2 L36  000002 R
+  2 L37  000002 R
+  2 L38  000002 R
+  2 L39  000004 R
+  2 L40  000004 R
+  3 L41  000020 R
+  3 L42  000004 R
+  3 L43  000004 R
+  3 L44  000004 R
+  3 L45  000008 R
+  3 L46  000020 R
+  3 L47  000020 R
+  4 L48  000014 R
+  4 L49  000012 R
+  4 L51  000002 R
+  4 L52  000002 R
+  4 L53  000002 R
+  4 L54  00000C R
+  4 L55  000012 R
+  4 L56  000014 R
+  4 L57  000014 R
+  5 L58  000086 R
+  8 L59  000010 R
+  8 L60  000006 R
+  8 L61  000000 R
+  5 L62  000006 R
+  5 L63  000006 R
+  5 L64  000006 R
+  5 L65  000086 R
+  5 L66  000086 R
+  6 L67  000002 R
+  6 L68  000002 R
+  6 L69  000002 R
+  6 L70  000002 R
+  6 L71  000002 R
+  7 L72  000012 R
+  7 L73  000004 R
+  7 L74  000004 R
+  7 L75  000004 R
+  7 L76  000008 R
+  7 L77  00000E R
+  7 L78  000012 R
+  7 L79  000012 R
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+  7 _MassStorage_SD1_Init  000000 GR
+  6 _MassStorage_SD1_Loop  000000 GR
+  5 _MassStorage_SD1_Register  000000 GR
+    _MassStorage_Write  ****** GX
+    _SD1_Mounted  ****** GX
+    _SDCKCR  ****** GX
+    _USBStorageRegister  ****** GX
+    _sd1_cache8k_init  ****** GX
+    _sd1_cache_flush  ****** GX
+    _sd1_cache_read  ****** GX
+    _sd1_cache_write  ****** GX
+    _sd1_fat_size  ****** GX
+    _sd1_mount  ****** GX
+  2 _usd1_protect  000000 GR
+  4 _usd1_status  000000 GR
+  3 _usd1_write  000000 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$USB_MassStorage_SD1_c$ size    0   flags 0
+   2 _$usd1_protect size    8   flags 0
+   3 _$usd1_write size   26   flags 0
+   4 _$usd1_status size   18   flags 0
+   5 _$MassStorage_SD1_Register size   8E   flags 0
+   6 _$MassStorage_SD1_Loop size    6   flags 0
+   7 _$MassStorage_SD1_Init size   18   flags 0
+   8 _USB_MS_CODE$RD$USB_MassStorage_SD1_c$ size   1A   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_SD2.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$USB_MassStorage_SD2_c$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                     246  
+                     247  .area _$USB_MassStorage_SD2_c$(ROM,REL) 
+B 00 01
030000                249  Letext: 
+                     250  
+                     251  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$USB_MassStorage_SD2_c$ size    0   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_SPIF.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$USB_MassStorage_SPIF_c$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                     246  
+                     247  .area _$USB_MassStorage_SPIF_c$(ROM,REL) 
+B 00 01
030000                249  Letext: 
+                     250  
+                     251  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$USB_MassStorage_SPIF_c$ size    0   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_UGP.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$USB_MassStorage_UGP_c$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                     246  
+                     247  .area _$USB_MassStorage_UGP_c$(ROM,REL) 
+B 00 01
030000                249  Letext: 
+                     250  
+                     251  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$USB_MassStorage_UGP_c$ size    0   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\USB_MassStorage_config.asl          ###                          
+###########################################################
+                       1  
+                       5  
+                       6  .area _$USB_MassStorage_config_c$(ROM,REL) 
+B 00 01
030000                  7  Ltext0: 
+                      41  .include "kbccmacro.asm" 
030000                 42   .define _sdtl_mount	 _sd1_mount        
030000                 43   .define _sdtl_resv_size	 _sd1_res_size     
030000                 44   .define _sdtl_get_size	 _sd1_fat_size     
030000                 45   .define _sdtl_resv_read	 _sd1_res_read     
030000                 46   .define _sdtl_resv_write	 _sd1_res_write    
030000                 47   .define _sdtl_read	 _sd1_read         
030000                 48   .define _sdtl_write	 _sd1_write        
030000                 49   .define _sdtl_cache_init	 _sd1_cache2k_init 
030000                 50   .define _sdtl_cache_read	 _sd1_cache_read   
030000                 51   .define _sdtl_cache_write _sd1_cache_write  
030000                 52   .define _sdtl_cache_flush _sd1_cache_flush  
030000                 53   .define _sdtl_allocate    _sd1_allocate     
030000                 54   .define _spif_res_size	 _spif_resv_size   
030000                 55   .define _spif_res_read	 _spif_resv_read   
030000                 56   .define _spif_res_write	 _spif_resv_write  
+                      57  
+                      58  .area _$__usbtimer(USB_MS_CODE,REL) 
+B 00 02
013B24                 60  ___usbtimer:: 
013B24  2E 00          62  	LINK #0 
013B26                 63  	SAVE$ISR
013B26  58 F0          63  PUSH R0 
013B28  1F 09          63  PUSH RC 
013B2A  1F 0A          63  PUSH  SRC 
013B2C  68 09 00 00    63  MOV RC, #0 
013B30  68 0A 00 00    63  MOV SRC, #0 
013B34  1F 01          63  PUSH  PSR 
013B36  1F 00          63  PUSH  SOCR 
013B38  1F 0C          63  PUSH  RE 
013B3A  1F 0B          63  PUSH  RS 
+                      63                   
013B3C  1F 13          63  PUSH XM0 
013B3E  1F 19          63  PUSH YM0 
013B40  1F 02          63  PUSH SB 
013B42  1F 10          63  PUSH DS0 
013B44  1F 11          63  PUSH DS1 
013B46  58 FE          63  PUSH Y2 
013B48  58 F8          63  PUSH X0 
013B4A  68 13 00 00    63  MOV  XM0, #0 
013B4E  68 19 00 00    63  MOV  YM0, #0 
013B52  58 F2          63  PUSH R2 
013B54  58 F3          63  PUSH R3 
013B56  BA F0 F2 DC    63  MOVX  R0,ES0 
013B5A  58 F0          63  PUSH  R0 
013B5C  BA F0 F2 DE    63  MOVX  R0,ES1 
013B60  58 F0          63  PUSH  R0 
013B62  BD 01 4A D0    63  SCALL _ClrCirqAndAdjustCpri 
+                      63          
+                      63  
013B66  58 F0          64  	PUSH R0 
013B68                 66  L36: 
013B68                 68  L37: 
013B68                 70  L38: 
013B68  72 9F 40 00    71   SUB TMR2CR , #0x4000  
013B6C                 73  L39: 
013B6C                 75  L40: 
013B6C                 76  L35: 
013B6C  38 0F          77  	POP R0 
013B6E                 78  	RESTORE$ISR
013B6E  38 0F          78  POP   R0 
013B70  BA EF F2 E0    78  MOVX  ES1,R0 
013B74  38 0F          78  POP   R0 
013B76  BA EE F2 E0    78  MOVX  ES0,R0 
013B7A  38 3F          78  POP  R3 
013B7C  38 2F          78  POP  R2 
013B7E  38 8F          78  POP  X0 
013B80  38 EF          78  POP Y2 
013B82  1F 91          78  POP DS1 
013B84  1F 90          78  POP DS0 
013B86  1F 82          78  POP SB 
013B88  1F 99          78  POP YM0 
013B8A  1F 93          78  POP XM0 
+                      78          
013B8C  1F 8B          78  POP   RS 
013B8E  1F 8C          78  POP   RE 
013B90  1F 80          78  POP   SOCR 
+                      78     
013B92  1F 81          78  POP   PSR 
013B94  1F 8A          78  POP   SRC 
013B96  1F 89          78  POP RC 
013B98  38 0F          78  POP R0 
+                      78  
013B9A                 79  	UNLINK_MACRO
013B9A  2F 00          79  UNLINK 
+                      79  
013B9C                 80  .if KERNEL1_5 = 1
+                      81  	CRIT #1
+                      82  .endif
013B9C  C6 10          83  	RETI 
+                      85  
+                      86  .area _$USBWriteCommit(USB_MS_CODE,REL) 
+B 00 03
013A2E                 87  _USBWriteCommit:: 
013A2E  2E 01          89  	LINK #1 
013A30  58 F0          90  	PUSH R0 
013A32  58 F1          91  	PUSH R1 
013A34  58 F2          92  	PUSH R2 
013A36  58 F3          93  	PUSH R3 
013A38                 95  L47: 
013A38                 97  L48: 
013A38                100  L49: 
013A38  48 11         101  	MOV R1,#1 
013A3A  6A 1B FF FE   102  	MOV [FP+#(-2)],R1 
013A3E                103  L42: 
013A3E                105  L50: 
013A3E  78 1B FF FE   106  	MOV R1,[FP+#(-2)] 
013A42  52 11         107  	SUB R1,#1 
013A44  6A 1B FF FE   108  	MOV [FP+#(-2)],R1 
013A48  68 F3 00 26   109  	MOV R3,#38 
013A4C  48 20         110  	MOV R2,#0 
013A4E                111  	MOVSE42 R0
013A4E                111  .if R1=R1
+                     111  .else
+                     111  MOV R1,R1
+                     111  .endif
013A4E  68 F0 FF FF   111  MOV R0,#0xFFFF 
013A52  56 10         111  CMP R1,#0 
013A54  D9 01         111  RJMP IF_SL,(.+4)   
013A56  48 00         111  MOV R0,#0 
+                     111  
+                     111  
013A58                112  	MUL$long R2
013A58  58 F1         112  PUSH R1 
013A5A  58 F0         112  PUSH R0 
013A5C  58 F3         112  PUSH R3 
013A5E  58 F2         112  PUSH R2 
013A60                112  .if KERNEL1_5 = 1
+                     112  CRIT #1
+                     112  .endif
013A60  BD 01 01 60   112  SCALL __MULlong 
013A64  50 F8         112  ADD SP,#8 
+                     112  
013A66  68 F3 06 84   113  	MOV R3,#(_usb_stor+20) 
013A6A  68 F2 00 00   114  	MOV R2,#^(_usb_stor+20) 
013A6E  10 13         115  	ADD R1,R3 
013A70  11 02         116  	ADDC R0,R2 
013A72                117  	LOAD4$indirect R0
013A72                117  .if R0=R1
+                     117  +++ compiler error ++++
+                     117  .else
013A72  4C 11         117  SL R1,#1 
013A74  5C 01         117  SLOSB R0,#1 
013A76  BA 10 F2 E0   117  MOVX DS0,R0 
013A7A  4D 11         117  SR R1,#1 
013A7C  38 01         117  MOV R0,[R1++] 
013A7E  28 11         117  MOV R1,[R1] 
+                     117  .endif
+                     117  
013A80  68 FE 3A 92   118  	MOV Y2,#(L51) 
013A84  58 FE         119  	PUSH Y2 
013A86  68 FE 00 01   120  	MOV Y2,#^(L51) 
013A8A  58 FE         121  	PUSH Y2 
013A8C  58 F1         122  	PUSH R1 
013A8E  58 F0         123  	PUSH R0 
013A90                124  .if KERNEL1_5 = 1
+                     125  	CRIT #1
+                     126  .endif
013A90  C6 20         127  	RETS 
013A92                128  L51: 
013A92                129  L43: 
013A92                131  L52: 
013A92                133  L53: 
013A92  78 0B FF FE   134  	MOV R0,[FP+#(-2)] 
013A96  56 00         135  	CMP R0,#0 
013A98  AC 02 3A 3E   136  	AJMP IF_NE,L42 
013A9C                138  L54: 
013A9C  FE 9F         139   BCLR TMR2CR .14  
013A9E                141  L55: 
013A9E                143  L56: 
013A9E                144  L41: 
013A9E  38 3F         145  	POP R3 
013AA0  38 2F         146  	POP R2 
013AA2  38 1F         147  	POP R1 
013AA4  38 0F         148  	POP R0 
013AA6                149  	UNLINK_MACRO
013AA6  2F 00         149  UNLINK 
+                     149  
013AA8                150  .if KERNEL1_5 = 1
+                     151  	CRIT #1
+                     152  .endif
013AA8  C6 20         153  	RETS 
+                     155  
+                     156  .area _$MassStorage_Write(USB_MS_CODE,REL) 
+B 00 04
014C42                157  _MassStorage_Write:: 
014C42  2E 00         159  	LINK #0 
014C44                161  L58: 
014C44                163  L59: 
014C44                165  L60: 
014C44  58 F0 BA F0   166   PUSH R0  MOVX R0, TMR2CR   MOV  TMR2CR , #0  BSET R0.15  MOVX TMR2CR , R0  POP R0  
014C48  F2 3E 68 9F
014C4C  00 00 EF F0
014C50  BA 9F F2 E0
014C54  38 0F
014C56                168  L61: 
014C56                170  L62: 
014C56                171  L57: 
014C56                172  	UNLINK_MACRO
014C56  2F 00         172  UNLINK 
+                     172  
014C58                173  .if KERNEL1_5 = 1
+                     174  	CRIT #1
+                     175  .endif
014C58  C6 20         176  	RETS 
+                     178  
+                     179  .area _$MassStorage_Registers(USB_MS_CODE,REL) 
+B 00 05
01479C                180  _MassStorage_Registers:: 
01479C  2E 01         182  	LINK #1 
01479E  58 F0         183  	PUSH R0 
0147A0  58 F1         184  	PUSH R1 
0147A2                186  L64: 
0147A2                188  L65: 
0147A2                191  L66: 
0147A2  48 00         192  	MOV R0,#0 
0147A4  6A 0B FF FE   193  	MOV [FP+#(-2)],R0 
0147A8                195  L67: 
0147A8                196  .if KERNEL1_5 = 1
+                     197  	CRIT #1
+                     198  .endif
0147A8  BD 01 09 0C   199  	SCALL _USBCoreInit 
0147AC                201  L68: 
0147AC  48 06         202  	MOV R0,#6 
0147AE  58 F0         203  	PUSH R0 
0147B0  48 01         204  	MOV R0,#1 
0147B2  58 F0         205  	PUSH R0 
0147B4                206  .if KERNEL1_5 = 1
+                     207  	CRIT #1
+                     208  .endif
0147B4  BD 01 4B F4   209  	SCALL _USBStorageInit 
0147B8  50 F4         210  	ADD SP,#4 
0147BA                212  L69: 
0147BA  78 0B FF FE   213  	MOV R0,[FP+#(-2)] 
0147BE  08 10         214  	MOV R1,R0 
0147C0  50 11         215  	ADD R1,#1 
0147C2  6A 1B FF FE   216  	MOV [FP+#(-2)],R1 
0147C6  58 F0         217  	PUSH R0 
0147C8                218  .if KERNEL1_5 = 1
+                     219  	CRIT #1
+                     220  .endif
0147C8  BD 01 37 84   221  	SCALL _MassStorage_SD1_Register 
0147CC  50 F2         222  	ADD SP,#2 
0147CE                224  L70: 
0147CE                226  L71: 
0147CE                227  L63: 
0147CE  38 1F         228  	POP R1 
0147D0  38 0F         229  	POP R0 
0147D2                230  	UNLINK_MACRO
0147D2  2F 00         230  UNLINK 
+                     230  
0147D4                231  .if KERNEL1_5 = 1
+                     232  	CRIT #1
+                     233  .endif
0147D4  C6 20         234  	RETS 
+                     236  
+                     237  .area _$MassStorage_Loop(USB_MS_CODE,REL) 
+B 00 06
012ECE                238  _MassStorage_Loop:: 
012ECE  2E 01         240  	LINK #1 
012ED0  58 F1         241  	PUSH R1 
012ED2                243  L86: 
012ED2                245  L87: 
012ED2                248  L88: 
012ED2                249  .if KERNEL1_5 = 1
+                     250  	CRIT #1
+                     251  .endif
012ED2  BD 01 4D 58   252  	SCALL _MassStorage_SD1_Loop 
012ED6                254  L89: 
012ED6  BA F0 F2 3E   255  	MOVX R0,_TMR2CR 
012EDA  74 F0 40 00   256  	AND R0,#16384 
012EDE  56 00         257  	CMP R0,#0 
012EE0  AC 01 2E E8   258  	AJMP IF_EQ,L73 
012EE4                260  L90: 
012EE4                261  .if KERNEL1_5 = 1
+                     262  	CRIT #1
+                     263  .endif
012EE4  BD 01 3A 2E   264  	SCALL _USBWriteCommit 
012EE8                265  L73: 
012EE8                267  L91: 
012EE8                268  .if KERNEL1_5 = 1
+                     269  	CRIT #1
+                     270  .endif
012EE8  BD 03 F2 B4   271  	SCALL _USBRemoveCheck 
012EEC  56 00         272  	CMP R0,#0 
012EEE  AC 01 2E F8   273  	AJMP IF_EQ,L75 
012EF2                275  L92: 
012EF2  48 01         276  	MOV R0,#1 
012EF4  AC 00 2F 9E   277  	AJMP #0,L72 
012EF8                278  L75: 
012EF8                280  L93: 
012EF8                281  .if KERNEL1_5 = 1
+                     282  	CRIT #1
+                     283  .endif
012EF8  BD 01 4B BA   284  	SCALL _USBCoreLoop 
012EFC  6A 0B FF FE   285  	MOV [FP+#(-2)],R0 
012F00                287  L94: 
012F00  68 10 00 00   288  	MOV DS0,#@_b_usb_detection 
012F04  99 F0 07 82   289  	MOVZE R0,DS0:_b_usb_detection 
012F08  56 00         290  	CMP R0,#0 
012F0A  AC 01 2F 9C   291  	AJMP IF_EQ,L77 
012F0E                293  L95: 
012F0E                295  L96: 
012F0E                297  L97: 
012F0E  78 0B FF FE   298  	MOV R0,[FP+#(-2)] 
012F12  68 10 00 00   299  	MOV DS0,#@(_usb_core_status) 
012F16  96 F0 07 7A   300  	CMP R0,DS0:(_usb_core_status) 
012F1A  AC 01 2F 36   301  	AJMP IF_EQ,L79 
012F1E                303  L98: 
012F1E                305  L99: 
012F1E                307  L100: 
012F1E  BB F1 07 60   308  	MOVBX Rb1,_usb_count 
012F22  19 01         309  	MOVZE R0,Rb1 
012F24  50 01         310  	ADD R0,#1 
012F26  AB F1 07 60   311  	MOVBX _usb_count,Rb1 
012F2A                313  L101: 
012F2A  78 0B FF FE   314  	MOV R0,[FP+#(-2)] 
012F2E  68 10 00 00   315  	MOV DS0,#@_usb_core_status 
012F32                316  .if KERNEL1_E = 1
+                     317  	NOP
+                     318  .endif
012F32  A8 F0 07 7A   319  	MOV DS0:_usb_core_status,R0 
012F36                321  L102: 
012F36                323  L103: 
012F36                324  L79: 
012F36                326  L104: 
012F36  BA F0 06 D0   327  	MOVX R0,_usb_nosd_timer 
012F3A  BA F1 06 D2   328  	MOVX R1,_usb_nosd_timer+2 
012F3E  58 F1         329  	PUSH R1 
012F40  58 F0         330  	PUSH R0 
012F42                331  .if KERNEL1_5 = 1
+                     332  	CRIT #1
+                     333  .endif
012F42  BD 01 49 80   334  	SCALL _timer_check_timeout 
012F46  50 F4         335  	ADD SP,#4 
012F48  19 01         336  	MOVZE R0,Rb1 
012F4A  56 00         337  	CMP R0,#0 
012F4C  AC 01 2F 9C   338  	AJMP IF_EQ,L81 
012F50                340  L105: 
012F50                342  L106: 
012F50                344  L107: 
012F50  48 10         345  	MOV R1,#0 
012F52  48 00         346  	MOV R0,#0 
012F54  AA F0 06 D0   347  	MOVX _usb_nosd_timer,R0 
012F58  AA F1 06 D2   348  	MOVX _usb_nosd_timer+2,R1 
012F5C                350  L108: 
012F5C  68 F1 4C D8   351  	MOV R1,#(L83) 
012F60  68 F0 00 01   352  	MOV R0,#^(L83) 
012F64  58 F1         353  	PUSH R1 
012F66  58 F0         354  	PUSH R0 
012F68                355  .if KERNEL1_5 = 1
+                     356  	CRIT #1
+                     357  .endif
012F68  BD 01 3C F4   358  	SCALL _SendString 
012F6C  50 F4         359  	ADD SP,#4 
012F6E                361  L109: 
012F6E  BB F1 07 60   362  	MOVBX Rb1,_usb_count 
012F72  19 01         363  	MOVZE R0,Rb1 
012F74  58 F0         364  	PUSH R0 
012F76                365  .if KERNEL1_5 = 1
+                     366  	CRIT #1
+                     367  .endif
012F76  BD 01 48 46   368  	SCALL _send_hex_u8 
012F7A  50 F2         369  	ADD SP,#2 
012F7C                371  L110: 
012F7C  BB F1 07 60   372  	MOVBX Rb1,_usb_count 
012F80  19 01         373  	MOVZE R0,Rb1 
012F82  56 02         374  	CMP R0,#2 
012F84  AC 0E 2F 92   375  	AJMP IF_SGE,L84 
012F88                377  L111: 
012F88                379  L112: 
012F88                381  L113: 
012F88  49 11         382  	MOVB Rb1,#1 
012F8A  68 10 00 00   383  	MOV DS0,#@_adpate_flag 
012F8E                384  .if KERNEL1_E = 1
+                     385  	NOP
+                     386  .endif
012F8E  A9 F1 07 84   387  	MOVB DS0:_adpate_flag,Rb1 
012F92                389  L114: 
012F92                391  L115: 
012F92                392  L84: 
012F92                394  L116: 
012F92  49 10         395  	MOVB Rb1,#0 
012F94  68 10 00 00   396  	MOV DS0,#@_b_usb_detection 
012F98                397  .if KERNEL1_E = 1
+                     398  	NOP
+                     399  .endif
012F98  A9 F1 07 82   400  	MOVB DS0:_b_usb_detection,Rb1 
012F9C                402  L117: 
012F9C                404  L118: 
012F9C                405  L81: 
012F9C                407  L119: 
012F9C                409  L120: 
012F9C                410  L77: 
012F9C                412  L121: 
012F9C  48 00         413  	MOV R0,#0 
012F9E                415  L122: 
012F9E                417  L123: 
012F9E                418  L72: 
012F9E  38 1F         419  	POP R1 
012FA0                420  	UNLINK_MACRO
012FA0  2F 00         420  UNLINK 
+                     420  
012FA2                421  .if KERNEL1_5 = 1
+                     422  	CRIT #1
+                     423  .endif
012FA2  C6 20         424  	RETS 
+                     426  
+                     427  .area _$MassStorage_Exit(USB_MS_CODE,REL) 
+B 00 07
014C86                428  _MassStorage_Exit:: 
014C86  2E 00         430  	LINK #0 
014C88                432  L125: 
014C88                434  L126: 
014C88                436  L127: 
014C88                437  .if KERNEL1_5 = 1
+                     438  	CRIT #1
+                     439  .endif
014C88  BD 01 49 AE   440  	SCALL _USBCoreUninit 
014C8C                442  L128: 
014C8C                443  .if KERNEL1_5 = 1
+                     444  	CRIT #1
+                     445  .endif
014C8C  BD 01 46 EC   446  	SCALL _USBStorageUninit 
014C90                448  L129: 
014C90                449  .if KERNEL1_5 = 1
+                     450  	CRIT #1
+                     451  .endif
014C90  BD 01 3A 2E   452  	SCALL _USBWriteCommit 
014C94                454  L130: 
014C94                456  L131: 
014C94                457  L124: 
014C94                458  	UNLINK_MACRO
014C94  2F 00         458  UNLINK 
+                     458  
014C96                459  .if KERNEL1_5 = 1
+                     460  	CRIT #1
+                     461  .endif
014C96  C6 20         462  	RETS 
+                     464  
+                     465  .area _$MassStorage_Init(USB_MS_CODE,REL) 
+B 00 08
0146AC                466  _MassStorage_Init:: 
0146AC  2E 01         468  	LINK #1 
0146AE  58 F0         469  	PUSH R0 
0146B0  58 F1         470  	PUSH R1 
0146B2                472  L133: 
0146B2                474  L134: 
0146B2                477  L135: 
0146B2  68 F1 3B 24   478  	MOV R1,#(___usbtimer) 
0146B6  68 F0 00 01   479  	MOV R0,#^(___usbtimer) 
0146BA  58 F1         480  	PUSH R1 
0146BC  58 F0         481  	PUSH R0 
0146BE  68 F0 00 14   482  	MOV R0,#20 
0146C2  58 F0         483  	PUSH R0 
0146C4                484  .if KERNEL1_5 = 1
+                     485  	CRIT #1
+                     486  .endif
0146C4  BD 03 C4 8A   487  	SCALL _SetVector 
0146C8  50 F6         488  	ADD SP,#6 
0146CA                490  L136: 
0146CA  68 F0 24 9F   491  	MOV R0,#9375 
0146CE  AA F0 F2 42   492  	MOVX _TM2PRD,R0 
0146D2                494  L137: 
0146D2  68 F0 10 07   495  	MOV R0,#4103 
0146D6  AA F0 F2 3E   496  	MOVX _TMR2CR,R0 
0146DA                498  L138: 
0146DA  48 01         499  	MOV R0,#1 
0146DC  AA F0 F2 A4   500  	MOVX _TM2ICR,R0 
0146E0                502  L139: 
0146E0                503  .if KERNEL1_5 = 1
+                     504  	CRIT #1
+                     505  .endif
0146E0  BD 01 4C 5A   506  	SCALL _MassStorage_SD1_Init 
0146E4                508  L140: 
0146E4                510  L141: 
0146E4                511  L132: 
0146E4  38 1F         512  	POP R1 
0146E6  38 0F         513  	POP R0 
0146E8                514  	UNLINK_MACRO
0146E8  2F 00         514  UNLINK 
+                     514  
0146EA                515  .if KERNEL1_5 = 1
+                     516  	CRIT #1
+                     517  .endif
0146EA  C6 20         518  	RETS 
+                     708  
+                     709  .area _$USB_MassStorage_config_c$(ROM,REL) 
+B 00 01
030000                711  Letext: 
+                     712  
+                     713  
+                     714  
+                     715  
+                     716  
+                     717  
+                     718  
+                     719  .area _USB_MS_XRAM$RD$usb_stor(USB_MS_XRAM,REL,dat) 
+                     720  .even 
+B 00 09
000670                721  _usb_stor:: 
000670                722  	.ds 38 
+                     725  
+                     726  
+                     727  
+                     728  
+                     729  
+                     730  
+                     731  
+                     732  
+                     733  
+                     734  
+                     735  
+                     736  
+                     737  
+                     738  
+                     739  
+                     740  
+                     741  .area _USB_MS_CODE$RD$USB_MassStorage_config_c$(USB_MS_CODE,REL) 
+B 00 0A
014CD8                742  L83: 
014CD8  0D            743  	.db 13 
014CD9  0A            744  	.db 10 
+                     745  	
014CDA  75 73 62 5F   746  	.db 117,115,98,95,99,111,117,110,116,61,0 
014CDE  63 6F 75 6E
014CE2  74 3D 00
+                     747  
+                     748  
+
+Symbol Table
+
+    KERNEL1_5 =000000 
+    KERNEL1_E =000000 
+  6 L100  000050 R
+  6 L101  00005C R
+  6 L102  000068 R
+  6 L103  000068 R
+  6 L104  000068 R
+  6 L105  000082 R
+  6 L106  000082 R
+  6 L107  000082 R
+  6 L108  00008E R
+  6 L109  0000A0 R
+  6 L110  0000AE R
+  6 L111  0000BA R
+  6 L112  0000BA R
+  6 L113  0000BA R
+  6 L114  0000C4 R
+  6 L115  0000C4 R
+  6 L116  0000C4 R
+  6 L117  0000CE R
+  6 L118  0000CE R
+  6 L119  0000CE R
+  6 L120  0000CE R
+  6 L121  0000CE R
+  6 L122  0000D0 R
+  6 L123  0000D0 R
+  7 L124  00000E R
+  7 L125  000002 R
+  7 L126  000002 R
+  7 L127  000002 R
+  7 L128  000006 R
+  7 L129  00000A R
+  7 L130  00000E R
+  7 L131  00000E R
+  8 L132  000038 R
+  8 L133  000006 R
+  8 L134  000006 R
+  8 L135  000006 R
+  8 L136  00001E R
+  8 L137  000026 R
+  8 L138  00002E R
+  8 L139  000034 R
+  8 L140  000038 R
+  8 L141  000038 R
+  2 L35  000048 R
+  2 L36  000044 R
+  2 L37  000044 R
+  2 L38  000044 R
+  2 L39  000048 R
+  2 L40  000048 R
+  3 L41  000070 R
+  3 L42  000010 R
+  3 L43  000064 R
+  3 L47  00000A R
+  3 L48  00000A R
+  3 L49  00000A R
+  3 L50  000010 R
+  3 L51  000064 R
+  3 L52  000064 R
+  3 L53  000064 R
+  3 L54  00006E R
+  3 L55  000070 R
+  3 L56  000070 R
+  4 L57  000014 R
+  4 L58  000002 R
+  4 L59  000002 R
+  4 L60  000002 R
+  4 L61  000014 R
+  4 L62  000014 R
+  5 L63  000032 R
+  5 L64  000006 R
+  5 L65  000006 R
+  5 L66  000006 R
+  5 L67  00000C R
+  5 L68  000010 R
+  5 L69  00001E R
+  5 L70  000032 R
+  5 L71  000032 R
+  6 L72  0000D0 R
+  6 L73  00001A R
+  6 L75  00002A R
+  6 L77  0000CE R
+  6 L79  000068 R
+  6 L81  0000CE R
+  A L83  000000 R
+  6 L84  0000C4 R
+  6 L86  000004 R
+  6 L87  000004 R
+  6 L88  000004 R
+  6 L89  000008 R
+  6 L90  000016 R
+  6 L91  00001A R
+  6 L92  000024 R
+  6 L93  00002A R
+  6 L94  000032 R
+  6 L95  000040 R
+  6 L96  000040 R
+  6 L97  000040 R
+  6 L98  000050 R
+  6 L99  000050 R
+    LIB_PRE_PRPCESS =000000 
+  1 Letext  000000 R
+  1 Ltext0  000000 R
+    R0 =0007D0 
+    R1 =0007D1 
+    R2 =0007D2 
+    R3 =0007D3 
+    R4 =0007D4 
+    R5 =0007D5 
+    R6 =0007D6 
+    R7 =0007D7 
+    Rb0 =0003E8 
+    Rb1 =0003E9 
+    Rb10 =0003F2 
+    Rb11 =0003F3 
+    Rb12 =0003F4 
+    Rb13 =0003F5 
+    Rb14 =0003F6 
+    Rb15 =0003F7 
+    Rb2 =0003EA 
+    Rb3 =0003EB 
+    Rb4 =0003EC 
+    Rb5 =0003ED 
+    Rb6 =0003EE 
+    Rb7 =0003EF 
+    Rb8 =0003F0 
+    Rb9 =0003F1 
+    SPIBOOT_KBDM9 v1.06  000001 
+    _ClrCirqAndAdjustCpri  ****** GX
+  7 _MassStorage_Exit  000000 GR
+  8 _MassStorage_Init  000000 GR
+  6 _MassStorage_Loop  000000 GR
+  5 _MassStorage_Registers  000000 GR
+    _MassStorage_SD1_Init  ****** GX
+    _MassStorage_SD1_Loop  ****** GX
+    _MassStorage_SD1_Register  ****** GX
+  4 _MassStorage_Write  000000 GR
+    _SendString  ****** GX
+    _SetVector  ****** GX
+    _TM2ICR  ****** GX
+    _TM2PRD  ****** GX
+    _TMR2CR  ****** GX
+    _USBCoreInit  ****** GX
+    _USBCoreLoop  ****** GX
+    _USBCoreUninit  ****** GX
+    _USBRemoveCheck  ****** GX
+    _USBStorageInit  ****** GX
+    _USBStorageUninit  ****** GX
+  3 _USBWriteCommit  000000 GR
+    __MULlong  ****** GX
+  2 ___usbtimer  000000 GR
+    _adpate_flag  ****** GX
+    _b_usb_detection  ****** GX
+    _send_hex_u8  ****** GX
+    _timer_check_timeout  ****** GX
+    _usb_core_status  ****** GX
+    _usb_count  ****** GX
+    _usb_nosd_timer  ****** GX
+  9 _usb_stor  000000 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$USB_MassStorage_config_c$ size    0   flags 0
+   2 _$__usbtimer size   7A   flags 0
+   3 _$USBWriteCommit size   7C   flags 0
+   4 _$MassStorage_Write size   18   flags 0
+   5 _$MassStorage_Registers size   3A   flags 0
+   6 _$MassStorage_Loop size   D6   flags 0
+   7 _$MassStorage_Exit size   12   flags 0
+   8 _$MassStorage_Init size   40   flags 0
+   9 _USB_MS_XRAM$RD$usb_stor size   26   flags 0
+   A _USB_MS_CODE$RD$USB_MassStorage_config_c$ size    E   flags 0
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\usb_desc_template.asl          ###                          
+###########################################################
014CD8                  1 _MSC_IF_INDEX      == 0
+                       2 .even
+                       3 .area USB_STORAGE_IRAM(USB_STORAGE_IRAM)
+B 00 01
012B4E                  4 _USB_Device_Desc::
012B4E  12              5 	.DB  #012H        ;
012B4F  01              6 	.DB  #001H        ;
012B50  00 02           7 	.DB  #000H, #002H ;
012B52  00              8 	.DB  #000H        ;
012B53  00              9 	.DB  #000H        ;
012B54  00             10 	.DB  #000H        ;
012B55  40             11 	.DB  #040H        ;
012B56  DF 16          12 	.DB  #0DFH, #016H ;
012B58  34 12          13 	.DB  #034H, #012H ;
012B5A  00 01          14 	.DB  #000H, #001H ;
012B5C  01             15 	.DB  #001H        ;
012B5D  02             16 	.DB  #002H        ;
012B5E  03             17 	.DB  #003H        ;
012B5F  01             18 	.DB  #001H        ;
012B60                 19 _end_device_descriptor:
012B60                 20 String00::                    
012B60  04             21         .db     #004h         
012B61  03             22         .db     #003h         
012B62  09 04          23         .db     #009h, #004h  
012B64                 24 String01::                    
+                      25     $begin:                   
012B64  0E             26         .db     #($end-$begin)
012B65  03             27         .db     #003h         
012B66  56 00          28         .db     #056H,#00H     
012B68  65 00          29         .db     #065H,#00H     
012B6A  6E 00          30         .db     #06EH,#00H     
012B6C  64 00          31         .db     #064H,#00H     
012B6E  6F 00          32         .db     #06FH,#00H     
012B70  72 00          33         .db     #072H,#00H     
+                      34     $end:                     
012B72                 35 String02::                    
+                      36     $begin:                   
012B72  10             37         .db     #($end-$begin)
012B73  03             38         .db     #003h         
012B74  50 00          39         .db     #050H,#00H     
012B76  72 00          40         .db     #072H,#00H     
012B78  6F 00          41         .db     #06FH,#00H     
012B7A  64 00          42         .db     #064H,#00H     
012B7C  75 00          43         .db     #075H,#00H     
012B7E  63 00          44         .db     #063H,#00H     
012B80  74 00          45         .db     #074H,#00H     
+                      46     $end:                     
012B82                 47 String03::                    
+                      48     $begin:                   
012B82  0E             49         .db     #($end-$begin)
012B83  03             50         .db     #003h         
012B84  31 00          51         .db     #031H,#00H     
012B86  32 00          52         .db     #032H,#00H     
012B88  33 00          53         .db     #033H,#00H     
012B8A  34 00          54         .db     #034H,#00H     
012B8C  35 00          55         .db     #035H,#00H     
012B8E  36 00          56         .db     #036H,#00H     
+                      57     $end:                     
012B90                 58    _end_string_descriptor:    
012B90                 59 _Microsoft_OS_String::        
012B90  00             60     .db  #00H                  
012B91  00             61     .db  #00H                  
012B92                 62   _end_os_string:             
+                      63 .even
012B92                 64 _USB_Configuration_Desc::   
012B92  09             65     .DB  #009H              
012B93  02             66     .DB  #002H              
012B94  20             67     .DB  #<(_end_config_descriptor - _USB_Configuration_Desc)
012B95  00             68     .DB  #000H
012B96  01             69     .DB  #001H        
012B97  01             70     .DB  #001H                  
012B98  00             71     .DB  #000H                  
012B99  80             72     .DB  #080H                  
012B9A  32             73     .DB  #032H                  
+                      74    $interface_descriptor00:      
012B9B  09             75     .DB  #9                     
012B9C  04             76     .DB  #004H                  
012B9D  00             77     .DB  #000H                  
012B9E  00             78     .DB  #000H                  
012B9F  02             79     .DB  #002H                  
012BA0  08             80     .DB  #008H                  
012BA1  06             81     .DB  #006H                  
012BA2  50             82     .DB  #050H                  
012BA3  00             83     .DB  #000H                  
+                      84    $endpoint_descriptor00:       
012BA4  07             85     .db  #7                      
012BA5  05             86     .db  #005h                   
012BA6  81             87     .db  #081h                   
012BA7  02             88     .db  #002h                   
012BA8  00 02          89     .db  #000h, #002h            
012BAA  0F             90     .db  #00fh                   
+                      91    $endpoint_descriptor01:       
012BAB  07             92     .db  #7                      
012BAC  05             93     .db  #005h                   
012BAD  01             94     .db  #001h                   
012BAE  02             95     .db  #002h                   
012BAF  00 02          96     .db  #000h, #002h            
012BB1  0F             97     .db  #00fh                   
012BB2                 98    _end_config_descriptor:      
+                      99 .even
012BB2                100 _USB_Configuration_Desc_FS::   
012BB2  09            101     .DB  #009H              
012BB3  02            102     .DB  #002H              
012BB4  20            103     .DB  #<(_end_config_descriptor_FS - _USB_Configuration_Desc_FS)
012BB5  00            104     .DB  #000H
012BB6  01            105     .DB  #001H        
012BB7  01            106     .DB  #001H                  
012BB8  00            107     .DB  #000H                  
012BB9  80            108     .DB  #080H                  
012BBA  32            109     .DB  #032H                  
+                     110    $interface_descriptor00:      
012BBB  09            111     .DB  #9                     
012BBC  04            112     .DB  #004H                  
012BBD  00            113     .DB  #000H                  
012BBE  00            114     .DB  #000H                  
012BBF  02            115     .DB  #002H                  
012BC0  08            116     .DB  #008H                  
012BC1  06            117     .DB  #006H                  
012BC2  50            118     .DB  #050H                  
012BC3  00            119     .DB  #000H                  
+                     120    $endpoint_descriptor00:       
012BC4  07            121     .db  #7                      
012BC5  05            122     .db  #005h                   
012BC6  81            123     .db  #081h                   
012BC7  02            124     .db  #002h                   
012BC8  40 00         125     .db  #040h, #000h            
012BCA  0F            126     .db  #00fh                   
+                     127    $endpoint_descriptor01:       
012BCB  07            128     .db  #7                      
012BCC  05            129     .db  #005h                   
012BCD  01            130     .db  #001h                   
012BCE  02            131     .db  #002h                   
012BCF  40 00         132     .db  #040h, #000h            
012BD1  0F            133     .db  #00fh                   
012BD2                134    _end_config_descriptor_FS:      
012BD2                135 _USB_Device_Qualifier_Desc::
012BD2  0A            136 	.DB  #00AH			            
012BD3  06            137 	.DB  #006H                      
012BD4  00 02         138 	.DB  #000H, #002H               
012BD6  00            139 	.DB  #000H                      
012BD7  00            140 	.DB  #000H                      
012BD8  00            141 	.DB  #000H                      
012BD9  40            142 	.DB  #040H                      
012BDA  01            143 	.DB  #001H                      
012BDB  00            144     .DB  #000H                      
012BDC                145    _end_device_qualifier_desc:      
+
+Symbol Table
+
+    SPIBOOT_KBDM9 v1.06  000001 
+  1 String00  000012 GR
+  1 String01  000016 GR
+  1 String02  000024 GR
+  1 String03  000034 GR
+  0 _MSC_IF_INDEX =000000 GR
+  1 _Microsoft_OS_String  000042 GR
+  1 _USB_Configuration_Desc  000044 GR
+  1 _USB_Configuration_Desc_FS  000064 GR
+  1 _USB_Device_Desc  000000 GR
+  1 _USB_Device_Qualifier_Desc  000084 GR
+  1 _end_config_descriptor  000064 R
+  1 _end_config_descriptor_FS  000084 R
+  1 _end_device_descriptor  000012 R
+  1 _end_device_qualifier_desc  00008E R
+  1 _end_os_string  000044 R
+  1 _end_string_descriptor  000042 R
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 USB_STORAGE_IRAM size   8E   flags 0
+###########################################################
+###   C:\Program Files\ImagoSemi\ImagoBuilder\bin\multi_debug.asl          ###                          
+###   file not found, skipped.                          ###
+###########################################################
+
+###########################################################
+###   C:\Program Files\ImagoSemi\ImagoBuilder\lib\SPIBOOT_KBDM9 v1.06\crt0.asl          ###                          
+###   file not found, skipped.                          ###
+###########################################################
+
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\linker_generated_routines.asl          ###                          
+###########################################################
+                       1 	.area _$$linker_generated$$reserved_Stack0(SPACE_XRAM,abs)
+                       2 .org	0x0
+B 00 01
000000                  3 	.ds	0x400
+                       4 
+                       5 	.area _$$linker_generated$$adhereto_host_info_table(SPACE_IRAM,dat)
+B 00 02
012552  00 16           6 _adhere_info_table::	.dw	22
012554  00 50 00 00     7 _FAT_TEMP_CODE00_begin ::	.dw	#^FAT_TEMP_CODE00_begin , #FAT_TEMP_CODE00_begin
012558  00 00 00 32     8 _FAT_TEMP_CODE00_size  ::	.dw	#^FAT_TEMP_CODE00_size  , #FAT_TEMP_CODE00_size
01255C  00 01 C1 00     9 _FAT_TEMP_CODE00_anchor::	.dw	#^FAT_TEMP_CODE00_anchor, #FAT_TEMP_CODE00_anchor
+                      10 
012560  00 50 00 32    11 _FAT_TEMP_CODE01_begin ::	.dw	#^FAT_TEMP_CODE01_begin , #FAT_TEMP_CODE01_begin
012564  00 00 00 32    12 _FAT_TEMP_CODE01_size  ::	.dw	#^FAT_TEMP_CODE01_size  , #FAT_TEMP_CODE01_size
012568  00 01 C1 00    13 _FAT_TEMP_CODE01_anchor::	.dw	#^FAT_TEMP_CODE01_anchor, #FAT_TEMP_CODE01_anchor
+                      14 
01256C  00 50 00 64    15 _FAT_TEMP_CODE02_begin ::	.dw	#^FAT_TEMP_CODE02_begin , #FAT_TEMP_CODE02_begin
012570  00 00 00 32    16 _FAT_TEMP_CODE02_size  ::	.dw	#^FAT_TEMP_CODE02_size  , #FAT_TEMP_CODE02_size
012574  00 01 C1 00    17 _FAT_TEMP_CODE02_anchor::	.dw	#^FAT_TEMP_CODE02_anchor, #FAT_TEMP_CODE02_anchor
+                      18 
012578  00 50 00 96    19 _FAT_TEMP_CODE03_begin ::	.dw	#^FAT_TEMP_CODE03_begin , #FAT_TEMP_CODE03_begin
01257C  00 00 00 32    20 _FAT_TEMP_CODE03_size  ::	.dw	#^FAT_TEMP_CODE03_size  , #FAT_TEMP_CODE03_size
012580  00 01 C1 00    21 _FAT_TEMP_CODE03_anchor::	.dw	#^FAT_TEMP_CODE03_anchor, #FAT_TEMP_CODE03_anchor
+                      22 
012584  00 50 00 C8    23 _FAT_TEMP_CODE04_begin ::	.dw	#^FAT_TEMP_CODE04_begin , #FAT_TEMP_CODE04_begin
012588  00 00 00 32    24 _FAT_TEMP_CODE04_size  ::	.dw	#^FAT_TEMP_CODE04_size  , #FAT_TEMP_CODE04_size
01258C  00 01 C1 00    25 _FAT_TEMP_CODE04_anchor::	.dw	#^FAT_TEMP_CODE04_anchor, #FAT_TEMP_CODE04_anchor
+                      26 
012590  00 50 00 FA    27 _FAT_TEMP_CODE05_begin ::	.dw	#^FAT_TEMP_CODE05_begin , #FAT_TEMP_CODE05_begin
012594  00 00 00 32    28 _FAT_TEMP_CODE05_size  ::	.dw	#^FAT_TEMP_CODE05_size  , #FAT_TEMP_CODE05_size
012598  00 01 C1 00    29 _FAT_TEMP_CODE05_anchor::	.dw	#^FAT_TEMP_CODE05_anchor, #FAT_TEMP_CODE05_anchor
+                      30 
01259C  00 50 01 2C    31 _FAT_TEMP_CODE06_begin ::	.dw	#^FAT_TEMP_CODE06_begin , #FAT_TEMP_CODE06_begin
0125A0  00 00 00 32    32 _FAT_TEMP_CODE06_size  ::	.dw	#^FAT_TEMP_CODE06_size  , #FAT_TEMP_CODE06_size
0125A4  00 01 C1 00    33 _FAT_TEMP_CODE06_anchor::	.dw	#^FAT_TEMP_CODE06_anchor, #FAT_TEMP_CODE06_anchor
+                      34 
0125A8  00 50 01 5E    35 _FAT_TEMP_CODE07_begin ::	.dw	#^FAT_TEMP_CODE07_begin , #FAT_TEMP_CODE07_begin
0125AC  00 00 00 32    36 _FAT_TEMP_CODE07_size  ::	.dw	#^FAT_TEMP_CODE07_size  , #FAT_TEMP_CODE07_size
0125B0  00 01 C1 00    37 _FAT_TEMP_CODE07_anchor::	.dw	#^FAT_TEMP_CODE07_anchor, #FAT_TEMP_CODE07_anchor
+                      38 
0125B4  00 50 01 90    39 _FAT_TEMP_CODE08_begin ::	.dw	#^FAT_TEMP_CODE08_begin , #FAT_TEMP_CODE08_begin
0125B8  00 00 00 32    40 _FAT_TEMP_CODE08_size  ::	.dw	#^FAT_TEMP_CODE08_size  , #FAT_TEMP_CODE08_size
0125BC  00 01 C1 00    41 _FAT_TEMP_CODE08_anchor::	.dw	#^FAT_TEMP_CODE08_anchor, #FAT_TEMP_CODE08_anchor
+                      42 
0125C0  00 50 01 C2    43 _FAT_TEMP_CODE09_begin ::	.dw	#^FAT_TEMP_CODE09_begin , #FAT_TEMP_CODE09_begin
0125C4  00 00 00 32    44 _FAT_TEMP_CODE09_size  ::	.dw	#^FAT_TEMP_CODE09_size  , #FAT_TEMP_CODE09_size
0125C8  00 01 C1 00    45 _FAT_TEMP_CODE09_anchor::	.dw	#^FAT_TEMP_CODE09_anchor, #FAT_TEMP_CODE09_anchor
+                      46 
0125CC  00 50 01 F4    47 _FAT_TEMP_CODE10_begin ::	.dw	#^FAT_TEMP_CODE10_begin , #FAT_TEMP_CODE10_begin
0125D0  00 00 00 32    48 _FAT_TEMP_CODE10_size  ::	.dw	#^FAT_TEMP_CODE10_size  , #FAT_TEMP_CODE10_size
0125D4  00 01 C1 00    49 _FAT_TEMP_CODE10_anchor::	.dw	#^FAT_TEMP_CODE10_anchor, #FAT_TEMP_CODE10_anchor
+                      50 
0125D8  00 50 02 26    51 _FAT_TEMP_CODE11_begin ::	.dw	#^FAT_TEMP_CODE11_begin , #FAT_TEMP_CODE11_begin
0125DC  00 00 00 32    52 _FAT_TEMP_CODE11_size  ::	.dw	#^FAT_TEMP_CODE11_size  , #FAT_TEMP_CODE11_size
0125E0  00 01 C1 00    53 _FAT_TEMP_CODE11_anchor::	.dw	#^FAT_TEMP_CODE11_anchor, #FAT_TEMP_CODE11_anchor
+                      54 
0125E4  00 50 02 58    55 _FAT_TEMP_CODE12_begin ::	.dw	#^FAT_TEMP_CODE12_begin , #FAT_TEMP_CODE12_begin
0125E8  00 00 00 32    56 _FAT_TEMP_CODE12_size  ::	.dw	#^FAT_TEMP_CODE12_size  , #FAT_TEMP_CODE12_size
0125EC  00 01 C1 00    57 _FAT_TEMP_CODE12_anchor::	.dw	#^FAT_TEMP_CODE12_anchor, #FAT_TEMP_CODE12_anchor
+                      58 
0125F0  00 50 02 8A    59 _FAT_TEMP_CODE13_begin ::	.dw	#^FAT_TEMP_CODE13_begin , #FAT_TEMP_CODE13_begin
0125F4  00 00 00 32    60 _FAT_TEMP_CODE13_size  ::	.dw	#^FAT_TEMP_CODE13_size  , #FAT_TEMP_CODE13_size
0125F8  00 01 C1 00    61 _FAT_TEMP_CODE13_anchor::	.dw	#^FAT_TEMP_CODE13_anchor, #FAT_TEMP_CODE13_anchor
+                      62 
0125FC  00 50 02 BC    63 _FAT_TEMP_CODE14_begin ::	.dw	#^FAT_TEMP_CODE14_begin , #FAT_TEMP_CODE14_begin
012600  00 00 00 32    64 _FAT_TEMP_CODE14_size  ::	.dw	#^FAT_TEMP_CODE14_size  , #FAT_TEMP_CODE14_size
012604  00 01 C1 00    65 _FAT_TEMP_CODE14_anchor::	.dw	#^FAT_TEMP_CODE14_anchor, #FAT_TEMP_CODE14_anchor
+                      66 
012608  00 50 02 EE    67 _FAT_TEMP_CODE15_begin ::	.dw	#^FAT_TEMP_CODE15_begin , #FAT_TEMP_CODE15_begin
01260C  00 00 00 32    68 _FAT_TEMP_CODE15_size  ::	.dw	#^FAT_TEMP_CODE15_size  , #FAT_TEMP_CODE15_size
012610  00 01 C1 00    69 _FAT_TEMP_CODE15_anchor::	.dw	#^FAT_TEMP_CODE15_anchor, #FAT_TEMP_CODE15_anchor
+                      70 
012614  00 50 03 20    71 _FAT_TEMP_CODE16_begin ::	.dw	#^FAT_TEMP_CODE16_begin , #FAT_TEMP_CODE16_begin
012618  00 00 00 32    72 _FAT_TEMP_CODE16_size  ::	.dw	#^FAT_TEMP_CODE16_size  , #FAT_TEMP_CODE16_size
01261C  00 01 C1 00    73 _FAT_TEMP_CODE16_anchor::	.dw	#^FAT_TEMP_CODE16_anchor, #FAT_TEMP_CODE16_anchor
+                      74 
012620  00 50 03 52    75 _FAT_TEMP_CODE17_begin ::	.dw	#^FAT_TEMP_CODE17_begin , #FAT_TEMP_CODE17_begin
012624  00 00 00 32    76 _FAT_TEMP_CODE17_size  ::	.dw	#^FAT_TEMP_CODE17_size  , #FAT_TEMP_CODE17_size
012628  00 01 C1 00    77 _FAT_TEMP_CODE17_anchor::	.dw	#^FAT_TEMP_CODE17_anchor, #FAT_TEMP_CODE17_anchor
+                      78 
01262C  00 50 03 84    79 _DAC_COMMON_CODE_begin ::	.dw	#^DAC_COMMON_CODE_begin , #DAC_COMMON_CODE_begin
012630  00 00 04 6C    80 _DAC_COMMON_CODE_size  ::	.dw	#^DAC_COMMON_CODE_size  , #DAC_COMMON_CODE_size
012634  00 01 BC 00    81 _DAC_COMMON_CODE_anchor::	.dw	#^DAC_COMMON_CODE_anchor, #DAC_COMMON_CODE_anchor
+                      82 
012638  00 50 07 F0    83 _DAC_TEMP_CODE00_begin ::	.dw	#^DAC_TEMP_CODE00_begin , #DAC_TEMP_CODE00_begin
01263C  00 00 02 38    84 _DAC_TEMP_CODE00_size  ::	.dw	#^DAC_TEMP_CODE00_size  , #DAC_TEMP_CODE00_size
012640  00 01 B9 00    85 _DAC_TEMP_CODE00_anchor::	.dw	#^DAC_TEMP_CODE00_anchor, #DAC_TEMP_CODE00_anchor
+                      86 
012644  00 50 0A 28    87 _DAC_TEMP_CODE01_begin ::	.dw	#^DAC_TEMP_CODE01_begin , #DAC_TEMP_CODE01_begin
012648  00 00 02 D0    88 _DAC_TEMP_CODE01_size  ::	.dw	#^DAC_TEMP_CODE01_size  , #DAC_TEMP_CODE01_size
01264C  00 01 B9 00    89 _DAC_TEMP_CODE01_anchor::	.dw	#^DAC_TEMP_CODE01_anchor, #DAC_TEMP_CODE01_anchor
+                      90 
012650  00 50 0C F8    91 _DAC_TEMP_CODE02_begin ::	.dw	#^DAC_TEMP_CODE02_begin , #DAC_TEMP_CODE02_begin
012654  00 00 00 32    92 _DAC_TEMP_CODE02_size  ::	.dw	#^DAC_TEMP_CODE02_size  , #DAC_TEMP_CODE02_size
012658  00 01 B9 00    93 _DAC_TEMP_CODE02_anchor::	.dw	#^DAC_TEMP_CODE02_anchor, #DAC_TEMP_CODE02_anchor
+                      94 
+                      95 ;------
+                      96 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE00(FAT_TEMP_CODE00,abs)
+                      97 .org	0
+B 00 03
01C100  D0 17          98 	RJMP	$l0
01C102  4C 49 4D 30    99 	.ascii /LIM0/
01C106  00 00         100 	.dw	0
01C108  00 01 C1 00   101 	.dw	#^FAT_TEMP_CODE00_anchor, #FAT_TEMP_CODE00_anchor
01C10C  00 00 00 32   102 	.dw	#^FAT_TEMP_CODE00_size  , #FAT_TEMP_CODE00_size
01C110  46 41 54 5F   103 	.ascii	/FAT_TEMP_CODE00/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 30
01C11F  00 00 00 00   104 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 00 00   105 	.dw	#^FAT_TEMP_CODE00_begin, #FAT_TEMP_CODE00_begin
+                     106 $l0:
+                     107 
+                     108 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE01(FAT_TEMP_CODE01,abs)
+                     109 .org	0
+B 00 04
01C100  D0 17         110 	RJMP	$l1
01C102  4C 49 4D 30   111 	.ascii /LIM0/
01C106  00 00         112 	.dw	0
01C108  00 01 C1 00   113 	.dw	#^FAT_TEMP_CODE01_anchor, #FAT_TEMP_CODE01_anchor
01C10C  00 00 00 32   114 	.dw	#^FAT_TEMP_CODE01_size  , #FAT_TEMP_CODE01_size
01C110  46 41 54 5F   115 	.ascii	/FAT_TEMP_CODE01/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 31
01C11F  00 00 00 00   116 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 00 32   117 	.dw	#^FAT_TEMP_CODE01_begin, #FAT_TEMP_CODE01_begin
+                     118 $l1:
+                     119 
+                     120 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE02(FAT_TEMP_CODE02,abs)
+                     121 .org	0
+B 00 05
01C100  D0 17         122 	RJMP	$l2
01C102  4C 49 4D 30   123 	.ascii /LIM0/
01C106  00 00         124 	.dw	0
01C108  00 01 C1 00   125 	.dw	#^FAT_TEMP_CODE02_anchor, #FAT_TEMP_CODE02_anchor
01C10C  00 00 00 32   126 	.dw	#^FAT_TEMP_CODE02_size  , #FAT_TEMP_CODE02_size
01C110  46 41 54 5F   127 	.ascii	/FAT_TEMP_CODE02/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 32
01C11F  00 00 00 00   128 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 00 64   129 	.dw	#^FAT_TEMP_CODE02_begin, #FAT_TEMP_CODE02_begin
+                     130 $l2:
+                     131 
+                     132 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE03(FAT_TEMP_CODE03,abs)
+                     133 .org	0
+B 00 06
01C100  D0 17         134 	RJMP	$l3
01C102  4C 49 4D 30   135 	.ascii /LIM0/
01C106  00 00         136 	.dw	0
01C108  00 01 C1 00   137 	.dw	#^FAT_TEMP_CODE03_anchor, #FAT_TEMP_CODE03_anchor
01C10C  00 00 00 32   138 	.dw	#^FAT_TEMP_CODE03_size  , #FAT_TEMP_CODE03_size
01C110  46 41 54 5F   139 	.ascii	/FAT_TEMP_CODE03/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 33
01C11F  00 00 00 00   140 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 00 96   141 	.dw	#^FAT_TEMP_CODE03_begin, #FAT_TEMP_CODE03_begin
+                     142 $l3:
+                     143 
+                     144 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE04(FAT_TEMP_CODE04,abs)
+                     145 .org	0
+B 00 07
01C100  D0 17         146 	RJMP	$l4
01C102  4C 49 4D 30   147 	.ascii /LIM0/
01C106  00 00         148 	.dw	0
01C108  00 01 C1 00   149 	.dw	#^FAT_TEMP_CODE04_anchor, #FAT_TEMP_CODE04_anchor
01C10C  00 00 00 32   150 	.dw	#^FAT_TEMP_CODE04_size  , #FAT_TEMP_CODE04_size
01C110  46 41 54 5F   151 	.ascii	/FAT_TEMP_CODE04/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 34
01C11F  00 00 00 00   152 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 00 C8   153 	.dw	#^FAT_TEMP_CODE04_begin, #FAT_TEMP_CODE04_begin
+                     154 $l4:
+                     155 
+                     156 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE05(FAT_TEMP_CODE05,abs)
+                     157 .org	0
+B 00 08
01C100  D0 17         158 	RJMP	$l5
01C102  4C 49 4D 30   159 	.ascii /LIM0/
01C106  00 00         160 	.dw	0
01C108  00 01 C1 00   161 	.dw	#^FAT_TEMP_CODE05_anchor, #FAT_TEMP_CODE05_anchor
01C10C  00 00 00 32   162 	.dw	#^FAT_TEMP_CODE05_size  , #FAT_TEMP_CODE05_size
01C110  46 41 54 5F   163 	.ascii	/FAT_TEMP_CODE05/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 35
01C11F  00 00 00 00   164 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 00 FA   165 	.dw	#^FAT_TEMP_CODE05_begin, #FAT_TEMP_CODE05_begin
+                     166 $l5:
+                     167 
+                     168 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE06(FAT_TEMP_CODE06,abs)
+                     169 .org	0
+B 00 09
01C100  D0 17         170 	RJMP	$l6
01C102  4C 49 4D 30   171 	.ascii /LIM0/
01C106  00 00         172 	.dw	0
01C108  00 01 C1 00   173 	.dw	#^FAT_TEMP_CODE06_anchor, #FAT_TEMP_CODE06_anchor
01C10C  00 00 00 32   174 	.dw	#^FAT_TEMP_CODE06_size  , #FAT_TEMP_CODE06_size
01C110  46 41 54 5F   175 	.ascii	/FAT_TEMP_CODE06/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 36
01C11F  00 00 00 00   176 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 01 2C   177 	.dw	#^FAT_TEMP_CODE06_begin, #FAT_TEMP_CODE06_begin
+                     178 $l6:
+                     179 
+                     180 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE07(FAT_TEMP_CODE07,abs)
+                     181 .org	0
+B 00 0A
01C100  D0 17         182 	RJMP	$l7
01C102  4C 49 4D 30   183 	.ascii /LIM0/
01C106  00 00         184 	.dw	0
01C108  00 01 C1 00   185 	.dw	#^FAT_TEMP_CODE07_anchor, #FAT_TEMP_CODE07_anchor
01C10C  00 00 00 32   186 	.dw	#^FAT_TEMP_CODE07_size  , #FAT_TEMP_CODE07_size
01C110  46 41 54 5F   187 	.ascii	/FAT_TEMP_CODE07/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 37
01C11F  00 00 00 00   188 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 01 5E   189 	.dw	#^FAT_TEMP_CODE07_begin, #FAT_TEMP_CODE07_begin
+                     190 $l7:
+                     191 
+                     192 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE08(FAT_TEMP_CODE08,abs)
+                     193 .org	0
+B 00 0B
01C100  D0 17         194 	RJMP	$l8
01C102  4C 49 4D 30   195 	.ascii /LIM0/
01C106  00 00         196 	.dw	0
01C108  00 01 C1 00   197 	.dw	#^FAT_TEMP_CODE08_anchor, #FAT_TEMP_CODE08_anchor
01C10C  00 00 00 32   198 	.dw	#^FAT_TEMP_CODE08_size  , #FAT_TEMP_CODE08_size
01C110  46 41 54 5F   199 	.ascii	/FAT_TEMP_CODE08/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 38
01C11F  00 00 00 00   200 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 01 90   201 	.dw	#^FAT_TEMP_CODE08_begin, #FAT_TEMP_CODE08_begin
+                     202 $l8:
+                     203 
+                     204 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE09(FAT_TEMP_CODE09,abs)
+                     205 .org	0
+B 00 0C
01C100  D0 17         206 	RJMP	$l9
01C102  4C 49 4D 30   207 	.ascii /LIM0/
01C106  00 00         208 	.dw	0
01C108  00 01 C1 00   209 	.dw	#^FAT_TEMP_CODE09_anchor, #FAT_TEMP_CODE09_anchor
01C10C  00 00 00 32   210 	.dw	#^FAT_TEMP_CODE09_size  , #FAT_TEMP_CODE09_size
01C110  46 41 54 5F   211 	.ascii	/FAT_TEMP_CODE09/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 30 39
01C11F  00 00 00 00   212 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 01 C2   213 	.dw	#^FAT_TEMP_CODE09_begin, #FAT_TEMP_CODE09_begin
+                     214 $l9:
+                     215 
+                     216 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE10(FAT_TEMP_CODE10,abs)
+                     217 .org	0
+B 00 0D
01C100  D0 17         218 	RJMP	$l10
01C102  4C 49 4D 30   219 	.ascii /LIM0/
01C106  00 00         220 	.dw	0
01C108  00 01 C1 00   221 	.dw	#^FAT_TEMP_CODE10_anchor, #FAT_TEMP_CODE10_anchor
01C10C  00 00 00 32   222 	.dw	#^FAT_TEMP_CODE10_size  , #FAT_TEMP_CODE10_size
01C110  46 41 54 5F   223 	.ascii	/FAT_TEMP_CODE10/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 30
01C11F  00 00 00 00   224 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 01 F4   225 	.dw	#^FAT_TEMP_CODE10_begin, #FAT_TEMP_CODE10_begin
+                     226 $l10:
+                     227 
+                     228 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE11(FAT_TEMP_CODE11,abs)
+                     229 .org	0
+B 00 0E
01C100  D0 17         230 	RJMP	$l11
01C102  4C 49 4D 30   231 	.ascii /LIM0/
01C106  00 00         232 	.dw	0
01C108  00 01 C1 00   233 	.dw	#^FAT_TEMP_CODE11_anchor, #FAT_TEMP_CODE11_anchor
01C10C  00 00 00 32   234 	.dw	#^FAT_TEMP_CODE11_size  , #FAT_TEMP_CODE11_size
01C110  46 41 54 5F   235 	.ascii	/FAT_TEMP_CODE11/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 31
01C11F  00 00 00 00   236 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 02 26   237 	.dw	#^FAT_TEMP_CODE11_begin, #FAT_TEMP_CODE11_begin
+                     238 $l11:
+                     239 
+                     240 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE12(FAT_TEMP_CODE12,abs)
+                     241 .org	0
+B 00 0F
01C100  D0 17         242 	RJMP	$l12
01C102  4C 49 4D 30   243 	.ascii /LIM0/
01C106  00 00         244 	.dw	0
01C108  00 01 C1 00   245 	.dw	#^FAT_TEMP_CODE12_anchor, #FAT_TEMP_CODE12_anchor
01C10C  00 00 00 32   246 	.dw	#^FAT_TEMP_CODE12_size  , #FAT_TEMP_CODE12_size
01C110  46 41 54 5F   247 	.ascii	/FAT_TEMP_CODE12/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 32
01C11F  00 00 00 00   248 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 02 58   249 	.dw	#^FAT_TEMP_CODE12_begin, #FAT_TEMP_CODE12_begin
+                     250 $l12:
+                     251 
+                     252 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE13(FAT_TEMP_CODE13,abs)
+                     253 .org	0
+B 00 10
01C100  D0 17         254 	RJMP	$l13
01C102  4C 49 4D 30   255 	.ascii /LIM0/
01C106  00 00         256 	.dw	0
01C108  00 01 C1 00   257 	.dw	#^FAT_TEMP_CODE13_anchor, #FAT_TEMP_CODE13_anchor
01C10C  00 00 00 32   258 	.dw	#^FAT_TEMP_CODE13_size  , #FAT_TEMP_CODE13_size
01C110  46 41 54 5F   259 	.ascii	/FAT_TEMP_CODE13/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 33
01C11F  00 00 00 00   260 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 02 8A   261 	.dw	#^FAT_TEMP_CODE13_begin, #FAT_TEMP_CODE13_begin
+                     262 $l13:
+                     263 
+                     264 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE14(FAT_TEMP_CODE14,abs)
+                     265 .org	0
+B 00 11
01C100  D0 17         266 	RJMP	$l14
01C102  4C 49 4D 30   267 	.ascii /LIM0/
01C106  00 00         268 	.dw	0
01C108  00 01 C1 00   269 	.dw	#^FAT_TEMP_CODE14_anchor, #FAT_TEMP_CODE14_anchor
01C10C  00 00 00 32   270 	.dw	#^FAT_TEMP_CODE14_size  , #FAT_TEMP_CODE14_size
01C110  46 41 54 5F   271 	.ascii	/FAT_TEMP_CODE14/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 34
01C11F  00 00 00 00   272 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 02 BC   273 	.dw	#^FAT_TEMP_CODE14_begin, #FAT_TEMP_CODE14_begin
+                     274 $l14:
+                     275 
+                     276 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE15(FAT_TEMP_CODE15,abs)
+                     277 .org	0
+B 00 12
01C100  D0 17         278 	RJMP	$l15
01C102  4C 49 4D 30   279 	.ascii /LIM0/
01C106  00 00         280 	.dw	0
01C108  00 01 C1 00   281 	.dw	#^FAT_TEMP_CODE15_anchor, #FAT_TEMP_CODE15_anchor
01C10C  00 00 00 32   282 	.dw	#^FAT_TEMP_CODE15_size  , #FAT_TEMP_CODE15_size
01C110  46 41 54 5F   283 	.ascii	/FAT_TEMP_CODE15/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 35
01C11F  00 00 00 00   284 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 02 EE   285 	.dw	#^FAT_TEMP_CODE15_begin, #FAT_TEMP_CODE15_begin
+                     286 $l15:
+                     287 
+                     288 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE16(FAT_TEMP_CODE16,abs)
+                     289 .org	0
+B 00 13
01C100  D0 17         290 	RJMP	$l16
01C102  4C 49 4D 30   291 	.ascii /LIM0/
01C106  00 00         292 	.dw	0
01C108  00 01 C1 00   293 	.dw	#^FAT_TEMP_CODE16_anchor, #FAT_TEMP_CODE16_anchor
01C10C  00 00 00 32   294 	.dw	#^FAT_TEMP_CODE16_size  , #FAT_TEMP_CODE16_size
01C110  46 41 54 5F   295 	.ascii	/FAT_TEMP_CODE16/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 36
01C11F  00 00 00 00   296 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 03 20   297 	.dw	#^FAT_TEMP_CODE16_begin, #FAT_TEMP_CODE16_begin
+                     298 $l16:
+                     299 
+                     300 	.area _$$linker_generated$$adhere_header_FAT_TEMP_CODE17(FAT_TEMP_CODE17,abs)
+                     301 .org	0
+B 00 14
01C100  D0 17         302 	RJMP	$l17
01C102  4C 49 4D 30   303 	.ascii /LIM0/
01C106  00 00         304 	.dw	0
01C108  00 01 C1 00   305 	.dw	#^FAT_TEMP_CODE17_anchor, #FAT_TEMP_CODE17_anchor
01C10C  00 00 00 32   306 	.dw	#^FAT_TEMP_CODE17_size  , #FAT_TEMP_CODE17_size
01C110  46 41 54 5F   307 	.ascii	/FAT_TEMP_CODE17/
01C114  54 45 4D 50
01C118  5F 43 4F 44
01C11C  45 31 37
01C11F  00 00 00 00   308 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01C123  00 00 00 00
01C127  00 00 00 00
01C12B  00
01C12C  00 50 03 52   309 	.dw	#^FAT_TEMP_CODE17_begin, #FAT_TEMP_CODE17_begin
+                     310 $l17:
+                     311 
+                     312 	.area _$$linker_generated$$adhere_header_DAC_COMMON_CODE(DAC_COMMON_CODE,abs)
+                     313 .org	0
+B 00 15
01BC00  D0 17         314 	RJMP	$l18
01BC02  4C 49 4D 30   315 	.ascii /LIM0/
01BC06  00 00         316 	.dw	0
01BC08  00 01 BC 00   317 	.dw	#^DAC_COMMON_CODE_anchor, #DAC_COMMON_CODE_anchor
01BC0C  00 00 04 6C   318 	.dw	#^DAC_COMMON_CODE_size  , #DAC_COMMON_CODE_size
01BC10  44 41 43 5F   319 	.ascii	/DAC_COMMON_CODE/
01BC14  43 4F 4D 4D
01BC18  4F 4E 5F 43
01BC1C  4F 44 45
01BC1F  00 00 00 00   320 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01BC23  00 00 00 00
01BC27  00 00 00 00
01BC2B  00
01BC2C  00 50 03 84   321 	.dw	#^DAC_COMMON_CODE_begin, #DAC_COMMON_CODE_begin
+                     322 $l18:
+                     323 
+                     324 	.area _$$linker_generated$$adhere_header_DAC_TEMP_CODE00(DAC_TEMP_CODE00,abs)
+                     325 .org	0
+B 00 16
01B900  D0 17         326 	RJMP	$l19
01B902  4C 49 4D 30   327 	.ascii /LIM0/
01B906  00 00         328 	.dw	0
01B908  00 01 B9 00   329 	.dw	#^DAC_TEMP_CODE00_anchor, #DAC_TEMP_CODE00_anchor
01B90C  00 00 02 38   330 	.dw	#^DAC_TEMP_CODE00_size  , #DAC_TEMP_CODE00_size
01B910  44 41 43 5F   331 	.ascii	/DAC_TEMP_CODE00/
01B914  54 45 4D 50
01B918  5F 43 4F 44
01B91C  45 30 30
01B91F  00 00 00 00   332 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01B923  00 00 00 00
01B927  00 00 00 00
01B92B  00
01B92C  00 50 07 F0   333 	.dw	#^DAC_TEMP_CODE00_begin, #DAC_TEMP_CODE00_begin
+                     334 $l19:
+                     335 
+                     336 	.area _$$linker_generated$$adhere_header_DAC_TEMP_CODE01(DAC_TEMP_CODE01,abs)
+                     337 .org	0
+B 00 17
01B900  D0 17         338 	RJMP	$l20
01B902  4C 49 4D 30   339 	.ascii /LIM0/
01B906  00 00         340 	.dw	0
01B908  00 01 B9 00   341 	.dw	#^DAC_TEMP_CODE01_anchor, #DAC_TEMP_CODE01_anchor
01B90C  00 00 02 D0   342 	.dw	#^DAC_TEMP_CODE01_size  , #DAC_TEMP_CODE01_size
01B910  44 41 43 5F   343 	.ascii	/DAC_TEMP_CODE01/
01B914  54 45 4D 50
01B918  5F 43 4F 44
01B91C  45 30 31
01B91F  00 00 00 00   344 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01B923  00 00 00 00
01B927  00 00 00 00
01B92B  00
01B92C  00 50 0A 28   345 	.dw	#^DAC_TEMP_CODE01_begin, #DAC_TEMP_CODE01_begin
+                     346 $l20:
+                     347 
+                     348 	.area _$$linker_generated$$adhere_header_DAC_TEMP_CODE02(DAC_TEMP_CODE02,abs)
+                     349 .org	0
+B 00 18
01B900  D0 17         350 	RJMP	$l21
01B902  4C 49 4D 30   351 	.ascii /LIM0/
01B906  00 00         352 	.dw	0
01B908  00 01 B9 00   353 	.dw	#^DAC_TEMP_CODE02_anchor, #DAC_TEMP_CODE02_anchor
01B90C  00 00 00 32   354 	.dw	#^DAC_TEMP_CODE02_size  , #DAC_TEMP_CODE02_size
01B910  44 41 43 5F   355 	.ascii	/DAC_TEMP_CODE02/
01B914  54 45 4D 50
01B918  5F 43 4F 44
01B91C  45 30 32
01B91F  00 00 00 00   356 	.db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
01B923  00 00 00 00
01B927  00 00 00 00
01B92B  00
01B92C  00 50 0C F8   357 	.dw	#^DAC_TEMP_CODE02_begin, #DAC_TEMP_CODE02_begin
+                     358 $l21:
+                     359 
+                     360 	.area USB_MS_CODE$__INIT$copy(USB_MS_CODE,rel)
+B 00 19
0148B6                361 USB_MS_CODE__INIT$copy::
0148B6  2E 00         362 	LINK   #0
0148B8  4C 11         363 	SL     R1,	#1
0148BA  5C 01         364 	SLOSB  R0,	#1
0148BC  4D 11         365 	SR     R1,	#1
0148BE  4C 31         366 	SL     R3,	#1
0148C0  5C 21         367 	SLOSB  R2,	#1
0148C2  4D 31         368 	SR     R3,	#1
0148C4  BA 10 F2 E0   369 	MOVX    DS0,	R0
0148C8  BA 11 F2 E4   370 	MOVX    DS1,	R2
0148CC  52 41         371 	SUB    R4,	#1
0148CE  AF 04 48 E8   372 	REPB   R4,	$2
0148D2  EF F3         373 	BSET   R3.15
0148D4  2B 13         374 	MOVB   [R1],	[R3]
0148D6  50 11         375 	ADD    R1,	#1
0148D8  7C F1 01 F2   376 	BMOV   PSR.2,	R1.15
0148DC  71 10 00 00   377 	ADDC   DS0,	#0
0148E0  FF F1         378 	BCLR   R1.15
0148E2  50 31         379 	ADD    R3,	#1
0148E4  71 11 00 00   380 	ADDC   DS1,	#0
+                     381 $2:
0148E8  2F 00         382 	UNLINK
0148EA  C6 20         383 	RETS
+                     384 
0148EC                385 .mountsym ADC_MAIN_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                386 .mountsym BATTERY_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                387 .mountsym DAC_COMMON_CODE_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                388 .mountsym DAC_TEMP_CODE00_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                389 .mountsym DAC_TEMP_CODE01_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                390 .mountsym DAC_TEMP_CODE02_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                391 .mountsym FAT_TEMP_CODE00_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                392 .mountsym FAT_TEMP_CODE01_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                393 .mountsym FAT_TEMP_CODE02_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                394 .mountsym FAT_TEMP_CODE03_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                395 .mountsym FAT_TEMP_CODE04_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                396 .mountsym FAT_TEMP_CODE05_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                397 .mountsym FAT_TEMP_CODE06_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                398 .mountsym FAT_TEMP_CODE07_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                399 .mountsym FAT_TEMP_CODE08_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                400 .mountsym FAT_TEMP_CODE09_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                401 .mountsym FAT_TEMP_CODE10_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                402 .mountsym FAT_TEMP_CODE11_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                403 .mountsym FAT_TEMP_CODE12_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                404 .mountsym FAT_TEMP_CODE13_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                405 .mountsym FAT_TEMP_CODE14_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                406 .mountsym FAT_TEMP_CODE15_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                407 .mountsym FAT_TEMP_CODE16_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                408 .mountsym FAT_TEMP_CODE17_ADHERE_INFO__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                409 .mountsym KBDMCC__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                410 .mountsym LIBC__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                411 .mountsym SDTL_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                412 .mountsym SPIF_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                413 .mountsym SYSDRV_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                414 .mountsym SYSTEM_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                415 .mountsym SYSTEM_TIMER3_INIT_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                416 .mountsym UART_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                417 .mountsym USBDET_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                418 .mountsym USB_CORE_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                419 .mountsym USB_STORAGE_CODE__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                420 .mountsym USB_STORAGE_IRAM__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
0148EC                421 .mountsym SPACE_IRAM__INIT$copy USB_MS_CODE$__INIT$copy SPACE_IRAM
+                     422 	.area _SGV_INIT_CODE(USB_MS_CODE,rel)
+                     423 .even
0148B6                424 .tail
+B 00 1A
014056  C6 20         425 	RETS
+                     426 
014058                427 .mountsym _SPACE_IRAM_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     428 
014058                429 .mountsym _ADC_MAIN_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     430 
014058                431 .mountsym _BATTERY_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     432 
014058                433 .mountsym _DAC_COMMON_CODE_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     434 
014058                435 .mountsym _DAC_TEMP_CODE00_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     436 
014058                437 .mountsym _DAC_TEMP_CODE01_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     438 
014058                439 .mountsym _DAC_TEMP_CODE02_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     440 
014058                441 .mountsym _FAT_TEMP_CODE00_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     442 
014058                443 .mountsym _FAT_TEMP_CODE01_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     444 
014058                445 .mountsym _FAT_TEMP_CODE02_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     446 
014058                447 .mountsym _FAT_TEMP_CODE03_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     448 
014058                449 .mountsym _FAT_TEMP_CODE04_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     450 
014058                451 .mountsym _FAT_TEMP_CODE05_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     452 
014058                453 .mountsym _FAT_TEMP_CODE06_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     454 
014058                455 .mountsym _FAT_TEMP_CODE07_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     456 
014058                457 .mountsym _FAT_TEMP_CODE08_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     458 
014058                459 .mountsym _FAT_TEMP_CODE09_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     460 
014058                461 .mountsym _FAT_TEMP_CODE10_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     462 
014058                463 .mountsym _FAT_TEMP_CODE11_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     464 
014058                465 .mountsym _FAT_TEMP_CODE12_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     466 
014058                467 .mountsym _FAT_TEMP_CODE13_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     468 
014058                469 .mountsym _FAT_TEMP_CODE14_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     470 
014058                471 .mountsym _FAT_TEMP_CODE15_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     472 
014058                473 .mountsym _FAT_TEMP_CODE16_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     474 
014058                475 .mountsym _FAT_TEMP_CODE17_ADHERE_INFO_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     476 
014058                477 .mountsym _KBDMCC_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     478 
014058                479 .mountsym _LIBC_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     480 
014058                481 .mountsym _SDTL_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     482 
014058                483 .mountsym _SPIF_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     484 
014058                485 .mountsym _SYSDRV_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     486 
014058                487 .mountsym _SYSTEM_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     488 
014058                489 .mountsym _SYSTEM_TIMER3_INIT_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     490 
014058                491 .mountsym _UART_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     492 
014058                493 .mountsym _USBDET_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     494 
014058                495 .mountsym _USB_CORE_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     496 
014058                497 .mountsym _USB_MS_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     498 
014058                499 .mountsym _USB_STORAGE_CODE_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     500 
014058                501 .mountsym _USB_STORAGE_IRAM_CInitFun _SGV_INIT_CODE SPACE_IRAM
+                     502 
+                     503 	.area _SGV_INIT_CODE(DAC_COMMON_CODE,REL)
+                     504 .even 
+B 00 1B
01C06A  C6 20         505 	RETS
01C06C                506 .mountsym _DAC_COMMON_CODE_CInitFun _SGV_INIT_CODE DAC_COMMON_CODE
+                     507 
+                     508 	.area _SGV_INIT_CODE(DAC_TEMP_CODE00,REL)
+                     509 .even 
+B 00 1C
01BB36  C6 20         510 	RETS
01BB38                511 .mountsym _DAC_TEMP_CODE00_CInitFun _SGV_INIT_CODE DAC_TEMP_CODE00
+                     512 
+                     513 	.area _SGV_INIT_CODE(DAC_TEMP_CODE01,REL)
+                     514 .even 
+B 00 1D
01BBCE  C6 20         515 	RETS
01BBD0                516 .mountsym _DAC_TEMP_CODE01_CInitFun _SGV_INIT_CODE DAC_TEMP_CODE01
+                     517 
+                     518 	.area _SGV_INIT_CODE(DAC_TEMP_CODE02,REL)
+                     519 .even 
+B 00 1E
01B930  C6 20         520 	RETS
01B932                521 .mountsym _DAC_TEMP_CODE02_CInitFun _SGV_INIT_CODE DAC_TEMP_CODE02
+                     522 
+                     523 	.area _SGV_INIT_CODE(FAT_TEMP_CODE00,REL)
+                     524 .even 
+B 00 1F
01C130  C6 20         525 	RETS
01C132                526 .mountsym _FAT_TEMP_CODE00_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE00
+                     527 
+                     528 	.area _SGV_INIT_CODE(FAT_TEMP_CODE01,REL)
+                     529 .even 
+B 00 20
01C130  C6 20         530 	RETS
01C132                531 .mountsym _FAT_TEMP_CODE01_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE01
+                     532 
+                     533 	.area _SGV_INIT_CODE(FAT_TEMP_CODE02,REL)
+                     534 .even 
+B 00 21
01C130  C6 20         535 	RETS
01C132                536 .mountsym _FAT_TEMP_CODE02_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE02
+                     537 
+                     538 	.area _SGV_INIT_CODE(FAT_TEMP_CODE03,REL)
+                     539 .even 
+B 00 22
01C130  C6 20         540 	RETS
01C132                541 .mountsym _FAT_TEMP_CODE03_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE03
+                     542 
+                     543 	.area _SGV_INIT_CODE(FAT_TEMP_CODE04,REL)
+                     544 .even 
+B 00 23
01C130  C6 20         545 	RETS
01C132                546 .mountsym _FAT_TEMP_CODE04_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE04
+                     547 
+                     548 	.area _SGV_INIT_CODE(FAT_TEMP_CODE05,REL)
+                     549 .even 
+B 00 24
01C130  C6 20         550 	RETS
01C132                551 .mountsym _FAT_TEMP_CODE05_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE05
+                     552 
+                     553 	.area _SGV_INIT_CODE(FAT_TEMP_CODE06,REL)
+                     554 .even 
+B 00 25
01C130  C6 20         555 	RETS
01C132                556 .mountsym _FAT_TEMP_CODE06_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE06
+                     557 
+                     558 	.area _SGV_INIT_CODE(FAT_TEMP_CODE07,REL)
+                     559 .even 
+B 00 26
01C130  C6 20         560 	RETS
01C132                561 .mountsym _FAT_TEMP_CODE07_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE07
+                     562 
+                     563 	.area _SGV_INIT_CODE(FAT_TEMP_CODE08,REL)
+                     564 .even 
+B 00 27
01C130  C6 20         565 	RETS
01C132                566 .mountsym _FAT_TEMP_CODE08_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE08
+                     567 
+                     568 	.area _SGV_INIT_CODE(FAT_TEMP_CODE09,REL)
+                     569 .even 
+B 00 28
01C130  C6 20         570 	RETS
01C132                571 .mountsym _FAT_TEMP_CODE09_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE09
+                     572 
+                     573 	.area _SGV_INIT_CODE(FAT_TEMP_CODE10,REL)
+                     574 .even 
+B 00 29
01C130  C6 20         575 	RETS
01C132                576 .mountsym _FAT_TEMP_CODE10_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE10
+                     577 
+                     578 	.area _SGV_INIT_CODE(FAT_TEMP_CODE11,REL)
+                     579 .even 
+B 00 2A
01C130  C6 20         580 	RETS
01C132                581 .mountsym _FAT_TEMP_CODE11_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE11
+                     582 
+                     583 	.area _SGV_INIT_CODE(FAT_TEMP_CODE12,REL)
+                     584 .even 
+B 00 2B
01C130  C6 20         585 	RETS
01C132                586 .mountsym _FAT_TEMP_CODE12_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE12
+                     587 
+                     588 	.area _SGV_INIT_CODE(FAT_TEMP_CODE13,REL)
+                     589 .even 
+B 00 2C
01C130  C6 20         590 	RETS
01C132                591 .mountsym _FAT_TEMP_CODE13_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE13
+                     592 
+                     593 	.area _SGV_INIT_CODE(FAT_TEMP_CODE14,REL)
+                     594 .even 
+B 00 2D
01C130  C6 20         595 	RETS
01C132                596 .mountsym _FAT_TEMP_CODE14_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE14
+                     597 
+                     598 	.area _SGV_INIT_CODE(FAT_TEMP_CODE15,REL)
+                     599 .even 
+B 00 2E
01C130  C6 20         600 	RETS
01C132                601 .mountsym _FAT_TEMP_CODE15_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE15
+                     602 
+                     603 	.area _SGV_INIT_CODE(FAT_TEMP_CODE16,REL)
+                     604 .even 
+B 00 2F
01C130  C6 20         605 	RETS
01C132                606 .mountsym _FAT_TEMP_CODE16_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE16
+                     607 
+                     608 	.area _SGV_INIT_CODE(FAT_TEMP_CODE17,REL)
+                     609 .even 
+B 00 30
01C130  C6 20         610 	RETS
01C132                611 .mountsym _FAT_TEMP_CODE17_CInitFun _SGV_INIT_CODE FAT_TEMP_CODE17
+                     612 
+                     613 	.area _$$linker_generated$$_boost(SPACE_IRAM,rel)
+B 00 31
014B7C                614 __$$boost::
+                     615 ;stack
014B7C  68 FF 04 00   616 	MOV	SP,	#0x400
014B80  68 FB 04 00   617 	MOV	FP,	#0x400
014B84  68 F0 01 FF   618 	MOV	R0,	#0x400/2-1
014B88  48 10         619 	MOV	R1,	#0x0
014B8A  48 20         620 	MOV	R2,	#0
014B8C  68 10 00 00   621 	MOV	DS0,	#0
014B90  CF 00         622 	REP	R0
014B92  1A 12         623 	MOV	[R1++],	R2
014B94                624 .refsym _IP_INIT
014B94  BD 01 3F FE   625 SCALL _SPACE_IRAM_CInitFun
014B98  AD 01 16 2C   626 SJMP _main
+                     627 
+                     628 .area _$$linker_generated$$_entry(SPACE_IRAM,abs)
+                     629 .org 0
+B 00 32
010000                630 _main_entry::
010000  AD 01 4B 7C   631 SJMP __$$boost
+                     632 
+
+Symbol Table
+
+    DAC_COMMON_CODE_anchor  ****** GX
+    DAC_COMMON_CODE_begin  ****** GX
+    DAC_COMMON_CODE_size  ****** GX
+    DAC_TEMP_CODE00_anchor  ****** GX
+    DAC_TEMP_CODE00_begin  ****** GX
+    DAC_TEMP_CODE00_size  ****** GX
+    DAC_TEMP_CODE01_anchor  ****** GX
+    DAC_TEMP_CODE01_begin  ****** GX
+    DAC_TEMP_CODE01_size  ****** GX
+    DAC_TEMP_CODE02_anchor  ****** GX
+    DAC_TEMP_CODE02_begin  ****** GX
+    DAC_TEMP_CODE02_size  ****** GX
+    FAT_TEMP_CODE00_anchor  ****** GX
+    FAT_TEMP_CODE00_begin  ****** GX
+    FAT_TEMP_CODE00_size  ****** GX
+    FAT_TEMP_CODE01_anchor  ****** GX
+    FAT_TEMP_CODE01_begin  ****** GX
+    FAT_TEMP_CODE01_size  ****** GX
+    FAT_TEMP_CODE02_anchor  ****** GX
+    FAT_TEMP_CODE02_begin  ****** GX
+    FAT_TEMP_CODE02_size  ****** GX
+    FAT_TEMP_CODE03_anchor  ****** GX
+    FAT_TEMP_CODE03_begin  ****** GX
+    FAT_TEMP_CODE03_size  ****** GX
+    FAT_TEMP_CODE04_anchor  ****** GX
+    FAT_TEMP_CODE04_begin  ****** GX
+    FAT_TEMP_CODE04_size  ****** GX
+    FAT_TEMP_CODE05_anchor  ****** GX
+    FAT_TEMP_CODE05_begin  ****** GX
+    FAT_TEMP_CODE05_size  ****** GX
+    FAT_TEMP_CODE06_anchor  ****** GX
+    FAT_TEMP_CODE06_begin  ****** GX
+    FAT_TEMP_CODE06_size  ****** GX
+    FAT_TEMP_CODE07_anchor  ****** GX
+    FAT_TEMP_CODE07_begin  ****** GX
+    FAT_TEMP_CODE07_size  ****** GX
+    FAT_TEMP_CODE08_anchor  ****** GX
+    FAT_TEMP_CODE08_begin  ****** GX
+    FAT_TEMP_CODE08_size  ****** GX
+    FAT_TEMP_CODE09_anchor  ****** GX
+    FAT_TEMP_CODE09_begin  ****** GX
+    FAT_TEMP_CODE09_size  ****** GX
+    FAT_TEMP_CODE10_anchor  ****** GX
+    FAT_TEMP_CODE10_begin  ****** GX
+    FAT_TEMP_CODE10_size  ****** GX
+    FAT_TEMP_CODE11_anchor  ****** GX
+    FAT_TEMP_CODE11_begin  ****** GX
+    FAT_TEMP_CODE11_size  ****** GX
+    FAT_TEMP_CODE12_anchor  ****** GX
+    FAT_TEMP_CODE12_begin  ****** GX
+    FAT_TEMP_CODE12_size  ****** GX
+    FAT_TEMP_CODE13_anchor  ****** GX
+    FAT_TEMP_CODE13_begin  ****** GX
+    FAT_TEMP_CODE13_size  ****** GX
+    FAT_TEMP_CODE14_anchor  ****** GX
+    FAT_TEMP_CODE14_begin  ****** GX
+    FAT_TEMP_CODE14_size  ****** GX
+    FAT_TEMP_CODE15_anchor  ****** GX
+    FAT_TEMP_CODE15_begin  ****** GX
+    FAT_TEMP_CODE15_size  ****** GX
+    FAT_TEMP_CODE16_anchor  ****** GX
+    FAT_TEMP_CODE16_begin  ****** GX
+    FAT_TEMP_CODE16_size  ****** GX
+    FAT_TEMP_CODE17_anchor  ****** GX
+    FAT_TEMP_CODE17_begin  ****** GX
+    FAT_TEMP_CODE17_size  ****** GX
+    SPIBOOT_KBDM9 v1.06  000001 
+ 19 USB_MS_CODE__INIT$copy  000000 GR
+  2 _DAC_COMMON_CODE_anchor  0000E2 GR
+  2 _DAC_COMMON_CODE_begin  0000DA GR
+  2 _DAC_COMMON_CODE_size  0000DE GR
+  2 _DAC_TEMP_CODE00_anchor  0000EE GR
+  2 _DAC_TEMP_CODE00_begin  0000E6 GR
+  2 _DAC_TEMP_CODE00_size  0000EA GR
+  2 _DAC_TEMP_CODE01_anchor  0000FA GR
+  2 _DAC_TEMP_CODE01_begin  0000F2 GR
+  2 _DAC_TEMP_CODE01_size  0000F6 GR
+  2 _DAC_TEMP_CODE02_anchor  000106 GR
+  2 _DAC_TEMP_CODE02_begin  0000FE GR
+  2 _DAC_TEMP_CODE02_size  000102 GR
+  2 _FAT_TEMP_CODE00_anchor  00000A GR
+  2 _FAT_TEMP_CODE00_begin  000002 GR
+  2 _FAT_TEMP_CODE00_size  000006 GR
+  2 _FAT_TEMP_CODE01_anchor  000016 GR
+  2 _FAT_TEMP_CODE01_begin  00000E GR
+  2 _FAT_TEMP_CODE01_size  000012 GR
+  2 _FAT_TEMP_CODE02_anchor  000022 GR
+  2 _FAT_TEMP_CODE02_begin  00001A GR
+  2 _FAT_TEMP_CODE02_size  00001E GR
+  2 _FAT_TEMP_CODE03_anchor  00002E GR
+  2 _FAT_TEMP_CODE03_begin  000026 GR
+  2 _FAT_TEMP_CODE03_size  00002A GR
+  2 _FAT_TEMP_CODE04_anchor  00003A GR
+  2 _FAT_TEMP_CODE04_begin  000032 GR
+  2 _FAT_TEMP_CODE04_size  000036 GR
+  2 _FAT_TEMP_CODE05_anchor  000046 GR
+  2 _FAT_TEMP_CODE05_begin  00003E GR
+  2 _FAT_TEMP_CODE05_size  000042 GR
+  2 _FAT_TEMP_CODE06_anchor  000052 GR
+  2 _FAT_TEMP_CODE06_begin  00004A GR
+  2 _FAT_TEMP_CODE06_size  00004E GR
+  2 _FAT_TEMP_CODE07_anchor  00005E GR
+  2 _FAT_TEMP_CODE07_begin  000056 GR
+  2 _FAT_TEMP_CODE07_size  00005A GR
+  2 _FAT_TEMP_CODE08_anchor  00006A GR
+  2 _FAT_TEMP_CODE08_begin  000062 GR
+  2 _FAT_TEMP_CODE08_size  000066 GR
+  2 _FAT_TEMP_CODE09_anchor  000076 GR
+  2 _FAT_TEMP_CODE09_begin  00006E GR
+  2 _FAT_TEMP_CODE09_size  000072 GR
+  2 _FAT_TEMP_CODE10_anchor  000082 GR
+  2 _FAT_TEMP_CODE10_begin  00007A GR
+  2 _FAT_TEMP_CODE10_size  00007E GR
+  2 _FAT_TEMP_CODE11_anchor  00008E GR
+  2 _FAT_TEMP_CODE11_begin  000086 GR
+  2 _FAT_TEMP_CODE11_size  00008A GR
+  2 _FAT_TEMP_CODE12_anchor  00009A GR
+  2 _FAT_TEMP_CODE12_begin  000092 GR
+  2 _FAT_TEMP_CODE12_size  000096 GR
+  2 _FAT_TEMP_CODE13_anchor  0000A6 GR
+  2 _FAT_TEMP_CODE13_begin  00009E GR
+  2 _FAT_TEMP_CODE13_size  0000A2 GR
+  2 _FAT_TEMP_CODE14_anchor  0000B2 GR
+  2 _FAT_TEMP_CODE14_begin  0000AA GR
+  2 _FAT_TEMP_CODE14_size  0000AE GR
+  2 _FAT_TEMP_CODE15_anchor  0000BE GR
+  2 _FAT_TEMP_CODE15_begin  0000B6 GR
+  2 _FAT_TEMP_CODE15_size  0000BA GR
+  2 _FAT_TEMP_CODE16_anchor  0000CA GR
+  2 _FAT_TEMP_CODE16_begin  0000C2 GR
+  2 _FAT_TEMP_CODE16_size  0000C6 GR
+  2 _FAT_TEMP_CODE17_anchor  0000D6 GR
+  2 _FAT_TEMP_CODE17_begin  0000CE GR
+  2 _FAT_TEMP_CODE17_size  0000D2 GR
+    _SPACE_IRAM_CInitFun  ****** GX
+ 31 __$$boost  000000 GR
+  2 _adhere_info_table  000000 GR
+    _main  ****** GX
+ 32 _main_entry  000000 GR
+
+
+Area Table
+
+   0 . size    0   flags 0
+   1 _$$linker_generated$$reserved_Stack0 size  400   flags 2
+   2 _$$linker_generated$$adhereto_host_info_table size  10A   flags 0
+   3 _$$linker_generated$$adhere_header_FAT_TEMP_CODE00 size   30   flags 2
+   4 _$$linker_generated$$adhere_header_FAT_TEMP_CODE01 size   30   flags 2
+   5 _$$linker_generated$$adhere_header_FAT_TEMP_CODE02 size   30   flags 2
+   6 _$$linker_generated$$adhere_header_FAT_TEMP_CODE03 size   30   flags 2
+   7 _$$linker_generated$$adhere_header_FAT_TEMP_CODE04 size   30   flags 2
+   8 _$$linker_generated$$adhere_header_FAT_TEMP_CODE05 size   30   flags 2
+   9 _$$linker_generated$$adhere_header_FAT_TEMP_CODE06 size   30   flags 2
+   A _$$linker_generated$$adhere_header_FAT_TEMP_CODE07 size   30   flags 2
+   B _$$linker_generated$$adhere_header_FAT_TEMP_CODE08 size   30   flags 2
+   C _$$linker_generated$$adhere_header_FAT_TEMP_CODE09 size   30   flags 2
+   D _$$linker_generated$$adhere_header_FAT_TEMP_CODE10 size   30   flags 2
+   E _$$linker_generated$$adhere_header_FAT_TEMP_CODE11 size   30   flags 2
+   F _$$linker_generated$$adhere_header_FAT_TEMP_CODE12 size   30   flags 2
+  10 _$$linker_generated$$adhere_header_FAT_TEMP_CODE13 size   30   flags 2
+  11 _$$linker_generated$$adhere_header_FAT_TEMP_CODE14 size   30   flags 2
+  12 _$$linker_generated$$adhere_header_FAT_TEMP_CODE15 size   30   flags 2
+  13 _$$linker_generated$$adhere_header_FAT_TEMP_CODE16 size   30   flags 2
+  14 _$$linker_generated$$adhere_header_FAT_TEMP_CODE17 size   30   flags 2
+  15 _$$linker_generated$$adhere_header_DAC_COMMON_CODE size   30   flags 2
+  16 _$$linker_generated$$adhere_header_DAC_TEMP_CODE00 size   30   flags 2
+  17 _$$linker_generated$$adhere_header_DAC_TEMP_CODE01 size   30   flags 2
+  18 _$$linker_generated$$adhere_header_DAC_TEMP_CODE02 size   30   flags 2
+  19 USB_MS_CODE$__INIT$copy size   36   flags 0
+  1A _SGV_INIT_CODE size    2   flags 0
+  1B _SGV_INIT_CODE size    2   flags 0
+  1C _SGV_INIT_CODE size    2   flags 0
+  1D _SGV_INIT_CODE size    2   flags 0
+  1E _SGV_INIT_CODE size    2   flags 0
+  1F _SGV_INIT_CODE size    2   flags 0
+  20 _SGV_INIT_CODE size    2   flags 0
+  21 _SGV_INIT_CODE size    2   flags 0
+  22 _SGV_INIT_CODE size    2   flags 0
+  23 _SGV_INIT_CODE size    2   flags 0
+  24 _SGV_INIT_CODE size    2   flags 0
+  25 _SGV_INIT_CODE size    2   flags 0
+  26 _SGV_INIT_CODE size    2   flags 0
+  27 _SGV_INIT_CODE size    2   flags 0
+  28 _SGV_INIT_CODE size    2   flags 0
+  29 _SGV_INIT_CODE size    2   flags 0
+  2A _SGV_INIT_CODE size    2   flags 0
+  2B _SGV_INIT_CODE size    2   flags 0
+  2C _SGV_INIT_CODE size    2   flags 0
+  2D _SGV_INIT_CODE size    2   flags 0
+  2E _SGV_INIT_CODE size    2   flags 0
+  2F _SGV_INIT_CODE size    2   flags 0
+  30 _SGV_INIT_CODE size    2   flags 0
+  31 _$$linker_generated$$_boost size   20   flags 0
+  32 _$$linker_generated$$_entry size    4   flags 2
+###########################################################
+###   E:\work\kb\code\80VT\80VT(20160918)t1\Fw\UsbMassStoragev_TSD\OutPut\linker_generated_symbol.asl          ###                          
+###########################################################
010000                  1 FAT_TEMP_CODE00_begin == 0
010000                  2 FAT_TEMP_CODE00_size == 0
010000                  3 FAT_TEMP_CODE00_anchor == 0
+                       4 
010000                  5 FAT_TEMP_CODE01_begin == 0
010000                  6 FAT_TEMP_CODE01_size == 0
010000                  7 FAT_TEMP_CODE01_anchor == 0
+                       8 
010000                  9 FAT_TEMP_CODE02_begin == 0
010000                 10 FAT_TEMP_CODE02_size == 0
010000                 11 FAT_TEMP_CODE02_anchor == 0
+                      12 
010000                 13 FAT_TEMP_CODE03_begin == 0
010000                 14 FAT_TEMP_CODE03_size == 0
010000                 15 FAT_TEMP_CODE03_anchor == 0
+                      16 
010000                 17 FAT_TEMP_CODE04_begin == 0
010000                 18 FAT_TEMP_CODE04_size == 0
010000                 19 FAT_TEMP_CODE04_anchor == 0
+                      20 
010000                 21 FAT_TEMP_CODE05_begin == 0
010000                 22 FAT_TEMP_CODE05_size == 0
010000                 23 FAT_TEMP_CODE05_anchor == 0
+                      24 
010000                 25 FAT_TEMP_CODE06_begin == 0
010000                 26 FAT_TEMP_CODE06_size == 0
010000                 27 FAT_TEMP_CODE06_anchor == 0
+                      28 
010000                 29 FAT_TEMP_CODE07_begin == 0
010000                 30 FAT_TEMP_CODE07_size == 0
010000                 31 FAT_TEMP_CODE07_anchor == 0
+                      32 
010000                 33 FAT_TEMP_CODE08_begin == 0
010000                 34 FAT_TEMP_CODE08_size == 0
010000                 35 FAT_TEMP_CODE08_anchor == 0
+                      36 
010000                 37 FAT_TEMP_CODE09_begin == 0
010000                 38 FAT_TEMP_CODE09_size == 0
010000                 39 FAT_TEMP_CODE09_anchor == 0
+                      40 
010000                 41 FAT_TEMP_CODE10_begin == 0
010000                 42 FAT_TEMP_CODE10_size == 0
010000                 43 FAT_TEMP_CODE10_anchor == 0
+                      44 
010000                 45 FAT_TEMP_CODE11_begin == 0
010000                 46 FAT_TEMP_CODE11_size == 0
010000                 47 FAT_TEMP_CODE11_anchor == 0
+                      48 
010000                 49 FAT_TEMP_CODE12_begin == 0
010000                 50 FAT_TEMP_CODE12_size == 0
010000                 51 FAT_TEMP_CODE12_anchor == 0
+                      52 
010000                 53 FAT_TEMP_CODE13_begin == 0
010000                 54 FAT_TEMP_CODE13_size == 0
010000                 55 FAT_TEMP_CODE13_anchor == 0
+                      56 
010000                 57 FAT_TEMP_CODE14_begin == 0
010000                 58 FAT_TEMP_CODE14_size == 0
010000                 59 FAT_TEMP_CODE14_anchor == 0
+                      60 
010000                 61 FAT_TEMP_CODE15_begin == 0
010000                 62 FAT_TEMP_CODE15_size == 0
010000                 63 FAT_TEMP_CODE15_anchor == 0
+                      64 
010000                 65 FAT_TEMP_CODE16_begin == 0
010000                 66 FAT_TEMP_CODE16_size == 0
010000                 67 FAT_TEMP_CODE16_anchor == 0
+                      68 
010000                 69 FAT_TEMP_CODE17_begin == 0
010000                 70 FAT_TEMP_CODE17_size == 0
010000                 71 FAT_TEMP_CODE17_anchor == 0
+                      72 
010000                 73 DAC_COMMON_CODE_begin == 0
010000                 74 DAC_COMMON_CODE_size == 0
010000                 75 DAC_COMMON_CODE_anchor == 0
+                      76 
010000                 77 DAC_TEMP_CODE00_begin == 0
010000                 78 DAC_TEMP_CODE00_size == 0
010000                 79 DAC_TEMP_CODE00_anchor == 0
+                      80 
010000                 81 DAC_TEMP_CODE01_begin == 0
010000                 82 DAC_TEMP_CODE01_size == 0
010000                 83 DAC_TEMP_CODE01_anchor == 0
+                      84 
010000                 85 DAC_TEMP_CODE02_begin == 0
010000                 86 DAC_TEMP_CODE02_size == 0
010000                 87 DAC_TEMP_CODE02_anchor == 0
+                      88 
+
+Symbol Table
+
+  0 DAC_COMMON_CODE_anchor =000000 GR
+  0 DAC_COMMON_CODE_begin =000000 GR
+  0 DAC_COMMON_CODE_size =000000 GR
+  0 DAC_TEMP_CODE00_anchor =000000 GR
+  0 DAC_TEMP_CODE00_begin =000000 GR
+  0 DAC_TEMP_CODE00_size =000000 GR
+  0 DAC_TEMP_CODE01_anchor =000000 GR
+  0 DAC_TEMP_CODE01_begin =000000 GR
+  0 DAC_TEMP_CODE01_size =000000 GR
+  0 DAC_TEMP_CODE02_anchor =000000 GR
+  0 DAC_TEMP_CODE02_begin =000000 GR
+  0 DAC_TEMP_CODE02_size =000000 GR
+  0 FAT_TEMP_CODE00_anchor =000000 GR
+  0 FAT_TEMP_CODE00_begin =000000 GR
+  0 FAT_TEMP_CODE00_size =000000 GR
+  0 FAT_TEMP_CODE01_anchor =000000 GR
+  0 FAT_TEMP_CODE01_begin =000000 GR
+  0 FAT_TEMP_CODE01_size =000000 GR
+  0 FAT_TEMP_CODE02_anchor =000000 GR
+  0 FAT_TEMP_CODE02_begin =000000 GR
+  0 FAT_TEMP_CODE02_size =000000 GR
+  0 FAT_TEMP_CODE03_anchor =000000 GR
+  0 FAT_TEMP_CODE03_begin =000000 GR
+  0 FAT_TEMP_CODE03_size =000000 GR
+  0 FAT_TEMP_CODE04_anchor =000000 GR
+  0 FAT_TEMP_CODE04_begin =000000 GR
+  0 FAT_TEMP_CODE04_size =000000 GR
+  0 FAT_TEMP_CODE05_anchor =000000 GR
+  0 FAT_TEMP_CODE05_begin =000000 GR
+  0 FAT_TEMP_CODE05_size =000000 GR
+  0 FAT_TEMP_CODE06_anchor =000000 GR
+  0 FAT_TEMP_CODE06_begin =000000 GR
+  0 FAT_TEMP_CODE06_size =000000 GR
+  0 FAT_TEMP_CODE07_anchor =000000 GR
+  0 FAT_TEMP_CODE07_begin =000000 GR
+  0 FAT_TEMP_CODE07_size =000000 GR
+  0 FAT_TEMP_CODE08_anchor =000000 GR
+  0 FAT_TEMP_CODE08_begin =000000 GR
+  0 FAT_TEMP_CODE08_size =000000 GR
+  0 FAT_TEMP_CODE09_anchor =000000 GR
+  0 FAT_TEMP_CODE09_begin =000000 GR
+  0 FAT_TEMP_CODE09_size =000000 GR
+  0 FAT_TEMP_CODE10_anchor =000000 GR
+  0 FAT_TEMP_CODE10_begin =000000 GR
+  0 FAT_TEMP_CODE10_size =000000 GR
+  0 FAT_TEMP_CODE11_anchor =000000 GR
+  0 FAT_TEMP_CODE11_begin =000000 GR
+  0 FAT_TEMP_CODE11_size =000000 GR
+  0 FAT_TEMP_CODE12_anchor =000000 GR
+  0 FAT_TEMP_CODE12_begin =000000 GR
+  0 FAT_TEMP_CODE12_size =000000 GR
+  0 FAT_TEMP_CODE13_anchor =000000 GR
+  0 FAT_TEMP_CODE13_begin =000000 GR
+  0 FAT_TEMP_CODE13_size =000000 GR
+  0 FAT_TEMP_CODE14_anchor =000000 GR
+  0 FAT_TEMP_CODE14_begin =000000 GR
+  0 FAT_TEMP_CODE14_size =000000 GR
+  0 FAT_TEMP_CODE15_anchor =000000 GR
+  0 FAT_TEMP_CODE15_begin =000000 GR
+  0 FAT_TEMP_CODE15_size =000000 GR
+  0 FAT_TEMP_CODE16_anchor =000000 GR
+  0 FAT_TEMP_CODE16_begin =000000 GR
+  0 FAT_TEMP_CODE16_size =000000 GR
+  0 FAT_TEMP_CODE17_anchor =000000 GR
+  0 FAT_TEMP_CODE17_begin =000000 GR
+  0 FAT_TEMP_CODE17_size =000000 GR
+    SPIBOOT_KBDM9 v1.06  000001 
+
+
+Area Table
+
+   0 . size    0   flags 0
Error    : 0
